[1,["57BQ23s0FN+6JX/OUVU1ev","96ReSMQ0pJv6sXiyvIG9ZZ@f9941","a401oQRfZGV56OwYlkGx6l","edZKhCe55I8IJddrIwesS4@f9941","5bK8LUOrJF6L0b6pdaEL6Y@f9941","53OzmN0udHOJ0wtusOLf/6@f9941","723uQgY7BBnJ74ScZ17CAQ@f9941","558eOO0nJIsoCIv+mqORgv@f9941","285iy+n0tI9oc0MsMEPilO@f9941","e014PcSelAAoEYeWXUyBKn@f9941","beM0o/gcxLs5YyJvijfj/e@f9941","aeF2lZEAdEWJDxO+Yfo/II@708ed","a55lZYQLlI2LryqFRCHepy@f9941","ecMBPrxvpGIpMmWjo6w1QA@f9941","3cnpUgnVZIIbEJhiI+F2EA@f9941","d07e3DaMpNnKOKbteXxY85@f9941","ac18Mch6BJcIB1mHucmiYg","262hfF0h9Hz6GzQNuQUdzM","3eqh7h8SdGE4ac9yQHKwIu","ad96+UunlERptkWXJAkZ84@eb5d7","ad96+UunlERptkWXJAkZ84@438fe","aeF2lZEAdEWJDxO+Yfo/II@ab1a3","9e2zwAHvhAU5k7LDo9giCD@f9941","2fKRVLKvlLqqO8Ymom4/u0@f9941","75IVwwRyhNLb48Z9+g6aFk@f9941","14uDKZQndHiKLPXyOByhRR@f9941","dbCXYhlmZFA5Dy9t2NG8C/@f9941","84tdCNLAROrpRmEaaiBD1J@f9941","fcXP5zCjxJcb6bshNEvo7N@f9941","e6dy0mq6pFtpquK/yt5834@f9941","7bhLG9U61P4rAQQinevsN3@f9941","988Qw/RHNLho5EKpd7jqh9@f9941","666ei/jxdHhZi1aPyFFeYt@f9941","cbSKwsyWZBNo2L46KyV3Ki@f9941","e2UC0eI4hNu7XPP2znlmTc@f9941","55Q6taS9hE2bxiQ/LwijKn@f9941","1eqS159XhKf5Qv5mAjGvWD@f9941"],["node","_spriteFrame","_font","_parent","_normalSprite","target","atlas","_target","_checkMark","_defaultClip","_effectAsset","root","cannonCtrl","heroCtrl","bottomToggles","rightNode","leftNode","bottomNode","backNode","diamondNode","topNode","animation","tickCtrl","data","_mesh","_skeleton"],[["cc.Node",["_name","_layer","_active","_prefab","_parent","_components","_lpos","_children","_lrot","_euler"],0,4,1,12,5,2,5,5],["cc.Sprite",["_sizeMode","_isTrimmedMode","_type","_name","node","__prefab","_spriteFrame","_color"],-1,1,4,6,5],["cc.Node",["_name","_layer","_active","_components","_prefab","_parent","_lpos","_children","_lscale","_lrot","_euler"],0,9,4,1,5,2,5,5,5],["cc.UITransform",["_name","node","__prefab","_contentSize","_anchorPoint"],2,1,4,5,5],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","_fontSize","_lineHeight","_enableWrapText","_name","_overflow","node","__prefab","_font","_color"],-5,1,4,6,5],["cc.Toggle",["_transition","_isChecked","_interactable","node","__prefab","_normalColor","_target","_checkMark","_normalSprite","clickEvents"],0,1,4,5,1,1,6,9],["cc.Widget",["_alignFlags","_isAbsRight","_originalWidth","_originalHeight","_top","_left","_alignMode","node","__prefab"],-4,1,4],["cc.Button",["_transition","_name","node","__prefab","clickEvents","_normalSprite","_normalColor","_target"],1,1,4,9,6,5,1],["cc.Node",["_name","_layer","_children","_components","_prefab","_lpos","_lscale","_parent"],1,2,2,4,5,5,1],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.AnimationClip",["_name","_native","sample","enableTrsBlending","_duration","_hash","wrapMode","_keys","_curves"],-4,9,12],["cc.CompactValueTypeArray",["_unitCount","_unitElement","_length","_byteOffset"],-1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_states","_defines","_props"],1,12],["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_parent","_children","_prefab","_lpos","_lrot","_euler"],1,1,9,4,5,5,5],["cc.CompPrefabInfo",["fileId"],2],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["2ede7laeTpEPZwUMlTdh0A2",["outActionName","node","animation","topNode","diamondNode","backNode","bottomNode","leftNode","rightNode","twoItems","eightItems","bottomToggles","heroCtrl","cannonCtrl"],2,1,1,1,1,1,1,1,1,2,2,1,1,1],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["9fcaeFdScVAPq/ZN04eTrKT",["node","tickCtrl"],3,1,1],["cc.ToggleContainer",["node","__prefab"],3,1,4],["cc.SkinnedMeshRenderer",["_shadowCastingMode","_shadowReceivingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],1,1,4,3,4,1,6,6],["cc.ModelLightmapSettings",[],3],["cc.UIMeshRenderer",["node","__prefab"],3,1,4],["cc.SkeletalAnimation",["playOnLoad","_useBakedAnimation","node","__prefab","_clips","_sockets"],1,1,4,3,9],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["b1ba5fV03ZEmZkN49Otx8zL",["node","headNode","leftFootNode","rightFootNode","animation"],3,1,1,1,1,1],["0e440bpCkVNGq00TMH/YKVv",["node","__prefab"],3,1,4],["faf88osOxpFE6Fi2MBDukiX",["node","label"],3,1,1],["6cf90W8A9lORpYHjES87476",["tipLabel","node","__prefab","iconSprite","selectedNode","adMarkNode"],2,1,4,1,1,1],["a45b0ucHEtEjZRD5eVhe/Dh",["node","__prefab","iconSprite","selectedNode","tipLabel"],3,1,4,1,1,1],["cc.Animation",["node","__prefab","_clips"],3,1,4,3],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.Mesh",["_native","_dataLength","_hash","_struct"],0,11],["cc.animation.HierarchyPath",["path"],2]],[[16,0,2],[11,3,0,1,2,5],[19,0,1,2,2],[3,1,2,3,1],[35,0,2],[1,4,5,6,1],[2,0,1,5,3,4,6,3],[9,0,1,3,3],[0,0,1,4,7,3,6,8,9,3],[2,0,1,5,7,3,4,6,3],[0,0,1,4,5,3,3],[1,0,4,5,6,2],[7,0,2,3,4,2],[0,0,1,4,7,5,3,6,3],[0,0,1,4,5,3,6,3],[2,0,2,1,5,3,4,4],[1,1,4,5,2],[4,0,1,3,4,2,8,9,6],[31,0,1,2,3,4,1],[0,0,1,4,3,6,3],[15,0,1,2,3,4,5,6,7,3],[3,0,1,2,3,2],[1,2,0,4,5,6,3],[1,0,1,4,5,3],[0,0,2,1,4,5,3,4],[2,0,1,5,3,4,6,8,3],[1,4,5,1],[0,0,1,4,3,6,8,9,3],[2,0,1,7,3,4,6,3],[2,0,1,5,7,3,4,3],[2,0,1,5,3,4,3],[7,0,2,3,4,5,2],[9,0,1,2,3,4],[5,2,1,3,4,5,6,7,8,3],[4,6,0,1,3,4,5,2,8,9,10,8],[26,0,1,2],[0,0,1,7,5,3,6,3],[0,0,1,7,3,6,8,9,3],[0,0,2,1,4,7,5,3,4],[3,1,2,3,4,1],[3,1,3,1],[1,3,2,0,4,5,6,4],[1,1,4,5,6,2],[1,4,5,7,6,1],[7,1,0,2,3,4,6,7,5,3],[21,0,1,1],[5,0,1,3,4,9,5,6,7,8,3],[4,0,1,3,4,2,8,9,11,10,6],[30,0,1,2,3,4,5,2],[11,0,1,2,4],[12,0,1,2,4],[13,0,1,2,3],[14,0,2],[0,0,1,7,5,3,3],[0,0,1,4,5,6,3],[0,0,1,4,7,5,3,3],[0,0,1,4,7,3,6,3],[2,0,1,5,7,3,6,3],[2,0,1,3,4,6,3],[2,0,1,5,3,6,8,3],[2,0,1,5,3,4,6,9,10,3],[8,0,1,2,3,4,5,6,3],[8,0,1,7,2,3,4,5,3],[3,1,2,1],[6,0,1,2,3,7,8,5],[6,0,4,7,8,3],[6,0,5,6,7,4],[1,2,4,5,6,2],[1,0,1,4,5,6,3],[1,4,6,1],[17,0,1,1],[18,0,1,2,3,4,5,6,7,8,9,10,11,12,13,2],[20,0,1,1],[5,0,3,4,9,5,6,7,8,2],[5,2,3,4,5,6,7,8,2],[22,0,1,2,3,4,5,6,7,8,3],[23,1],[24,0,1,1],[4,0,1,3,4,2,8,9,10,6],[4,0,1,7,5,2,8,6],[25,0,1,2,3,4,5,3],[27,0,1,2,3,4,1],[28,0,1,1],[29,0,1,1],[32,0,1,2,1],[33,0,1,2,3,4],[34,0,1,2,3,4],[10,0,1,2,6,3,4,5,7,8,8],[10,0,1,2,3,4,5,7,8,7]],[[[[50,"../matAndEffect/Mankind/hero",[{"hash":3976454846,"name":"../matAndEffect/Mankind/hero|outline-vs:vert|outline-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":195,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}],"blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]}]},{"hash":1845048960,"name":"../matAndEffect/Mankind/hero|unlit-vs:vert|unlit-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(location = 0) out float v_fog_factor;\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 3) out vec2 v_uv;\n#endif\nlayout(location = 4) out vec3 v_worldNormal;\nlayout(location = 5) out vec3 v_worldPos;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_worldPos = pos.xyz;\n  v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(location = 0) in float v_fog_factor;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nlayout(location = 1) in highp vec4 v_shadowPos;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 13) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n  #endif\n#endif\n#if USE_INSTANCING\n  layout(location = 14) in vec4 a_matWorld0;\n  layout(location = 15) in vec4 a_matWorld1;\n  layout(location = 16) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 17) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 18) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if USE_TEXTURE\n  layout(location = 3) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 diffuseColor;\n  vec4 emissiveParam;\n  vec4 specularColor;\n  float specularGloss;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\nlayout(location = 4) in vec3 v_worldNormal;\nlayout(location = 5) in vec3 v_worldPos;\nvec4 frag () {\n  vec4 o = mainColor;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture(mainTexture, v_uv);\n  #endif\n  vec3 N =  normalize(v_worldNormal);\n  vec3 L = normalize(cc_mainLitDir.xyz * -1.0);\n  vec3 diffuse = diffuseColor.rgb * max(0.0, dot(N,L));\n  vec3 V = normalize(cc_cameraPos.xyz - v_worldPos.xyz);\n  vec3 H = normalize(L+V);\n  vec3 specular = specularColor.rgb * pow(max(0.0, dot(H,N)), specularGloss);\n  o.rgb *= (diffuse + specular) * (1.0 - emissiveParam.x) + emissiveParam.x;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nout float v_fog_factor;\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_worldPos = pos.xyz;\n  v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin float v_fog_factor;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nin highp vec4 v_shadowPos;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n  #endif\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 diffuseColor;\n  vec4 emissiveParam;\n  vec4 specularColor;\n  float specularGloss;\n};\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nvec4 frag () {\n  vec4 o = mainColor;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture(mainTexture, v_uv);\n  #endif\n  vec3 N =  normalize(v_worldNormal);\n  vec3 L = normalize(cc_mainLitDir.xyz * -1.0);\n  vec3 diffuse = diffuseColor.rgb * max(0.0, dot(N,L));\n  vec3 V = normalize(cc_cameraPos.xyz - v_worldPos.xyz);\n  vec3 H = normalize(L+V);\n  vec3 specular = specularColor.rgb * pow(max(0.0, dot(H,N)), specularGloss);\n  o.rgb *= (diffuse + specular) * (1.0 - emissiveParam.x) + emissiveParam.x;\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_worldPos = pos.xyz;\n  v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n    #if FLIP_UV\n      v_uv.y = 1.0 - v_uv.y;\n    #endif\n    v_uv = v_uv * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n     uniform vec4 albedo;\n     uniform vec4 emissive;\nvarying float v_fog_factor;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvarying highp vec4 v_shadowPos;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nvarying vec3 a_position;\nvarying vec3 a_normal;\nvarying vec2 a_texCoord;\nvarying vec4 a_tangent;\n#if CC_USE_MORPH\n    varying float a_vertexId;\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n  #else\n  #endif\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n    varying vec4 a_joints;\n  varying vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      varying highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n    #else\n    #endif\n  #else\n  #endif\n#endif\n#if USE_INSTANCING\n  varying vec4 a_matWorld0;\n  varying vec4 a_matWorld1;\n  varying vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    varying vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  varying float a_dyn_batch_id;\n  #else\n  #endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 diffuseColor;\n   uniform vec4 emissiveParam;\n   uniform vec4 specularColor;\n   uniform float specularGloss;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvec4 frag () {\n  vec4 o = mainColor;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture2D(mainTexture, v_uv);\n  #endif\n  vec3 N =  normalize(v_worldNormal);\n  vec3 L = normalize(cc_mainLitDir.xyz * -1.0);\n  vec3 diffuse = diffuseColor.rgb * max(0.0, dot(N,L));\n  vec3 V = normalize(cc_cameraPos.xyz - v_worldPos.xyz);\n  vec3 H = normalize(L+V);\n  vec3 specular = specularColor.rgb * pow(max(0.0, dot(H,N)), specularGloss);\n  o.rgb *= (diffuse + specular) * (1.0 - emissiveParam.x) + emissiveParam.x;\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":216,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":221}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"FLIP_UV","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"emissiveParam","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"specularGloss","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":3,"defines":["USE_TEXTURE"]},{"name":"v_worldNormal","type":15,"count":1,"stageFlags":1,"location":4,"defines":[]},{"name":"v_worldPos","type":15,"count":1,"stageFlags":1,"location":5,"defines":[]},{"name":"a_position","type":15,"count":1,"stageFlags":16,"location":6,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":16,"location":7,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":16,"location":8,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":16,"location":9,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":16,"location":10,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":16,"location":11,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":16,"location":12,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":16,"location":13,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":16,"location":14,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":16,"location":15,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":16,"location":16,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":16,"location":17,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":16,"location":18,"defines":["!USE_INSTANCING","USE_BATCHING"]}]},{"hash":826679743,"name":"../matAndEffect/Mankind/hero|shadow-caster-vs:vert|shadow-caster-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      vec4 viewStartPos = cc_matLightView * v_worldPos;\n      float dist = length(viewStartPos.xyz);\n      float linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n      return vec4(linearDepth, 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      vec4 viewStartPos = cc_matLightView * v_worldPos;\n      float dist = length(viewStartPos.xyz);\n      float linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n      return vec4(linearDepth, 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      vec4 viewStartPos = cc_matLightView * v_worldPos;\n      float dist = length(viewStartPos.xyz);\n      float linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n      return vec4(linearDepth, 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":179,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":22}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":1,"location":3,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"../matAndEffect/Mankind/hero|outline-vs:vert|outline-fs:frag","rasterizerState":{"cullMode":1},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"../matAndEffect/Mankind/hero|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"emissive":{"type":13,"value":[0.7],"handleInfo":["emissiveParam",0,13]},"color":{"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"specularGloss":{"type":13,"value":[20]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"emissiveParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.7,0,0,0]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../matAndEffect/Mankind/hero|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"../matAndEffect/Mankind/hero|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"emissive":{"type":13,"value":[0.7],"handleInfo":["emissiveParam",0,13]},"color":{"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"specularGloss":{"type":13,"value":[20]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"emissiveParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.7,0,0,0]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../matAndEffect/Mankind/hero|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[51,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{}],[{},{},{}],[[{},[{},"mainColor",8,[4,4294945580]],{}],0,11,0]]],0,0,[0],[10],[17]],[[[52,"shopLayer"],[53,"shopLayer",33554432,[-28,-29,-30,-31],[[[3,-2,[0,"1f7nuOkxFG96adya9L9P41"],[5,640,1136]],[64,45,false,100,100,-3,[0,"68j8r2dCdEcYy8+QKnXcHl"]],[22,1,0,-4,[0,"18my+qR19MGr+6c2cHO0dp"],69],[70,-5,[0,"f6sKhPXoxJqbio5wW59o9C"]],-6,[71,"shopLayerOutAction",-27,-26,-25,-24,-23,-22,-21,-20,[-18,-19],[-10,-11,-12,-13,-14,-15,-16,-17],-9,-8,-7]],4,4,4,4,1,4],[2,"d0WwZvYGxIjqR/q8TGI/3p",-1,0]],[28,"eight",33554432,[-34,-35,-36,-37,-38,-39,-40,-41],[[3,-32,[0,"f7NISe7HdAD68SLfhnddy8"],[5,430,216.203]],[22,1,0,-33,[0,"e71ctEmpxFC4KlSYRZNz/a"],35]],[2,"72kPHZZ05KZYyPdyCvzAvh",1,0],[1,3.835,-27.632,0]],[28,"unlockButton",33554432,[-46,-47,-48,-49,-50],[[21,"cancelButton<UITransform>",-42,[0,"5brcKhg39By7PMvoi/ro07"],[5,220,90]],[41,"cancelButton<Sprite>",1,0,-43,[0,"a5XFH9kadOYI6k+NiCuq4M"],49],[44,"cancelButton<Button>",3,-45,[0,"5dgO07HBRCo5yqC+uKxnq8"],[[7,"2ede7laeTpEPZwUMlTdh0A2","onRandomUnlockButtonClick",1]],[4,4292269782],-44,50]],[2,"c6ATMfDqRK0KSu0NHjwgr1",1,0],[1,-105.549,-237.878,0]],[9,"bottom",33554432,1,[-53,-54,-55,-56,-57],[[39,-51,[0,"f7NISe7HdAD68SLfhnddy8"],[5,700,810],[0,0.5,0]],[22,1,0,-52,[0,"e71ctEmpxFC4KlSYRZNz/a"],68]],[2,"33Is6EUwpFmq1cAUzz6ShL",1,0],[1,0,-578.525,0]],[61,"hero",33554432,[-60,-61,-62,-63],[-58,-59],[2,"2051Gk3NVGdqsOqynuV9Oj",1,0],[1,0,-100,0],[1,900,900,900]],[36,"topNode0",33554432,[-68,-69,-70],[[[3,-64,[0,"9efjV6zklBObUy8F/2WAlI"],[5,124,124]],[12,3,-66,[0,"763aeQVcdFMp/ASljSUE2w"],[[7,"6cf90W8A9lORpYHjES87476","onSelfClick",-65]]],-67],4,4,1],[2,"f5R6aXzM5GMKbS28TZ1PVl",1,0],[1,-71,-17.732,0]],[36,"topNode1",33554432,[-75,-76,-77],[[[3,-71,[0,"3dUr6qMyVBuIc9hF0zJjms"],[5,124,124]],[12,3,-73,[0,"3cSg0Y/YVHDKUaHElU83R0"],[[7,"6cf90W8A9lORpYHjES87476","onSelfClick",-72]]],-74],4,4,1],[2,"e2FQiVoVFMKrSR2x0fKaV3",1,0],[1,71,-17.732,0]],[13,"node0",33554432,2,[-82,-83,-84],[[[3,-78,[0,"3fzimxO2JHR4TOwO+H3mb7"],[5,97,97]],[12,3,-80,[0,"43ovaP+rpK1r2cpySoPvUc"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-79]]],-81],4,4,1],[2,"09rX0kEwtI9qk0sCYyM2xd",1,0],[1,-160,53,0]],[13,"node1",33554432,2,[-89,-90,-91],[[[3,-85,[0,"e0hgzAWpBHG6NzW3dyPRze"],[5,97,97]],[12,3,-87,[0,"95ejAnc2hH7qENaX6RRXTB"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-86]]],-88],4,4,1],[2,"0c0H7DEu1Ll6w+Ssnr70mL",1,0],[1,-53.333333333333314,53,0]],[13,"node2",33554432,2,[-96,-97,-98],[[[3,-92,[0,"20nWmpi3pBpL9kHgQDovKf"],[5,97,97]],[12,3,-94,[0,"79MtkPz5NKN4V+uCQEhwY8"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-93]]],-95],4,4,1],[2,"d8wq2EbEhI1rM/lQI5Zeu2",1,0],[1,53.33333333333337,53,0]],[13,"node3",33554432,2,[-103,-104,-105],[[[3,-99,[0,"da90AzRK5OB461ZMEVpnqv"],[5,97,97]],[12,3,-101,[0,"ac6sW9q55Hx55WnfeaZJve"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-100]]],-102],4,4,1],[2,"227/nIqiVLe5aciOnVMCHG",1,0],[1,160,53,0]],[13,"node4",33554432,2,[-110,-111,-112],[[[3,-106,[0,"01ZF/St4NHCaRLON2BqtDp"],[5,97,97]],[12,3,-108,[0,"fe+mplFwZGqre2usJFeTVH"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-107]]],-109],4,4,1],[2,"b76XUajmZNKaANd5iSdndu",1,0],[1,-160,-53,0]],[13,"node5",33554432,2,[-117,-118,-119],[[[3,-113,[0,"94vjds6BdPy7QaeEgYADgV"],[5,97,97]],[12,3,-115,[0,"08oMjMy6RAAabDfdo6qhy1"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-114]]],-116],4,4,1],[2,"54l8wP0iRIRJ86H7ZsVlwj",1,0],[1,-53.333,-53,0]],[13,"node6",33554432,2,[-124,-125,-126],[[[3,-120,[0,"a3qDKV6upGA5bAJiQPkA4V"],[5,97,97]],[12,3,-122,[0,"fbpBJAkWBGt75wtl3MbSK0"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-121]]],-123],4,4,1],[2,"cacGolHiZD7aSsjzFnKO3y",1,0],[1,53.333,-53,0]],[13,"node7",33554432,2,[-131,-132,-133],[[[3,-127,[0,"35fWu0G4RFrYXezCfhTJ36"],[5,97,97]],[12,3,-129,[0,"42Eq9b149AR5sN+GHc/+zE"],[[7,"a45b0ucHEtEjZRD5eVhe/Dh","onSelfClick",-128]]],-130],4,4,1],[2,"d4aYpWg99Ax5yNCtyAjCm0",1,0],[1,160,-53,0]],[28,"diamondButton",33554432,[-138,-139,-140],[[21,"cancelButton<UITransform>",-134,[0,"47KIKr2glKbK/ASWdznDK3"],[5,220,90]],[41,"cancelButton<Sprite>",1,0,-135,[0,"06ABNA9xhOlKzSRG/Z3A5L"],54],[44,"cancelButton<Button>",3,-137,[0,"78jN6FgUFPn6Lqtv6nyMSt"],[[7,"2ede7laeTpEPZwUMlTdh0A2","onDiamondButtonClick",1]],[4,4292269782],-136,55]],[2,"f5bHhm2/hDkZg+CeiMx3Ss",1,0],[1,126.572,-237.878,0]],[57,"diamondNode",33554432,1,[-145,-146],[[3,-141,[0,"f7NISe7HdAD68SLfhnddy8"],[5,183,60]],[67,1,-142,[0,"e71ctEmpxFC4KlSYRZNz/a"],6],[72,-144,-143]],[1,253,400,0]],[9,"bottomInnerNode",33554432,4,[-148,2,-149,3,16],[[3,-147,[0,"6bdTH8pi5ODY1iNv/1/BUU"],[5,450,610]]],[2,"1epGAuDTVPVax8meFM0yfw",1,0],[1,0,490.673,0]],[9,"two",33554432,18,[-152,-153,6,7],[[3,-150,[0,"f7NISe7HdAD68SLfhnddy8"],[5,292,179]],[5,-151,[0,"e71ctEmpxFC4KlSYRZNz/a"],26]],[2,"210hfCeLtEoYtxUxTmOzco",1,0],[1,0,195.904,0]],[9,"toggles",33554432,4,[-157,-158,-159],[[45,-154,[0,"352Lg0yJ1CEY+vaR56K/O8"]],[63,-155,[0,"afITcQnApAPLjevJJm/lJo"]],[65,1,-77.27800000000002,-156,[0,"c9f8uKklNM1Lw008yu/5PZ"]]],[2,"aeadbPan5MN5xL5NQR43y5",1,0],[1,0,837.278,0]],[9,"Toggle0",33554432,20,[-165,-166],[[3,-160,[0,"7eWgLqN4BJYKFxZT9fh0Dg"],[5,196,61]],[42,false,-161,[0,"05YCOqjrpMLJpWYS4SFuRX"],58],[73,3,-164,[0,"9b8IW1c0BB3rLtFXFfDwtM"],[[32,"2ede7laeTpEPZwUMlTdh0A2","onToggleClick","hat",1]],[4,4292269782],-163,-162,59]],[2,"f0LdwTljNIb70zEtr0jjlo",1,0],[1,-210,0,0]],[29,"Toggle1",33554432,20,[-172,-173],[[3,-167,[0,"3am8+gLFNBarB83n7cgs7c"],[5,196,66]],[68,2,false,-168,[0,"a6vHySaKhE8LRRbztcFMFD"],62],[46,3,false,-171,[0,"47Ws2zdQ1EoZF5sSQ7bK9q"],[[32,"2ede7laeTpEPZwUMlTdh0A2","onToggleClick","shoes",1]],[4,4292269782],-170,-169,63]],[2,"375LlMff9Or59+Tw3Yes4R",1,0]],[9,"Toggle2",33554432,20,[-179,-180],[[3,-174,[0,"0bxMC01xBNYqaw+108catK"],[5,196,61]],[42,false,-175,[0,"48qhM7/NlBQ6kkNsazUbfd"],66],[46,3,false,-178,[0,"7fq5BFnPJGbY6/uej7UUYe"],[[32,"2ede7laeTpEPZwUMlTdh0A2","onToggleClick","cannon",1]],[4,4292269782],-177,-176,67]],[2,"ceTI7jOOhGIpV+wdb8jlRH",1,0],[1,210,0,0]],[9,"left",33554432,4,[-184],[[3,-181,[0,"f7NISe7HdAD68SLfhnddy8"],[5,164,106]],[5,-182,[0,"e71ctEmpxFC4KlSYRZNz/a"],11],[31,3,-183,[0,"16VDnGFBxFpa0EntV8gkKm"],[[7,"2ede7laeTpEPZwUMlTdh0A2","onLeftButtonClick",1]],12]],[2,"b2LUXCYX9N9rvWndywcPNe",1,0],[1,-313,535.839,0]],[9,"right",33554432,4,[-188],[[3,-185,[0,"f0DBCYAZ5O4qMpLcMi/Trk"],[5,164,106]],[5,-186,[0,"52iwOWE3hAcrhz0ixDohAT"],14],[31,3,-187,[0,"e71PSBwitL04vgA4a/Xx1p"],[[7,"2ede7laeTpEPZwUMlTdh0A2","onRightButtonClick",1]],15]],[2,"d9qNWSoF1FK7f0b5CaEfnW",1,0],[1,313,535.839,0]],[29,"gray",33554432,6,[-191,-192],[[3,-189,[0,"f7NISe7HdAD68SLfhnddy8"],[5,124,124]],[22,1,0,-190,[0,"e71ctEmpxFC4KlSYRZNz/a"],21]],[2,"d4DdseqYlIfrqAAc/4M43i",1,0]],[29,"gray",33554432,7,[-195,-196],[[3,-193,[0,"36uP3J8jBEf6FCOLQj5h0o"],[5,124,124]],[22,1,0,-194,[0,"51+NVTN2JBaLf43Kv725Z5"],25]],[2,"d9R/ZhrNZH6qb+KxPBWgk3",1,0]],[62,"ToggleGroup",33554432,18,[-198,-199,-200,-201],[-197],[2,"e5DTVv5D1FDIDhHRYmI1ql",1,0],[1,0,-163,0]],[9,"Toggle1",33554432,28,[-207],[[3,-202,[0,"7eWgLqN4BJYKFxZT9fh0Dg"],[5,15,15]],[5,-203,[0,"05YCOqjrpMLJpWYS4SFuRX"],36],[74,false,-206,[0,"9b8IW1c0BB3rLtFXFfDwtM"],[4,4292269782],-205,-204,37]],[2,"eaAn2sxe5PnYa2dV0676xQ",1,0],[1,-70,0,0]],[9,"Toggle2",33554432,28,[-213],[[3,-208,[0,"2c9vPh7n5Kcp6vkuvk1C77"],[5,15,15]],[5,-209,[0,"3dud5O0cZAT4mAIvrrP5Fk"],38],[33,false,false,-212,[0,"5bHbjgn2NECp3cXf2EMNjv"],[4,4292269782],-211,-210,39]],[2,"a8D19PgcdLB6bBYViw/WIG",1,0],[1,-23.333333333333314,0,0]],[9,"Toggle3",33554432,28,[-219],[[3,-214,[0,"ffV/ggE0JKCoeocyKHKDwx"],[5,15,15]],[5,-215,[0,"96qwmiy49OdIrZ/cBiMF++"],40],[33,false,false,-218,[0,"fcmKS7gsRCrawXkBPYjXIS"],[4,4292269782],-217,-216,41]],[2,"02wD/7FqZEc6i2n0pOQ+Py",1,0],[1,23.333333333333314,0,0]],[9,"Toggle4",33554432,28,[-225],[[3,-220,[0,"4aqUOHAupDDb5Yk1mqOKoZ"],[5,15,15]],[5,-221,[0,"44m3jLO0tFLo6/zJ+U/bAR"],42],[33,false,false,-224,[0,"2eQaxK8ExCJLWtAopz7A39"],[4,4292269782],-223,-222,43]],[2,"8fcMh+ThNAZqpKzHQco6VA",1,0],[1,70,0,0]],[9,"topNode",33554432,1,[5,-227],[[3,-226,[0,"d2Aq1huv9Hb4lkgPSl4KCs"],[5,200,200]]],[2,"f5V1oj+MVLnbBIYADktpHL",1,0],[1,0,431.05550000000005,0]],[6,"back",33554432,1,[[3,-228,[0,"f7NISe7HdAD68SLfhnddy8"],[5,52,53]],[5,-229,[0,"e71ctEmpxFC4KlSYRZNz/a"],7],[31,3,-230,[0,"50xvDuxI5AwKxXl59px2RA"],[[7,"2ede7laeTpEPZwUMlTdh0A2","onCloseButtonClick",1]],8]],[2,"75Z1/ayf9KooWqKvjBIf9K",1,0],[1,-280.839,403.698,0]],[58,"SPHERE001_1_1",33554432,[[75,1,0,-231,[0,"2eUxziUJNUf558Uxg+3ghf"],[0],[76],5,1,2],[3,-232,[0,"97S0ZQlc5J0pXZzBvvBK9u"],[5,0,0]],[77,-233,[0,"69Oi0Wo9lN6IULMaXoSbWJ"]]],[2,"afc1AralFF9pBaZy/nwM4V",1,0],[1,-0.001031705760397017,-0.056308,0.006184028461575508]],[37,"mixamorig_Hips",33554432,[-234,-235,-236],[2,"b3abiU/VdEoorDD1nSt+WB",1,0],[1,0.002063411520794034,0.2593175768852234,-0.01236803736537695],[3,0.0023929856378427745,0.995876079101868,0.06685621326741793,0.06128095495313775],[1,-7.635983534023475,173.00707807406081,0.7425889600684812]],[37,"mixamorig_Spine2",33554432,[-237,-238,-239],[2,"2dF9eEqpxNa5oHyXgI/h7O",1,0],[1,-3.552713599391162e-17,0.05638634413480759,0],[3,0.029252197995834433,0.015935689430097974,-0.010050659206182446,0.9993944901610781],[1,3.370941359491348,1.8593476206728394,-1.0976731676017177]],[54,"diamondLabel",33554432,17,[[[40,-240,[5,103.33,40]],-241,-242],4,1,1],[1,16.729,0,0]],[59,"diamondIcon",33554432,17,[[40,-243,[5,116,141]],[69,-244,5],[66,8,8.086999999999996,0,-245]],[1,-63.113000000000014,0,0],[1,0.35,0.35,0.35]],[30,"selected",33554432,6,[[3,-246,[0,"f7NISe7HdAD68SLfhnddy8"],[5,124,124]],[5,-247,[0,"e71ctEmpxFC4KlSYRZNz/a"],18]],[2,"22Jsx8bdRHprygJLoo/Ko2",1,0]],[30,"selected",33554432,7,[[3,-248,[0,"19jcdCz6lLXLR5ZIFb83fJ"],[5,124,124]],[5,-249,[0,"15Jala4TtNKrnjQ+9quqLX"],22]],[2,"3ckXG5Y6tPm6tUac2hxtBp",1,0]],[15,"frame",false,33554432,8,[[3,-250,[0,"f7NISe7HdAD68SLfhnddy8"],[5,97,97]],[11,0,-251,[0,"e71ctEmpxFC4KlSYRZNz/a"],27]],[2,"9b0ZcVi7RHeZrSIFgPgse2",1,0]],[15,"frame",false,33554432,9,[[3,-252,[0,"c1liM4TtBK95ujKrgqvJmy"],[5,97,97]],[11,0,-253,[0,"13g+p4PCNIBq9USvmja15C"],28]],[2,"0eJZ6Ib0xLN5G+0hc8gypR",1,0]],[15,"frame",false,33554432,10,[[3,-254,[0,"6cmcljW5xKHIBbX4NpT0al"],[5,97,97]],[11,0,-255,[0,"c3LIBKwUFGUI2y51KayAUN"],29]],[2,"710pez0udDeL60fFMujllK",1,0]],[15,"frame",false,33554432,11,[[3,-256,[0,"c89wBDCRNPG6v1TujcM7Jo"],[5,97,97]],[11,0,-257,[0,"c5QRLhkgJJd6sHAIQyjE3d"],30]],[2,"16fi9Rt/RGAr5KUg8HWEiW",1,0]],[15,"frame",false,33554432,12,[[3,-258,[0,"ccII+aPPZHO7z1kS9QT8Ak"],[5,97,97]],[11,0,-259,[0,"c2Ob2RTSBJs4VnHv2BA4tc"],31]],[2,"78LHikD8pE/Ze98etkbE87",1,0]],[15,"frame",false,33554432,13,[[3,-260,[0,"cecp3hSzNHTI28lIrmq1e1"],[5,97,97]],[11,0,-261,[0,"b64NYTyshMxZZRbvXXR038"],32]],[2,"d9Tz2uRN9Gf7zNeyLoSkJT",1,0]],[15,"frame",false,33554432,14,[[3,-262,[0,"f4v5OQFKJLq7gnJhJWoya3"],[5,97,97]],[11,0,-263,[0,"afRF5usbJLm42JZVk6JAr0"],33]],[2,"adUB0Lp5tNmKvUTENAlJmB",1,0]],[15,"frame",false,33554432,15,[[3,-264,[0,"7eqwE+CDxHJZFRkqDfRQcI"],[5,97,97]],[11,0,-265,[0,"28s7YvwHVHzo9ksg4bewfG"],34]],[2,"95NJT+Zt1LRIYQ2z/jBCSW",1,0]],[55,"Checkmark",33554432,21,[-268],[[[3,-266,[0,"769r8PnWVBcKxoQ/tBgxxJ"],[5,196,66]],-267],4,1],[2,"c3xFkFSoBDFq6LEbpERbac",1,0]],[38,"Checkmark",false,33554432,22,[-271],[[[3,-269,[0,"efW+nRx8pJYbmqdKLtdcQG"],[5,196,66]],-270],4,1],[2,"7a+hDb+qxMD4/rdooBloxE",1,0]],[38,"Checkmark",false,33554432,23,[-274],[[[3,-272,[0,"6eNqj6Mj1Di6/6KZBxr2eJ"],[5,196,66]],-273],4,1],[2,"2bAhV/pB1IMKCaiDmayVN2",1,0]],[56,"001",33554432,5,[35,36],[2,"16xtEPcAdCRpoC/OfUCVLw",1,0],[1,0.001031705760397017,0.2030099481344223,-0.0061840093694627285]],[27,"mixamorig_HeadTop_End Socket",33554432,5,[2,"459M5BtThJeoOZglHA/68j",1,0],[1,-0.0086944287223947,0.9948246522988149,0.04711596146966174],[3,-0.014872127011990031,0.9996891043065057,-0.005494157553204148,-0.019243928958930363],[1,0.662487780956531,-177.78461305385247,-1.6918205514204572]],[27,"mixamorig_LeftToe_End Socket",33554432,5,[2,"f5jTieAC1Os446fYvAsdOn",1,0],[1,0.07272711433904885,0.302079262126885,-0.07560324764239205],[3,0.07720382984028945,0.040350172342354974,0.9746904188846686,-0.20588836680192338],[1,-173.09449777264768,-169.5185000119221,-23.273736617959592]],[27,"mixamorig_RightToe_End Socket",33554432,5,[2,"e7/jwpDXpKU7BxE+Io2myn",1,0],[1,-0.031762256631616345,0.20861501385951434,-0.06462891876727296],[3,-0.08950854851152235,0.7470231606465523,0.655784585502464,-0.062379440670442286],[1,-82.71231730809052,178.57998546787348,-12.447495520367493]],[24,"cannon",false,33554432,33,[[[3,-275,[0,"cdwyI4aZxJwJBDqwW22wwx"],[5,0,0]],-276],4,1],[2,"0eqVkuBV5Ofr3DbA+7302u",1,0]],[30,"shader",33554432,4,[[39,-277,[0,"f7NISe7HdAD68SLfhnddy8"],[5,640,800],[0,0.5,0]],[11,0,-278,[0,"e71ctEmpxFC4KlSYRZNz/a"],9]],[2,"a0RuiMIw5IK4NT+L6LGdK8",1,0]],[60,"shop_10",33554432,24,[[3,-279,[0,"f7NISe7HdAD68SLfhnddy8"],[5,43,51]],[5,-280,[0,"e71ctEmpxFC4KlSYRZNz/a"],10]],[2,"5f3cz1Eb1Buaq6BRdG5pj7",1,0],[1,36,0,0],[3,0,0,1,6.123233995736766e-17],[1,0,0,180]],[6,"shop_10",33554432,25,[[3,-281,[0,"7cDOgOKVhNZrPVL6ntzm82"],[5,43,51]],[5,-282,[0,"d2FnP9+hpHeqUg3V/oMj4J"],13]],[2,"34RLxOxd9C5qsoKTLjB0WK",1,0],[1,-36,0,0]],[6,"normal",33554432,19,[[3,-283,[0,"6168w4cxdGy5uAl92orXAp"],[5,40.42,25]],[78,"免费",20,20,25,false,-284,[0,"c3OSEV+spArqHMotGD+uQc"],16]],[2,"a1jgeA24dCAZxdBeamlhLp",1,0],[1,22.015,68.619,0]],[6,"game_video",33554432,19,[[3,-285,[0,"185xDaD31N2KfY9xw2rtJf"],[5,41.439,30.041]],[11,0,-286,[0,"e80XsBtkpOmrBEAeYYOwRx"],17]],[2,"0a83Qb7lNFEbotpMqOy17t",1,0],[1,-23.284,69.198,0]],[10,"icon",33554432,6,[[[3,-287,[0,"8cpHq3LPVAwpxlL9Krjucm"],[5,124,124]],-288],4,1],[2,"a1Yjam7hdOq6eh+db5InZt",1,0]],[6,"normal",33554432,26,[[3,-289,[0,"bejZDM56JNgak/S00RSOU/"],[5,40.42,25]],[47,"免费",20,20,25,false,-290,[0,"b6osp2r+RHV78VsPX/JaO/"],[4,4278247679],19]],[2,"40zzmj7iVGN7gr1u9+fNDk",1,0],[1,25.57,-47.321,0]],[6,"game_video",33554432,26,[[3,-291,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[43,-292,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4278247679],20]],[2,"097jREC5xJGJhmCb4ls0+v",1,0],[1,28.3,-12.515,0]],[10,"icon",33554432,7,[[[3,-293,[0,"f3a/jchnhAg7wxYfjckEBK"],[5,124,124]],-294],4,1],[2,"c0ZtAsNDZOn5SegCJKIDan",1,0]],[6,"normal",33554432,27,[[3,-295,[0,"9998vYuxhDTIq6z8SiZ0nz"],[5,40.42,25]],[47,"免费",20,20,25,false,-296,[0,"27t/c3RkdNTriHuKXG7s3M"],[4,4278247679],23]],[2,"a2vJswYyNOrblqiZc/ib7l",1,0],[1,25.57,-47.321,0]],[6,"game_video",33554432,27,[[3,-297,[0,"a5OiNuHIVKk55kHTZmV1VF"],[5,59,44]],[43,-298,[0,"40PJqLyjlItbUPWEH5BvAm"],[4,4278247679],24]],[2,"fcSWfM0hhBKael8lIepOK2",1,0],[1,28.3,-12.515,0]],[10,"gray",33554432,8,[[[3,-299,[0,"f7NISe7HdAD68SLfhnddy8"],[5,97,97]],-300],4,1],[2,"29wJfOqQ1NEbUAa+l3x9wW",1,0]],[14,"tip",33554432,8,[[[3,-301,[0,"4d8jEjXy1BwKkPlsdE+EXB"],[5,20.42,25]],-302],4,1],[2,"19v6kUcSJL2Y9q/LyzSbOg",1,0],[1,0,-30.983,0]],[10,"gray",33554432,9,[[[3,-303,[0,"56XAisS9pGqLKV2zXe49Di"],[5,97,97]],-304],4,1],[2,"ectDw+BbBH7pozU8QeLZtQ",1,0]],[14,"tip",33554432,9,[[[3,-305,[0,"74O8BI2NJN2ItJVlT8/ZP5"],[5,0,25]],-306],4,1],[2,"09nUa0nBRIZom8OGqQSbwm",1,0],[1,0,-30.983,0]],[10,"gray",33554432,10,[[[3,-307,[0,"c3UAyEavRISrCsBH1Npnd6"],[5,97,97]],-308],4,1],[2,"ffpVt6MoZC7bYW4M3ZDKYO",1,0]],[14,"tip",33554432,10,[[[3,-309,[0,"dakI6EpJFBJLErScAeCEqQ"],[5,0,25]],-310],4,1],[2,"cc0k864VBMfrZUZSg/FxNA",1,0],[1,0,-30.983,0]],[10,"gray",33554432,11,[[[3,-311,[0,"5ehMltVcdBvJOuWIKzgvED"],[5,97,97]],-312],4,1],[2,"b8fLqdHP1EJoOvR8LWVFDt",1,0]],[14,"tip",33554432,11,[[[3,-313,[0,"54q1KrtbRPgbZpkvaTxMbx"],[5,0,25]],-314],4,1],[2,"8bAl0XIxlJNLBmuBLelYZY",1,0],[1,0,-30.983,0]],[10,"gray",33554432,12,[[[3,-315,[0,"f1A0nbPN5K3rfMp9Lts0Ku"],[5,97,97]],-316],4,1],[2,"27G2CAs/lLra534O9+nwPw",1,0]],[14,"tip",33554432,12,[[[3,-317,[0,"63Q6L+YG9Pfo+RfTI/QXz9"],[5,0,25]],-318],4,1],[2,"2bC0JFxKFLhL8v8cTTrQqR",1,0],[1,0,-30.983,0]],[10,"gray",33554432,13,[[[3,-319,[0,"28W8+zp81GPZY72eCcVLFf"],[5,97,97]],-320],4,1],[2,"1b8PSv7WlDxb+dJvLnX8/L",1,0]],[14,"tip",33554432,13,[[[3,-321,[0,"5asXuVG5tAmoFtpEPHCylV"],[5,0,25]],-322],4,1],[2,"c8fDvwFbVApZUWy1bcJaod",1,0],[1,0,-30.983,0]],[10,"gray",33554432,14,[[[3,-323,[0,"48QuPFSRJHfawzhgSR1Rd3"],[5,97,97]],-324],4,1],[2,"a9P7PDuGJKS5r9NlGCNRvX",1,0]],[14,"tip",33554432,14,[[[3,-325,[0,"a5RhZ7KtJDrL+BCtRi3ZP8"],[5,0,25]],-326],4,1],[2,"11x8nUSe5N84jd4BFkv8p1",1,0],[1,0,-30.983,0]],[10,"gray",33554432,15,[[[3,-327,[0,"0fNVD6yzZOF5bPwMQ0jS6Q"],[5,97,97]],-328],4,1],[2,"c9kea93ehIiZ0mI4zSJO5f",1,0]],[14,"tip",33554432,15,[[[3,-329,[0,"90sF/pJ5tC9KKcUO7fn/5Q"],[5,0,25]],-330],4,1],[2,"9cob8ZplFKrJWEBHS51b5L",1,0],[1,0,-30.983,0]],[10,"Checkmark",33554432,29,[[[3,-331,[0,"769r8PnWVBcKxoQ/tBgxxJ"],[5,15,15]],-332],4,1],[2,"d22UUyKxpBMI2d1grY7916",1,0]],[24,"Checkmark",false,33554432,30,[[[3,-333,[0,"eaDMV9u1VEZo/+V1vi9bWI"],[5,15,15]],-334],4,1],[2,"a9NqkrMvNLu5B7+tgClWtI",1,0]],[24,"Checkmark",false,33554432,31,[[[3,-335,[0,"41nImOXTFHkqTRZg4LfjOl"],[5,15,15]],-336],4,1],[2,"d7XEixTstCraxXxzbKe8Ji",1,0]],[24,"Checkmark",false,33554432,32,[[[3,-337,[0,"3dhrF5t3JERouxRSByAEmr"],[5,15,15]],-338],4,1],[2,"92u7UVw3VKRpux6flFSI5K",1,0]],[6,"Label",33554432,3,[[21,"Label<UITransform>",-339,[0,"f5cxBlCy9Fg7ET6D/6j3Dj"],[5,101.56,25]],[34,"Label<Label>","随机解锁",25,25,25,false,false,-340,[0,"16m8WjChNAOKUudVpEPy86"],44]],[2,"200LMHAo1ChrqaOwYzLsHe",1,0],[1,39.308,23.024,0]],[25,"light",33554432,3,[[3,-341,[0,"a81oGs6GdOa5igOvEwWf8N"],[5,147,147]],[5,-342,[0,"beM1fpUz1HJZycNW9BW3y3"],45]],[2,"9ch6K3PLhHILW6Qnc+iVEJ",1,0],[1,-55.849,2.512,0],[1,0.635,0.635,0.635]],[25,"samll_diamond_icon2",33554432,3,[[3,-343,[0,"f7NISe7HdAD68SLfhnddy8"],[5,36,47]],[5,-344,[0,"e71ctEmpxFC4KlSYRZNz/a"],46]],[2,"62ObSJx1pO0reXtcN5oJqg",1,0],[1,2.127,-15.02,0],[1,0.838,0.838,0.838]],[6,"shop_17",33554432,3,[[3,-345,[0,"f7NISe7HdAD68SLfhnddy8"],[5,39,70]],[5,-346,[0,"e71ctEmpxFC4KlSYRZNz/a"],47]],[2,"09Fq4bQ8RBibyGFH2ZcEcn",1,0],[1,-56.381,0,0]],[6,"Label-001",33554432,3,[[21,"Label<UITransform>",-347,[0,"acgmIYW0RL6arsgee2L+dD"],[5,60.94,25]],[34,"Label<Label>","2500",25,25,25,false,false,-348,[0,"b1rcVmnKZO1oYa1gipkl12"],48]],[2,"53lMexY6tPCbwedavo2Sf1",1,0],[1,53.491,-16.088,0]],[25,"game_video",33554432,16,[[3,-349,[0,"8bPB6iBSVJ3JM7zn7rmd0Z"],[5,59,44]],[5,-350,[0,"07rpOps0lCEp3TskpCUl19"],51]],[2,"ccXdR14oRGap397glA5pKO",1,0],[1,-65.943,0.876,0],[1,1.107,1.107,1.107]],[25,"samll_diamond_icon2",33554432,16,[[3,-351,[0,"4ek36+4QBFBIf5Zc43ZZSy"],[5,36,47]],[5,-352,[0,"d8u3wraIFHOrxO3q5NVcLP"],52]],[2,"ee6UK+gGJEpbgiJohaSd3z",1,0],[1,-2.496,0,0],[1,1.032,1.032,1.032]],[6,"Label-001",33554432,16,[[21,"Label<UITransform>",-353,[0,"4aT9AM6/ZNL6QwOiaH04Vc"],[5,85.31,45]],[34,"Label<Label>","+500",35,35,45,false,false,-354,[0,"94d0KS+S1Cwq5z+xKAUd7O"],53]],[2,"e37tAkh0FJO59YxCXyirut",1,0],[1,59.905,0,0]],[6,"shop_5",33554432,21,[[3,-355,[0,"f7NISe7HdAD68SLfhnddy8"],[5,80,45]],[5,-356,[0,"e71ctEmpxFC4KlSYRZNz/a"],56]],[2,"5c3/iQSzdAmIqcCDhnU93T",1,0],[1,0,1.842,0]],[6,"shop_6",33554432,50,[[3,-357,[0,"f7NISe7HdAD68SLfhnddy8"],[5,80,45]],[5,-358,[0,"e71ctEmpxFC4KlSYRZNz/a"],57]],[2,"09YFxoE0BFVqVRXRnqMg45",1,0],[1,0,-3.689,0]],[6,"shop_5",33554432,22,[[3,-359,[0,"ecDmK/9FpLFIlTKn0gx0dK"],[5,83,34]],[5,-360,[0,"d1CKmcptBP35SMXsw+oyY3"],60]],[2,"cbx1lHBxNGnIcBer+NGiaW",1,0],[1,0,-2.655,0]],[6,"shop_6",33554432,51,[[3,-361,[0,"d0avwOTsZMRpyFnI8Sq5/G"],[5,83,34]],[5,-362,[0,"54p8z+9V9Hvp4BDSob2LnS"],61]],[2,"d6mE16jeVPvL1R4hIx8LKN",1,0],[1,0,-2.655,0]],[6,"shop_5",33554432,23,[[3,-363,[0,"27FV3zMSlPqIzpfqnzrRfz"],[5,66,46]],[5,-364,[0,"fb6f8wOUdEnadWMPhBww3o"],64]],[2,"25kWDaOGZIpYF3H8N/HuRN",1,0],[1,0,0.718,0]],[6,"shop_6",33554432,52,[[3,-365,[0,"3bUlKjttFAeo648q5YObm4"],[5,66,46]],[5,-366,[0,"e2dW+410JK2LKEofH2+v2P"],65]],[2,"8bTA4TBPhCfZkGzP+KOIUz",1,0],[1,0,-2.655,0]],[8,"mixamorig_Spine",33554432,36,[-367],[2,"8fJZM+5oJM07JMzdv/B2zg",1,0],[1,5.551115205843844e-18,0.042288169264793396,-0.00036916256067343056],[3,-0.12386011156302915,0.12867709811501943,0.008135558921744234,0.9838875392367373],[1,-14.232279178800969,14.78869934849394,-0.9091485287284771]],[8,"mixamorig_Spine1",33554432,103,[37],[2,"37WEntappDuYb3lvmkoIZa",1,0],[1,8.881783998477905e-18,0.04933808371424675,-1.0658140798173486e-16],[3,0.0296225394133844,0.01594763596680611,-0.01114812196446284,0.9993717513730505],[1,3.4155328955629343,1.8649123676210873,-1.2226367491481058]],[8,"mixamorig_Neck",33554432,37,[-368],[2,"b9f7KrNJlLpoN++Ez5VmvQ",1,0],[1,-8.881783998477905e-18,0.06343469023704529,6.025056009661967e-10],[3,-0.03445329913631456,-0.020743694300765433,0.027395924743925666,0.9988153646359297],[1,-3.887370065911886,-2.270251200776176,3.2192135415124343]],[20,"mixamorig_Head",33554432,105,[[19,"mixamorig_HeadTop_End",33554432,-369,[2,"44rfQIt35P7JAe0AJOhFVc",1,0],[1,1.4876988900554012e-16,0.3001466393470764,0.0011448562145233154]]],[2,"60xMI00elOxLL+8oA6ngjc",1,0],[1,-8.881783998477905e-18,0.03218189254403114,0.00012275218614377081],[3,0.17151315588373678,-0.057675924414770506,-0.007567358237691217,0.9834629938086156],[1,19.67492316491185,-6.3680724888391795,-1.9867736593111374]],[8,"mixamorig_LeftShoulder",33554432,37,[-370],[2,"28O2+X9ztAqq6atZscCjuo",1,0],[1,-0.025272076949477196,0.051629506051540375,0.0007563747931271791],[3,0.5603799825602487,-0.37139922417934584,0.6482940322743814,0.35742375290707623],[1,117.97876134844462,-96.69447123131813,2.704332927181809]],[8,"mixamorig_LeftArm",33554432,107,[-371],[2,"de//ix0fxOAqjQ+X9BeWVX",1,0],[1,-3.552713599391162e-17,0.0559559240937233,0],[3,0.2752015336763306,0.3504462894354546,-0.3662782370159238,0.8168792855566995],[1,50.59908034177471,57.8769087941026,-23.92393628235333]],[20,"mixamorig_LeftForeArm",33554432,108,[[19,"mixamorig_LeftHand",33554432,-372,[2,"97yRRGgjdI1LJJRdOQkm92",1,0],[1,1.0658140798173486e-16,0.09513875097036362,-8.88178432935015e-17]]],[2,"15rZl7Y5tCo5KGi/1APsT2",1,0],[1,0,0.11092560738325119,1.4210854397564648e-16],[3,0.006906326345678939,0.00015031936239299392,0.5905688959311781,0.8069576563978593],[1,2.0775917931296255,-1.4989801312786166,72.38855712268851]],[8,"mixamorig_RightShoulder",33554432,37,[-373],[2,"7fNZ+xFItHzLy41BlELexN",1,0],[1,0.025272076949477196,0.0516478531062603,-0.0013453873107209802],[3,-0.5585776637453329,-0.38272849204908144,0.6494601450286634,-0.34599337415330583],[1,117.88682900569064,97.85067425987722,-1.2520490992248492]],[8,"mixamorig_RightArm",33554432,110,[-374],[2,"7fZVdPfMZMCL9l6M7n5z/w",1,0],[1,3.552713599391162e-17,0.05598469078540802,-7.105427198782324e-17],[3,0.2286539350301079,0.04263348457390663,-0.11980709300043944,0.965166319581821],[1,27.521012695569773,8.063289708731691,-12.226152546459959]],[20,"mixamorig_RightForeArm",33554432,111,[[19,"mixamorig_RightHand",33554432,-375,[2,"ee+FwDcJpPf6WYztSWZIUU",1,0],[1,1.4210854397564648e-16,0.09513869136571884,-1.4210854397564648e-16]]],[2,"a1zj/CxiRHfLKC1oPeR7x+",1,0],[1,-2.6645351995433716e-17,0.11096233874559402,-1.4210854397564648e-16],[3,-0.030528030960982087,0.0002398746702611978,-0.72136669574569,0.6918800994787557],[1,-135.47892208566378,-132.98453440973418,-86.57434082553048]],[8,"mixamorig_LeftUpLeg",33554432,36,[-376],[2,"fdsOJ1KWlLHb7aSjNLRBM5",1,0],[1,-0.05006299912929535,-0.023445740342140198,0.0006907245260663331],[3,0.07774957824122004,-0.2561955985283482,0.9630979659781691,0.027588517660923306],[1,150.14432396547616,-170.56599062468476,0.7622105331571107]],[8,"mixamorig_LeftLeg",33554432,113,[-377],[2,"ba5Lw8sgJG9YkXiDUCb2Pn",1,0],[1,3.552713599391162e-17,0.12528982758522034,-1.2434497928741312e-16],[3,0.9325883595946978,-0.04379414864434498,-0.07701544634933392,0.34989947858863807],[1,139.31514386463317,6.5490312658269705,-7.792110970249897]],[8,"mixamorig_LeftFoot",33554432,114,[-378],[2,"d17v+BnrVPgIUfxjRCmnWk",1,0],[1,0,0.09087410569190979,0],[3,0.06375178735245939,0.738645141051213,-0.6710665268635934,-0.0029633990677301316],[1,84.74126378419373,175.32063681521672,5.633062086888788]],[20,"mixamorig_LeftToeBase",33554432,115,[[19,"mixamorig_LeftToe_End",33554432,-379,[2,"ceHf0oJ6xMC4YkQYzmXNOh",1,0],[1,-7.105427198782324e-17,0.022281795740127563,-3.552713599391162e-17]]],[2,"f9XMAOyDdCFqleUyIsoBeM",1,0],[1,0,0.05022500082850456,-3.552713599391162e-17],[3,0.2964968049691212,-0.17176897617582526,0.0543017045594477,0.9378893262792524],[1,35.08682276231146,-20.756746258358135,0.00000417985616086644]],[8,"mixamorig_RightUpLeg",33554432,36,[-380],[2,"e3V+4sJvZB96R57ipM27JT",1,0],[1,0.05006299912929535,-0.023445740342140198,0.0007796928402967751],[3,-0.03716114224003699,0.03913115028779787,0.9984831376790634,0.010919082156575818],[1,-175.47068110577064,175.69432436950765,1.082766883450719]],[8,"mixamorig_RightLeg",33554432,117,[-381],[2,"94Iz+v1JNC359h62CDdQzF",1,0],[1,2.6645351995433716e-17,0.1253097951412201,-1.776356799695581e-17],[3,0.24444734454023967,-0.08214293219978132,-0.010078629233006665,0.9661244514396843],[1,28.132779700201798,-8.862712034971757,-3.4187855845158954]],[8,"mixamorig_RightFoot",33554432,118,[-382],[2,"4f2KIO2HtKt46p4PE1Q0/a",1,0],[1,8.881783998477905e-18,0.09085717797279358,7.105427198782324e-17],[3,-0.09158261925069446,0.8051489644076772,-0.5736431516843141,0.11950440782713513],[1,70.17709598985363,174.77112577956743,-16.533808903107424]],[20,"mixamorig_RightToeBase",33554432,119,[[19,"mixamorig_RightToe_End",33554432,-383,[2,"89KH2pqGFO5Lba9/3SbeAa",1,0],[1,3.108624482185328e-17,0.0225580632686615,-3.552713599391162e-17]]],[2,"0fk2gClbRGQZnBvV5LziJF",1,0],[1,-4.440891999238953e-18,0.049431171268224716,7.993606094938482e-17],[3,0.5450361893322382,0.17910028751691662,-0.0337834688919253,0.8183625825752169],[1,65.94589534253889,19.465755405853827,8.04425990705664]],[80,true,false,5,[0,"3aIf9J1WtQz6Pdcg2OWkJM"],[3,4],[[35,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head/mixamorig_HeadTop_End",54],[35,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase/mixamorig_LeftToe_End",55],[35,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase/mixamorig_RightToe_End",56]]],[81,5,54,55,56,121],[82,57,[0,"fcekMrIDVEOoZki4a6xms0"]],[79,"000K",40,2,false,false,38],[83,38,124],[23,0,false,63,[0,"68Ztvq0rhN0bkjImaen9LL"]],[48,null,6,[0,"468FWz3pBNQ53P5FGoz1Mw"],126,40,26],[23,0,false,66,[0,"24Ou4j2UdN36XHpHIkwfjT"]],[48,null,7,[0,"5a8FlsxtJNX64zcO4ri5gB"],128,41,27],[16,false,69,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[17,"",20,20,25,false,70,[0,"58L/JLOJ1F8r7EL0bnQhW8"]],[18,8,[0,"71xhD2n9lLoLYLHt4Kv8Od"],130,42,131],[16,false,71,[0,"33Q7ym6phGbIetIH/g1p8Y"]],[17,"",20,20,25,false,72,[0,"11EiHCjhNNtK5g+fjm4cfH"]],[18,9,[0,"0bbSguXo5MXZ2IfNyLm0dx"],133,43,134],[16,false,73,[0,"e7uHJxXQpK2YdHH0PX2KO/"]],[17,"",20,20,25,false,74,[0,"3cra8w1x9KKYlqhGq397c7"]],[18,10,[0,"72jEXWn59BZYDRcOIsOq/a"],136,44,137],[16,false,75,[0,"19qGLZxn9C5rijV87VzY9W"]],[17,"",20,20,25,false,76,[0,"b0CLxlpvlOTafc62hlB4tx"]],[18,11,[0,"39/3iotD1GLrUVQmVDWEcr"],139,45,140],[16,false,77,[0,"4eR5KaRltAdJp9Z83RtHHw"]],[17,"",20,20,25,false,78,[0,"d9DAwkQHtP8Yyq2Bp8AylN"]],[18,12,[0,"d25QqPsEhDb68jYlVAyAjY"],142,46,143],[16,false,79,[0,"a7a0hiDeZLGpO1wmnjnuC4"]],[17,"",20,20,25,false,80,[0,"f0j9dZQBFEwI1qW7qFQ8xm"]],[18,13,[0,"5a8Gc5aJ5M/qpsRJcucWw/"],145,47,146],[16,false,81,[0,"3aUXi6HwpNl7NwNtSa00vE"]],[17,"",20,20,25,false,82,[0,"fb6WuPC2FDKobvWk9bsoGi"]],[18,14,[0,"911iKRm+tOwr9Vs+md6Xir"],148,48,149],[16,false,83,[0,"3dNIwhmHRHuIMjv05MiAsz"]],[17,"",20,20,25,false,84,[0,"2cdVOyCR5FNZ4XRU4eJLXj"]],[18,15,[0,"ce/jj4du1GCan04e50vDyN"],151,49,152],[26,85,[0,"feLMgPl9lI7psUYhi9QZnd"]],[26,86,[0,"c0G85JImhJ1Y+FLRpfs4Zv"]],[26,87,[0,"54xQzMOsFHjojk/mfZJVLH"]],[26,88,[0,"6cC9V1+8lJ9Zfb56bbhqmo"]],[45,28,[0,"352Lg0yJ1CEY+vaR56K/O8"]],[23,2,false,50,[0,"feLMgPl9lI7psUYhi9QZnd"]],[23,2,false,51,[0,"24eVKWZ1JNCJHaAXMJ8Hzx"]],[23,2,false,52,[0,"756ntr3+hPGoDDVBu5rsxu"]],[84,1,[0,"98iLFu0AlKqLhBvyJGtjn+"],[70]]],0,[0,11,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-5,162,0,12,123,0,13,122,0,14,158,0,-1,132,0,-2,135,0,-3,138,0,-4,141,0,-5,144,0,-6,147,0,-7,150,0,-8,153,0,-1,127,0,-2,129,0,15,25,0,16,24,0,17,4,0,18,34,0,19,17,0,20,33,0,21,162,0,0,1,0,-1,33,0,-2,17,0,-3,34,0,-4,4,0,0,2,0,0,2,0,-1,8,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,0,3,0,0,3,0,7,3,0,0,3,0,-1,89,0,-2,90,0,-3,91,0,-4,92,0,-5,93,0,0,4,0,0,4,0,-1,58,0,-2,24,0,-3,25,0,-4,18,0,-5,20,0,-1,121,0,-2,122,0,-1,53,0,-2,54,0,-3,55,0,-4,56,0,0,6,0,5,6,0,0,6,0,-3,127,0,-1,63,0,-2,40,0,-3,26,0,0,7,0,5,7,0,0,7,0,-3,129,0,-1,66,0,-2,41,0,-3,27,0,0,8,0,5,8,0,0,8,0,-3,132,0,-1,69,0,-2,42,0,-3,70,0,0,9,0,5,9,0,0,9,0,-3,135,0,-1,71,0,-2,43,0,-3,72,0,0,10,0,5,10,0,0,10,0,-3,138,0,-1,73,0,-2,44,0,-3,74,0,0,11,0,5,11,0,0,11,0,-3,141,0,-1,75,0,-2,45,0,-3,76,0,0,12,0,5,12,0,0,12,0,-3,144,0,-1,77,0,-2,46,0,-3,78,0,0,13,0,5,13,0,0,13,0,-3,147,0,-1,79,0,-2,47,0,-3,80,0,0,14,0,5,14,0,0,14,0,-3,150,0,-1,81,0,-2,48,0,-3,82,0,0,15,0,5,15,0,0,15,0,-3,153,0,-1,83,0,-2,49,0,-3,84,0,0,16,0,0,16,0,7,16,0,0,16,0,-1,94,0,-2,95,0,-3,96,0,0,17,0,0,17,0,22,125,0,0,17,0,-1,38,0,-2,39,0,0,18,0,-1,19,0,-3,28,0,0,19,0,0,19,0,-1,61,0,-2,62,0,0,20,0,0,20,0,0,20,0,-1,21,0,-2,22,0,-3,23,0,0,21,0,0,21,0,8,159,0,7,21,0,0,21,0,-1,97,0,-2,50,0,0,22,0,0,22,0,8,160,0,7,22,0,0,22,0,-1,99,0,-2,51,0,0,23,0,0,23,0,8,161,0,7,23,0,0,23,0,-1,101,0,-2,52,0,0,24,0,0,24,0,0,24,0,-1,59,0,0,25,0,0,25,0,0,25,0,-1,60,0,0,26,0,0,26,0,-1,64,0,-2,65,0,0,27,0,0,27,0,-1,67,0,-2,68,0,-1,158,0,-1,29,0,-2,30,0,-3,31,0,-4,32,0,0,29,0,0,29,0,8,154,0,7,29,0,0,29,0,-1,85,0,0,30,0,0,30,0,8,155,0,7,30,0,0,30,0,-1,86,0,0,31,0,0,31,0,8,156,0,7,31,0,0,31,0,-1,87,0,0,32,0,0,32,0,8,157,0,7,32,0,0,32,0,-1,88,0,0,33,0,-2,57,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,-1,103,0,-2,113,0,-3,117,0,-1,105,0,-2,107,0,-3,110,0,0,38,0,-2,124,0,-3,125,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,0,46,0,0,47,0,0,47,0,0,48,0,0,48,0,0,49,0,0,49,0,0,50,0,-2,159,0,-1,98,0,0,51,0,-2,160,0,-1,100,0,0,52,0,-2,161,0,-1,102,0,0,57,0,-2,123,0,0,58,0,0,58,0,0,59,0,0,59,0,0,60,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,-2,126,0,0,64,0,0,64,0,0,65,0,0,65,0,0,66,0,-2,128,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,-2,130,0,0,70,0,-2,131,0,0,71,0,-2,133,0,0,72,0,-2,134,0,0,73,0,-2,136,0,0,74,0,-2,137,0,0,75,0,-2,139,0,0,76,0,-2,140,0,0,77,0,-2,142,0,0,78,0,-2,143,0,0,79,0,-2,145,0,0,80,0,-2,146,0,0,81,0,-2,148,0,0,82,0,-2,149,0,0,83,0,-2,151,0,0,84,0,-2,152,0,0,85,0,-2,154,0,0,86,0,-2,155,0,0,87,0,-2,156,0,0,88,0,-2,157,0,0,89,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,-1,104,0,-1,106,0,3,106,0,-1,108,0,-1,109,0,3,109,0,-1,111,0,-1,112,0,3,112,0,-1,114,0,-1,115,0,-1,116,0,3,116,0,-1,118,0,-1,119,0,-1,120,0,3,120,0,23,1,2,3,18,3,3,18,5,3,33,6,3,19,7,3,19,16,3,18,35,3,53,36,3,53,37,3,104,383],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,124,127,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162],[-1,24,25,-1,-2,1,1,1,4,1,1,1,4,1,1,4,2,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,4,1,4,1,4,2,1,1,1,2,1,4,1,1,2,1,4,1,1,1,4,1,1,1,4,1,1,1,4,1,1,-1,9,2,6,6,1,2,6,1,2,6,1,2,6,1,2,6,1,2,6,1,2,6,1,2,6,1,2,6,1,1,1,1,1,1,1,9],[18,19,20,11,21,22,23,12,12,24,13,6,6,13,6,6,0,7,1,0,7,14,1,0,7,14,25,1,1,1,1,1,1,1,1,26,3,3,3,3,3,3,3,3,0,27,15,28,0,8,8,7,15,0,8,8,29,30,5,5,31,32,5,5,33,34,5,5,35,36,16,11,0,2,2,4,0,2,4,0,2,4,0,2,4,0,2,4,0,2,4,0,2,4,0,2,4,0,2,9,9,9,9,10,10,10,16]],[[[85,"Skin-0",2312109896,["001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2","001/mixamorig_Hips/mixamorig_LeftUpLeg","001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg","001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot","001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase","001/mixamorig_Hips","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm/mixamorig_LeftForeArm","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm/mixamorig_LeftForeArm/mixamorig_LeftHand","001/mixamorig_Hips/mixamorig_Spine","001/mixamorig_Hips/mixamorig_RightUpLeg","001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg","001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot","001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm/mixamorig_RightForeArm","001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm/mixamorig_RightForeArm/mixamorig_RightHand"],[[[7,1,-3.8120548384590336e-16,-4.385380947269368e-15,0,3.8120548384590336e-16,1,1.3877787807814457e-17,0,4.385380947269368e-15,-1.3877787807814457e-17,1,0,-3.5974458063823558e-16,-0.3653374910354614,0.005220678169280291,1],[7,1,1.6653345369377348e-16,1.5402262798502875e-13,0,-1.6653345369377348e-16,1,4.163336342344337e-17,0,-1.5402262798502875e-13,-4.163336342344337e-17,1,0,-9.977138617028544e-16,-0.3331556022167206,0.0053434306755661964,1],[7,1,2.3851799285080856e-16,-2.9630162760043127e-16,0,-2.3592239273284576e-16,0.9999619126319885,0.008729358203709126,0,2.983724378680108e-16,-0.008729358203709126,0.9999619126319885,0,-1.5772477426347179e-16,-0.2697548568248749,0.002434992929920554,1],[7,-0.9902230501174927,-0.1394931674003601,-1.494292909200878e-16,0,0.139260932803154,-0.9885744452476501,-0.05767947807908058,0,0.008045893162488937,-0.057115547358989716,0.9983351826667786,0,-0.06323598325252533,0.09000247716903687,0.008470325730741024,1],[7,-0.9948713779449463,-0.10074588656425476,0.009014708921313286,0,0.1009800061583519,-0.9944032430648804,0.031068941578269005,0,0.005834186915308237,0.0318199060857296,0.9994766116142273,0,-0.06455155462026596,-0.03193345665931702,0.01136156264692545,1],[7,0.9948150515556335,-0.04236382246017456,0.09245725721120834,0,-0.10023757815361023,-0.5620869994163513,0.820981502532959,0,0.017189104110002518,-0.8259924650192261,-0.5634190440177917,0,0.06479612737894058,-0.07426661998033524,0.09830369055271149,1],[7,0.9630119800567627,-0.187628835439682,-0.19339950382709503,0,0.1972254365682602,0.0017586657777428627,0.9803565740585327,0,-0.18360303342342377,-0.9822384119033813,0.038698796182870865,0,0.09542939066886902,-0.06223020330071449,0.1279880851507187,1],[7,1,1.3877787807814457e-17,3.0322966360074588e-15,0,-1.3877787807814457e-17,1,4.163336342344337e-16,0,-3.0322966360074588e-15,-4.163336342344337e-16,1,0,-2.196220642261044e-16,-0.1217147558927536,0.003497618017718196,1],[7,0.02983151189982891,-0.906776487827301,0.4205549955368042,0,0.008684144355356693,-0.4204912483692169,-0.9072550535202026,0,0.9995172023773193,0.030716950073838234,-0.004669312387704849,0,0.0024450584314763546,0.11234961450099945,0.3021605312824249,1],[7,-0.01960095390677452,-0.9920260310173035,0.12449963390827179,0,-0.014231082983314991,-0.12423411756753922,-0.9921509027481079,0,0.9997066259384155,-0.02121886797249317,-0.011682497337460518,0,0.005512949079275131,-0.038463693112134933,0.3049218952655792,1],[7,1,7.232528992380364e-16,-1.8104349865715407e-16,0,-7.216449660063518e-16,0.9999619126319885,0.008729358203709126,0,1.8735013540549517e-16,-0.008729358203709126,0.9999619126319885,0,-6.407227866527955e-17,-0.2133685201406479,0.002434992929920554,1],[7,-0.0011877665529027581,-0.9964079260826111,0.08467505127191544,0,-0.01192312128841877,-0.08465498685836792,-0.996338963508606,0,0.9999282360076904,-0.00219300901517272,-0.011779741384088993,0,0.008284335024654865,-0.16134953498840332,0.29870155453681946,1],[7,-0.0011877665529027581,-0.9964079260826111,0.08467505127191544,0,-0.01192312128841877,-0.08465498685836792,-0.996338963508606,0,0.9999282360076904,-0.00219300901517272,-0.011779741384088993,0,0.008284335024654865,-0.25648829340934753,0.29870155453681946,1],[7,1,-2.3080864307203474e-16,-1.893721618692688e-16,0,2.3245294578089215e-16,0.9999619126319885,0.008729357272386551,0,1.8735013540549517e-16,-0.008729357272386551,0.9999619126319885,0,-2.582173322259834e-16,-0.16403043270111084,0.002434993162751198,1],[7,-0.990226149559021,0.1394709199666977,-9.553515867236293e-17,0,-0.1392160803079605,-0.9884167909622192,-0.06042455509305,0,-0.008427468128502369,-0.05983397364616394,0.9981727600097656,0,0.06323141604661942,0.08998578786849976,0.008650820702314377,1],[7,-0.994873046875,0.10076520591974258,-0.00860518030822277,0,-0.10094717890024185,-0.9945951700210571,0.02429228089749813,0,-0.00611085444688797,0.0250364039093256,0.9996678829193115,0,0.06454820185899734,-0.032000914216041565,0.011415132321417332,1],[7,0.9947962164878845,0.04303961992263794,-0.09234770387411118,0,0.10034076869487762,-0.5710666179656982,0.814748227596283,0,-0.01767023280262947,-0.8197746872901917,-0.5724135041236877,0,-0.06480146944522858,-0.07602900266647339,0.09701158106327057,1],[7,0.9651999473571777,0.1853295862674713,0.1845046877861023,0,-0.18808361887931824,0.0017631486989557743,0.982151448726654,0,0.18169640004634857,-0.9826748371124268,0.036559250205755234,0,-0.09439278393983841,-0.06197774037718773,0.12883903086185455,1],[7,-0.05298507586121559,0.906310498714447,-0.41927775740623474,0,-0.008803342469036579,-0.42027518153190613,-0.9073539972305298,0,-0.9985564947128296,-0.04438517242670059,0.030246872454881668,0,-0.002408306347206235,0.11186189949512482,0.30238020420074463,1],[7,0.02780011296272278,0.9916975498199463,-0.12555111944675446,0,-0.04613297060132027,-0.1241929903626442,-0.9911850690841675,0,-0.9985483884811401,0.033347103744745255,0.042297374457120895,0,0.002568983705714345,-0.0380898118019104,0.30513015389442444,1],[7,-0.005465107038617134,0.9964085221290588,-0.08449973911046982,0,-0.04194309934973717,-0.0846550464630127,-0.9955271482467651,0,-0.9991050362586975,-0.0018964814953505993,0.042255107313394547,0,0.007564953062683344,-0.16134858131408691,0.29872557520866394,1],[7,-0.005465107038617134,0.9964085221290588,-0.08449973911046982,0,-0.04194309934973717,-0.0846550464630127,-0.9955271482467651,0,-0.9991050362586975,-0.0018964814953505993,0.042255107313394547,0,0.007564953062683344,-0.25648728013038635,0.29872557520866394,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[86,".bin",40512,1043859194,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":33624,"length":6888,"count":1722,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":33624,"count":467,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]]},"minPosition",8,[1,-0.38959962129592896,-0.14521145820617676,-0.15893733501434326],"maxPosition",8,[1,0.38959962129592896,0.6617564558982849,0.14904339611530304]]]],0,0,[],[],[]],[[[87,"shop_idle",".bin",30,2,true,5.933333333333333,1199897304,[[1,51956,144,6,144],[1,52532,144,6,144],[1,53108,144,6,144],[1,53684,144,6,144],[1,54260,144,6,144],[1,54836,144,6,144],[1,55412,143,6,143],[1,55984,144,6,144],[1,56560,143,6,143],[1,57132,144,6,144],[1,57708,144,6,144],[1,58284,144,6,144],[1,58860,144,6,144],[1,59436,144,6,144],[1,60012,144,6,144],[1,60588,144,6,144],[1,61164,144,6,144],[1,61740,144,6,144],[1,62316,144,6,144],[1,62892,144,6,144]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[49,432,22,144]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[1,1728,576,38,144]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,4032,3,22,1]]],[{},"modifiers",12,[[-4,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[1,4044,576,38,144]]],[{},"modifiers",12,[[-5,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,6348,3,22,1]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,6360,3,22,1]]],[{},"modifiers",12,[[-7,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[1,6372,576,38,144]]],[{},"modifiers",12,[[-8,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,8676,3,22,1]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,8688,3,22,1]]],[{},"modifiers",12,[[-10,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[1,8700,576,38,144]]],[{},"modifiers",12,[[-11,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,11004,3,22,1]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,11016,3,22,1]]],[{},"modifiers",12,[[-13,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[1,11028,576,38,144]]],[{},"modifiers",12,[[-14,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,13332,3,22,1]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,13344,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[1,13356,576,38,144]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,15660,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,15672,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[1,15684,572,38,143]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,17972,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,17984,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[1,17996,576,38,144]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,20300,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,20312,3,22,1]]],[{},"modifiers",12,[[-25,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[1,20324,572,38,143]]],[{},"modifiers",12,[[-26,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,22612,3,22,1]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,22624,3,22,1]]],[{},"modifiers",12,[[-28,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[1,22636,576,38,144]]],[{},"modifiers",12,[[-29,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,24940,3,22,1]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,24952,3,22,1]]],[{},"modifiers",12,[[-31,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[1,24964,576,38,144]]],[{},"modifiers",12,[[-32,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,27268,3,22,1]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,27280,3,22,1]]],[{},"modifiers",12,[[-34,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[1,27292,576,38,144]]],[{},"modifiers",12,[[-35,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,29596,3,22,1]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,29608,3,22,1]]],[{},"modifiers",12,[[-37,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[1,29620,576,38,144]]],[{},"modifiers",12,[[-38,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,31924,3,22,1]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,31936,3,22,1]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[1,31948,432,22,144]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[1,33676,576,38,144]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,35980,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[1,35992,576,38,144]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,38296,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,38308,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[1,38320,576,38,144]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,40624,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,40636,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[1,40648,576,38,144]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,42952,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,42964,3,22,1]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[1,42976,432,22,144]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[1,44704,576,38,144]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,47008,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[1,47020,576,38,144]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,49324,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,49336,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[1,49348,576,38,144]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51652,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51664,3,22,1]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51676,3,22,1]]],[{},"modifiers",12,[[-62,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51688,3,22,1]]],[{},"modifiers",12,[[-63,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51700,4,38,1]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51716,3,22,1]]],[{},"modifiers",12,[[-65,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51728,3,22,1]]],[{},"modifiers",12,[[-66,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51740,4,38,1]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51756,3,22,1]]],[{},"modifiers",12,[[-68,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51768,3,22,1]]],[{},"modifiers",12,[[-69,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51780,4,38,1]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51796,3,22,1]]],[{},"modifiers",12,[[-71,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51808,3,22,1]]],[{},"modifiers",12,[[-72,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51820,4,38,1]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51836,3,22,1]]],[{},"modifiers",12,[[-74,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51848,3,22,1]]],[{},"modifiers",12,[[-75,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51860,4,38,1]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51876,3,22,1]]],[{},"modifiers",12,[[-77,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51888,3,22,1]]],[{},"modifiers",12,[[-78,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51900,4,38,1]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51916,3,22,1]]],[{},"modifiers",12,[[-80,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51928,3,22,1]]],[{},"modifiers",12,[[-81,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,51940,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[4,"001/mixamorig_Hips"],[4,"001/mixamorig_Hips/mixamorig_Spine"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm/mixamorig_LeftForeArm"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm/mixamorig_RightForeArm"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase"],[4,"001"],[4,"001/SPHERE001_1_1"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head/mixamorig_HeadTop_End"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm/mixamorig_LeftForeArm/mixamorig_LeftHand"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm/mixamorig_RightForeArm/mixamorig_RightHand"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase/mixamorig_LeftToe_End"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase/mixamorig_RightToe_End"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,81],[],[],[]],[[[88,"shop_look",".bin",30,true,6.333333333333334,4144320324,[[1,53692,154,6,154],[1,54308,154,6,154],[1,54924,154,6,154],[1,55540,154,6,154],[1,56156,154,6,154],[1,56772,154,6,154],[1,57388,154,6,154],[1,58004,154,6,154],[1,58620,154,6,154],[1,59236,154,6,154],[1,59852,154,6,154],[1,60468,154,6,154],[1,61084,154,6,154],[1,61700,154,6,154],[1,62316,154,6,154],[1,62932,116,6,116],[1,63396,154,6,154],[1,64012,154,6,154],[1,64628,154,6,154],[1,65244,76,6,76]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[49,462,22,154]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[1,1848,616,38,154]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,4312,3,22,1]]],[{},"modifiers",12,[[-4,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[1,4324,616,38,154]]],[{},"modifiers",12,[[-5,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,6788,3,22,1]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,6800,3,22,1]]],[{},"modifiers",12,[[-7,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[1,6812,616,38,154]]],[{},"modifiers",12,[[-8,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,9276,3,22,1]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,9288,3,22,1]]],[{},"modifiers",12,[[-10,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[1,9300,616,38,154]]],[{},"modifiers",12,[[-11,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,11764,3,22,1]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,11776,3,22,1]]],[{},"modifiers",12,[[-13,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[1,11788,616,38,154]]],[{},"modifiers",12,[[-14,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,14252,3,22,1]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,14264,3,22,1]]],[{},"modifiers",12,[[-16,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[1,14276,616,38,154]]],[{},"modifiers",12,[[-17,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,16740,3,22,1]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,16752,3,22,1]]],[{},"modifiers",12,[[-19,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[1,16764,616,38,154]]],[{},"modifiers",12,[[-20,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,19228,3,22,1]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,19240,3,22,1]]],[{},"modifiers",12,[[-22,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[1,19252,616,38,154]]],[{},"modifiers",12,[[-23,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,21716,3,22,1]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,21728,3,22,1]]],[{},"modifiers",12,[[-25,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[1,21740,616,38,154]]],[{},"modifiers",12,[[-26,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,24204,3,22,1]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,24216,3,22,1]]],[{},"modifiers",12,[[-28,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[1,24228,616,38,154]]],[{},"modifiers",12,[[-29,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,26692,3,22,1]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,26704,3,22,1]]],[{},"modifiers",12,[[-31,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[1,26716,616,38,154]]],[{},"modifiers",12,[[-32,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,29180,3,22,1]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,29192,3,22,1]]],[{},"modifiers",12,[[-34,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[1,29204,616,38,154]]],[{},"modifiers",12,[[-35,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,31668,3,22,1]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,31680,3,22,1]]],[{},"modifiers",12,[[-37,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[1,31692,616,38,154]]],[{},"modifiers",12,[[-38,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,34156,3,22,1]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,34168,3,22,1]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[1,34180,462,22,154]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[1,36028,616,38,154]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,38492,3,22,1]]],[{},"modifiers",12,[[-43,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[1,38504,616,38,154]]],[{},"modifiers",12,[[-44,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,40968,3,22,1]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,40980,3,22,1]]],[{},"modifiers",12,[[-46,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[1,40992,464,38,116]]],[{},"modifiers",12,[[-47,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,42848,3,22,1]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,42860,3,22,1]]],[{},"modifiers",12,[[-49,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[1,42872,616,38,154]]],[{},"modifiers",12,[[-50,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,45336,3,22,1]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,45348,3,22,1]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[1,45360,462,22,154]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[1,47208,616,38,154]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,49672,3,22,1]]],[{},"modifiers",12,[[-55,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[1,49684,616,38,154]]],[{},"modifiers",12,[[-56,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,52148,3,22,1]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,52160,3,22,1]]],[{},"modifiers",12,[[-58,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[1,52172,304,38,76]]],[{},"modifiers",12,[[-59,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53388,3,22,1]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53400,3,22,1]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53412,3,22,1]]],[{},"modifiers",12,[[-62,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53424,3,22,1]]],[{},"modifiers",12,[[-63,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53436,4,38,1]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53452,3,22,1]]],[{},"modifiers",12,[[-65,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53464,3,22,1]]],[{},"modifiers",12,[[-66,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53476,4,38,1]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53492,3,22,1]]],[{},"modifiers",12,[[-68,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53504,3,22,1]]],[{},"modifiers",12,[[-69,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53516,4,38,1]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53532,3,22,1]]],[{},"modifiers",12,[[-71,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53544,3,22,1]]],[{},"modifiers",12,[[-72,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53556,4,38,1]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53572,3,22,1]]],[{},"modifiers",12,[[-74,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53584,3,22,1]]],[{},"modifiers",12,[[-75,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53596,4,38,1]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53612,3,22,1]]],[{},"modifiers",12,[[-77,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53624,3,22,1]]],[{},"modifiers",12,[[-78,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53636,4,38,1]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53652,3,22,1]]],[{},"modifiers",12,[[-80,"scale"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53664,3,22,1]]],[{},"modifiers",12,[[-81,"rotation"],1,0],"data",11,[{"keys":-1,"interpolate":false},"values",4,[1,53676,4,38,1]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[4,"001/mixamorig_Hips"],[4,"001/mixamorig_Hips/mixamorig_Spine"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm/mixamorig_LeftForeArm"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm/mixamorig_RightForeArm"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase"],[4,"001"],[4,"001/SPHERE001_1_1"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head/mixamorig_HeadTop_End"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_LeftShoulder/mixamorig_LeftArm/mixamorig_LeftForeArm/mixamorig_LeftHand"],[4,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_RightShoulder/mixamorig_RightArm/mixamorig_RightForeArm/mixamorig_RightHand"],[4,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase/mixamorig_LeftToe_End"],[4,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase/mixamorig_RightToe_End"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,81],[],[],[]]]]
