[1,["daurQM2gVF16x9sXJ8rnmo@01260","31gP4wzuZAvJTAC+5+lNkg","cdXO1nD5dIZqI/xT2+0IfW","94CZJDWEpNhYQWt0IZtvuG","2fKm3xNalDTLVXBu28O0BX","1acLYgnWNGrJCQFRc+CVHO@f9941","f0e8Fa8D9K8axeonTLUZ46","2bUMgHyWVHxIzHzZxpL7Lp@f9941","c7eo0vC6xKLr/ta2/k0lzK","6592M4T31BK7xH2DYzVSsw","865jS8I6NPPpkbPbIXfqfP","23XxbFxv5Fu4Q3FPEl+TGf","58fzymgmJC2qWW49wxWe/p@7e445","28p44BAjdDKpyjN/k3ySxQ@f9941","12Y9dMgWdJKJGmTiZyQR9H@fc873","cbDb2zJ3JE7LQMi+khvkR8","5brFgGhWJN4KWnZY3vRUm0","d5hRO0FsVJsL+ZyyE+eVmE","d3jn9d1phHiaoIg1khFfeA","35SJSkTANDXasIlRvvXEng@dfb18","f2+i3n/QFGUJ4SlhUn9RQh@f9941","12Y9dMgWdJKJGmTiZyQR9H@a804a","35SJSkTANDXasIlRvvXEng@18754","cf9qHjPGROu5zrB6C55NnS","77MmeveE5D4pcvG7eQRzmd","16I3V3Cw1F4LhknUOLaqSv@f9941","35SJSkTANDXasIlRvvXEng@6d6c8","62XB7MOHpJ2a1FEvYsqpL6","12Y9dMgWdJKJGmTiZyQR9H@2e76e","aaM7vkokNJIpkk8udgbOYG","6cHiBgHWZDZrZCHkEx97vU@68bf8","35SJSkTANDXasIlRvvXEng@f43bf","45J3AzVTxF7qOTU7IAwIa7@6c48a","22PwWhPO5LNYbJMzAs5u6m"],["node","_mesh","_customMaterial","_spriteFrame","_font","countCtrl","circleNode","servantPrefab","_parent","label","label1","label0","bg1","bg0","root","cannonPos","data","mainTexture","_effectAsset"],[["cc.Node",["_name","_layer","_objFlags","_prefab","_components","_parent","_lpos","_lscale","_children","_lrot","_euler"],0,4,9,1,5,5,2,5,5],["cc.Node",["_name","_layer","_objFlags","_parent","_components","_prefab","_lpos","_lscale","_lrot","_euler","_children"],0,1,12,4,5,5,5,5,2],["cc.MeshRenderer",["_shadowReceivingMode","_shadowCastingMode","_name","node","__prefab","_materials","lightmapSettings","_mesh"],0,1,4,3,4,6],["cc.BoxCollider",["_isTrigger","node","__prefab","_center","_size"],2,1,4,5,5],["ce76bKLqoJGDqRZLJHatSgt",["_color","_num","range","node","__prefab","colliderNodes","materials","circleNode","countCtrl","servantPrefab"],0,1,4,2,3,1,1,6],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.Node",["_name","_layer","_parent","_children","_components","_prefab","_lpos","_lscale"],1,1,12,9,4,5,5],["c42a7+ygfpCcZkS9/Cf7Qog",["node","__prefab","cannonPos"],3,1,4,1],["cc.CompPrefabInfo",["fileId"],2],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.RenderRoot2D",["node","__prefab"],3,1,4],["cc.RigidBody",["_group","_type","node","__prefab"],1,1,4],["18e70+alNRDY7t7+GMN/I+t",["num","_mathOperation","node","__prefab","colliderNodes","bg0","bg1","frames","label0","label1"],1,1,4,2,1,1,3,1,1],["cc.ModelLightmapSettings",[],3],["13e1bxFoSZIuo5QntAmPkyu",["node","__prefab","colliderNodes"],3,1,4,2],["cc.SphereCollider",["_isTrigger","_radius","node","__prefab"],1,1,4],["e095bdtIZJPE7/tcN6zB1ng",["node","__prefab","colliderNodes"],3,1,4,2],["0a8b02gy0tNC5qlKxn50ldB",["node","__prefab","colliderNodes"],3,1,4,2],["45cefl/DGlFlZ11iAOZXth/",["time","node","__prefab","colliderNodes"],2,1,4,2],["cc.CylinderCollider",["_isTrigger","_radius","_height","node","__prefab","_center"],0,1,4,5],["68accrjtDdOn5eZhLz/lV23",["delay","node","__prefab","colliderNodes","body"],2,1,4,2,1],["edafcvfa0xMpJSm5mai9wUN",["withAction","node","__prefab","label"],2,1,4,1],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_isSystemFontUsed","_cacheMode","node","__prefab"],-3,1,4],["29ddd8ZHrlNoo+o790uWmbt",["endAugler","time","node","__prefab","colliderNodes","body"],1,1,4,2,1],["1fe99Sfzt1FjqREv+oL5evV",["_endAugler","time","node","__prefab","colliderNodes","body"],1,1,4,2,1],["cc.Sprite",["_type","_sizeMode","node","__prefab"],1,1,4],["dab79w9GbVNOK63FZMIi2et",["countNum","node","__prefab","countLabel","countLabelTick","frames","sprite"],2,1,4,1,1,3,1],["cc.Material",["_techIdx","_states","_defines","_props"],0,12]],[[9,0,2],[10,0,1,2,2],[15,1],[2,0,3,4,5,6,7,2],[13,0,1,2,3,3],[0,0,1,5,4,3,6,7,3],[0,0,1,5,4,3,6,9,7,10,3],[2,3,4,5,6,7,1],[11,0,1,2,1],[3,1,2,3,1],[0,0,1,5,8,4,3,6,9,7,10,3],[2,2,1,0,3,4,5,6,7,4],[0,0,1,5,8,4,3,6,9,10,3],[3,0,1,2,4,2],[23,0,1,2,3,2],[24,0,1,2,3,4,5,6,7,7],[27,0,1,2,3,3],[12,0,1,1],[2,1,0,3,4,5,6,7,3],[2,2,3,4,5,6,7,2],[19,0,1,2,1],[0,0,2,1,5,4,3,9,7,10,4],[1,0,2,1,3,10,4,5,6,8,7,9,4],[1,0,1,3,4,5,6,7,3],[1,0,1,3,4,5,7,3],[17,0,1,2,3,3],[28,0,1,2,3,4,5,6,2],[3,0,1,2,3,4,2],[4,0,2,1,3,4,5,6,7,8,9,4],[0,0,2,1,5,4,3,6,4],[0,0,1,5,8,4,3,6,7,3],[0,0,2,1,4,3,6,7,4],[0,0,2,1,5,4,3,6,7,4],[4,0,1,3,4,5,6,7,8,9,3],[22,0,1,2,3,4,2],[0,0,2,1,4,3,7,4],[1,0,2,1,3,4,5,6,7,4],[1,0,2,1,3,4,5,6,8,7,9,4],[1,0,2,1,3,4,5,6,4],[1,0,2,1,3,4,5,6,8,9,4],[3,0,1,2,2],[14,0,1,2,3,4,5,6,7,8,9,3],[20,0,1,2,3,2],[21,0,1,2,3,4,5,4],[25,0,1,2,3,4,5,3],[5,0,1,2,4],[6,0,2],[0,0,2,1,8,4,3,4],[0,0,5,8,3,2],[0,0,1,5,3,3],[0,0,1,5,8,4,3,6,3],[0,0,2,1,4,3,9,10,4],[0,0,1,5,4,3,6,3],[7,0,1,2,3,4,5,6,7,3],[8,0,1,2,1],[16,0,1,2,1],[18,0,1,2,1],[26,0,1,2,3,4,5,3],[29,0,1,2,3,4]],[[[[45,"../matAndEffect/map/floorSky",[{"hash":113180893,"name":"../matAndEffect/map/floorSky|toon-vs:vert|toon-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n};\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec3 v_normal;\n#if USE_TEXTURE\n  layout(location = 3) out vec2 v_uv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n};\n#if CC_RECEIVE_SHADOW\n  layout(location = 0) in highp vec4 v_shadowPos;\n  layout(set = 0, binding = 2) uniform CCShadow {\n    highp mat4 cc_matLightPlaneProj;\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    lowp  vec4 cc_shadowNFLSInfo;\n    lowp  vec4 cc_shadowWHPBInfo;\n    lowp  vec4 cc_shadowLPNNInfo;\n    lowp  vec4 cc_shadowColor;\n  };\n  #if CC_RECEIVE_SHADOW\n    layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n    layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n    float CCGetShadowFactorHard (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      } else {\n        closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z - cc_shadowWHPBInfo.w;\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        block0 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block1 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block2 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      } else {\n        block0 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n        block1 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x, offsetDepth);\n        block2 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x, offsetDepth);\n        block3 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x, offsetDepth);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float bias = cc_shadowWHPBInfo.w;\n      float offsetDepth = clipPos.z - bias;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        block0 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block1 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block2 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block4 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block5 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block6 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block7 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block8 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      } else {\n        block0 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x, offsetDepth);\n        block1 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x, offsetDepth);\n        block2 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x, offsetDepth);\n        block3 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x, offsetDepth);\n        block4 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n        block5 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x, offsetDepth);\n        block6 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x, offsetDepth);\n        block7 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x, offsetDepth);\n        block8 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x, offsetDepth);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  #endif\n#endif\nlayout(location = 1) in vec3 v_position;\n#if USE_TEXTURE\n  layout(location = 3) in vec2 v_uv;\n  layout(set = 1, binding = 1) uniform sampler2D mainTexture;\n#endif\nlayout(location = 2) in vec3 v_normal;\nvec4 frag () {\n  vec3 V = normalize(cc_cameraPos.xyz - v_position);\n  vec3 N = normalize(v_normal);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = 0.5 * dot(N, L) + 0.5;\n  vec4 finalColor;\n  #if USE_TEXTURE\n    finalColor = texture(mainTexture, vec2( v_uv.x, v_uv.y - cc_time.x * 0.5) );\n  #endif\n  #if CC_RECEIVE_SHADOW\n        {\n          float pcf = cc_shadowWHPBInfo.z + 0.001;\n          float shadowAttenuation = 0.0;\n          float cosAngle = clamp(1.0 - dot(N, cc_mainLitDir.xyz), 0.0, 1.0);\n          vec3 projWorldPos = v_shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n          vec4 pos = vec4(projWorldPos.xyz, v_shadowPos.w);\n          if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorSoft2X(pos);\n          else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorSoft(pos);\n          else shadowAttenuation = CCGetShadowFactorHard(pos);\n          vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n          if (cc_shadowNFLSInfo.w > 0.000001) {\n            finalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n          } else {\n            finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n          }\n        }\n  #endif\n  return finalColor;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n};\nout vec3 v_position;\nout vec3 v_normal;\n#if USE_TEXTURE\n  out vec2 v_uv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n};\n#if CC_RECEIVE_SHADOW\n  in highp vec4 v_shadowPos;\n  layout(std140) uniform CCShadow {\n    highp mat4 cc_matLightPlaneProj;\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    lowp  vec4 cc_shadowNFLSInfo;\n    lowp  vec4 cc_shadowWHPBInfo;\n    lowp  vec4 cc_shadowLPNNInfo;\n    lowp  vec4 cc_shadowColor;\n  };\n  #if CC_RECEIVE_SHADOW\n    uniform sampler2D cc_shadowMap;\n    uniform sampler2D cc_spotLightingMap;\n    float CCGetShadowFactorHard (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      } else {\n        closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z - cc_shadowWHPBInfo.w;\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        block0 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block1 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block2 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      } else {\n        block0 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n        block1 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x, offsetDepth);\n        block2 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x, offsetDepth);\n        block3 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x, offsetDepth);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float bias = cc_shadowWHPBInfo.w;\n      float offsetDepth = clipPos.z - bias;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        block0 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block1 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block2 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block4 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block5 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block6 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block7 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block8 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      } else {\n        block0 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x, offsetDepth);\n        block1 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x, offsetDepth);\n        block2 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x, offsetDepth);\n        block3 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x, offsetDepth);\n        block4 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n        block5 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x, offsetDepth);\n        block6 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x, offsetDepth);\n        block7 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x, offsetDepth);\n        block8 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x, offsetDepth);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  #endif\n#endif\nin vec3 v_position;\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nin vec3 v_normal;\nvec4 frag () {\n  vec3 V = normalize(cc_cameraPos.xyz - v_position);\n  vec3 N = normalize(v_normal);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = 0.5 * dot(N, L) + 0.5;\n  vec4 finalColor;\n  #if USE_TEXTURE\n    finalColor = texture(mainTexture, vec2( v_uv.x, v_uv.y - cc_time.x * 0.5) );\n  #endif\n  #if CC_RECEIVE_SHADOW\n        {\n          float pcf = cc_shadowWHPBInfo.z + 0.001;\n          float shadowAttenuation = 0.0;\n          float cosAngle = clamp(1.0 - dot(N, cc_mainLitDir.xyz), 0.0, 1.0);\n          vec3 projWorldPos = v_shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n          vec4 pos = vec4(projWorldPos.xyz, v_shadowPos.w);\n          if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorSoft2X(pos);\n          else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorSoft(pos);\n          else shadowAttenuation = CCGetShadowFactorHard(pos);\n          vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n          if (cc_shadowNFLSInfo.w > 0.000001) {\n            finalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n          } else {\n            finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n          }\n        }\n  #endif\n  return finalColor;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\n#if USE_TEXTURE\n  varying vec2 v_uv;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  #if USE_TEXTURE\n    v_uv = a_texCoord;\n  #endif\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n#if CC_RECEIVE_SHADOW\n  varying highp vec4 v_shadowPos;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowWHPBInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\n  uniform lowp vec4 cc_shadowColor;\n  #if CC_RECEIVE_SHADOW\n    uniform sampler2D cc_shadowMap;\n    uniform sampler2D cc_spotLightingMap;\n    float CCGetShadowFactorHard (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      } else {\n        closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z - cc_shadowWHPBInfo.w;\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        block0 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block1 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block2 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block3 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      } else {\n        block0 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n        block1 = step(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x, offsetDepth);\n        block2 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x, offsetDepth);\n        block3 = step(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x, offsetDepth);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n      vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float bias = cc_shadowWHPBInfo.w;\n      float offsetDepth = clipPos.z - bias;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > 0.000001) {\n        block0 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block1 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block2 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block3 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block4 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block5 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block6 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block7 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n        block8 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      } else {\n        block0 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x, offsetDepth);\n        block1 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x, offsetDepth);\n        block2 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x, offsetDepth);\n        block3 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x, offsetDepth);\n        block4 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n        block5 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x, offsetDepth);\n        block6 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x, offsetDepth);\n        block7 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x, offsetDepth);\n        block8 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x, offsetDepth);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  #endif\n#endif\nvarying vec3 v_position;\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nvarying vec3 v_normal;\nvec4 frag () {\n  vec3 V = normalize(cc_cameraPos.xyz - v_position);\n  vec3 N = normalize(v_normal);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = 0.5 * dot(N, L) + 0.5;\n  vec4 finalColor;\n  #if USE_TEXTURE\n    finalColor = texture2D(mainTexture, vec2( v_uv.x, v_uv.y - cc_time.x * 0.5) );\n  #endif\n  #if CC_RECEIVE_SHADOW\n        {\n          float pcf = cc_shadowWHPBInfo.z + 0.001;\n          float shadowAttenuation = 0.0;\n          float cosAngle = clamp(1.0 - dot(N, cc_mainLitDir.xyz), 0.0, 1.0);\n          vec3 projWorldPos = v_shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n          vec4 pos = vec4(projWorldPos.xyz, v_shadowPos.w);\n          if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorSoft2X(pos);\n          else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorSoft(pos);\n          else shadowAttenuation = CCGetShadowFactorHard(pos);\n          vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\n          if (cc_shadowNFLSInfo.w > 0.000001) {\n            finalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n          } else {\n            finalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n          }\n        }\n  #endif\n  return finalColor;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":211,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":54}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_TEXTURE"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":3,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"../matAndEffect/map/floorSky|toon-vs:vert|toon-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[46,"map46"],[47,"map46",512,2,[-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95],[[54,-3,[0,"51ML4GUyhMZKOgDhAo6sqt"],-2]],[1,"74Yf6gElxC6acuuAucMIKj",-1,0]],[48,"Node",1,[-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110],[1,"a1mG5BZLxP9YCqmrQM4v4a",1,0]],[12,"obstacleMath-005",2,1,[-121,-122,-123,-124,-125,-126],[[8,-111,[0,"bdyHTioStAdp5b99Wsngvl"],[5,1,1]],[17,-112,[0,"ca6O1MalFLloFj2LWtW9RC"]],[4,8,2,-113,[0,"73a+ESVFhL9q5KH3jUDvNz"]],[27,true,-114,[0,"b6q9VuTZVOu7EBMYR2xn6h"],[1,0,0.75,0],[1,3.2,1.5,0.2]],[41,2,2,-120,[0,"f2iF5o/YNPr4ti6H0uPab1"],[-119],-118,-117,[480,481],-116,-115]],[1,"476rDmkJNCwrQrTjhOCXwS",1,0],[1,1.652,9.158,-283.015],[3,-0.15643446504023092,0,0,0.9876883405951378],[1,-18.000000000000007,0,0]],[12,"obstacleMath-006",2,1,[-137,-138,-139,-140,-141,-142],[[8,-127,[0,"bdyHTioStAdp5b99Wsngvl"],[5,1,1]],[17,-128,[0,"ca6O1MalFLloFj2LWtW9RC"]],[4,8,2,-129,[0,"73a+ESVFhL9q5KH3jUDvNz"]],[27,true,-130,[0,"b6q9VuTZVOu7EBMYR2xn6h"],[1,0,0.75,0],[1,3.2,1.5,0.2]],[41,30,0,-136,[0,"f2iF5o/YNPr4ti6H0uPab1"],[-135],-134,-133,[486,487],-132,-131]],[1,"a4KC70o6NM+YOVpngWYpBN",1,0],[1,-1.612,9.158,-283.015],[3,-0.15643446504023092,0,0,0.9876883405951378],[1,-18.000000000000007,0,0]],[53,"end",2,1,[[-146,-147,-148,[49,"cannon0",2,-149,[1,"d062jkKDRKPbt62gHCilce",1,0]]],1,1,1,4],[[7,-143,[0,"dbonk7GdRWgonGEGEUZVgt"],[62],[2],63],[4,4,2,-144,[0,"11hvCCJEhBcKP/cs8+wLRc"]],[9,-145,[0,"71m5/87nRGja7Uf1t0WfQs"],[1,0,-0.5,0]]],[1,"3ajNKJ6ZdK4oMfz7H3+CtD",1,0],[1,0,1,-327.573],[1,8,1,2]],[30,"start",2,1,[-153,-154,-155],[[7,-150,[0,"dbonk7GdRWgonGEGEUZVgt"],[6],[2],7],[4,4,2,-151,[0,"69F4HijLJMz6MkqfnKtoxc"]],[9,-152,[0,"b6PvgSNAZBDK/s7VFsNbaw"],[1,0,-0.5,0]]],[1,"d5NEIG1WxFEp64xOMyS8n/",1,0],[1,0,1,4],[1,8,1,10]],[30,"floor0",2,1,[-159,-160,-161],[[7,-156,[0,"dbonk7GdRWgonGEGEUZVgt"],[14],[2],15],[4,4,2,-157,[0,"016EOvL7lF55skb8Se36ns"]],[9,-158,[0,"94hFB6MoVGcIuKkvuMT+fW"],[1,0,-0.5,0]]],[1,"d7+F9AqH9FGbrDM41C/1iA",1,0],[1,0,1,-4.825],[1,8,1,9]],[30,"floor1",2,1,[-165,-166,-167],[[7,-162,[0,"dbonk7GdRWgonGEGEUZVgt"],[22],[2],23],[4,4,2,-163,[0,"4dhn8LLLtBII1QagPSrIsZ"]],[9,-164,[0,"ffGzbI//lJvJ5viDWAG5yZ"],[1,0,-0.5,0]]],[1,"43N/NvCTlLZ6FylLV+n723",1,0],[1,0,1,-13.765],[1,8,1,9]],[30,"floor2",2,1,[-171,-172,-173],[[7,-168,[0,"dbonk7GdRWgonGEGEUZVgt"],[30],[2],31],[4,4,2,-169,[0,"49GXxHur9OIrJZc98RmNAB"]],[9,-170,[0,"136WS8JbdMG6+zOfxgdgIB"],[1,0,-0.5,0]]],[1,"b8170hSldPKbpVYEqw5I+p",1,0],[1,0,1,-22.477],[1,8,1,9]],[10,"floor3",2,1,[-177,-178,-179],[[7,-174,[0,"dbonk7GdRWgonGEGEUZVgt"],[38],[2],39],[4,4,2,-175,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-176,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"88eY8DEPJHzbzeK8UKBqVm",1,0],[1,0,2.077,-30.237],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,1,9],[1,18,0,0]],[30,"floor32",2,1,[-183,-184,-185],[[7,-180,[0,"dbonk7GdRWgonGEGEUZVgt"],[46],[2],47],[4,4,2,-181,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-182,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"1bAvFYO5lBkJmr3dV8/vb4",1,0],[1,0,1,-313.107],[1,8,1,10]],[30,"floor33",2,1,[-189,-190,-191],[[7,-186,[0,"dbonk7GdRWgonGEGEUZVgt"],[54],[2],55],[4,4,2,-187,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-188,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"7cPskzidVPgIlVDpyijRqC",1,0],[1,0,1,-322.25],[1,8,1,9]],[30,"cannnonPos",2,1,[-196],[[27,true,-192,[0,"54RNQVdOBMUr66T3GYnQH0"],[1,0,0,3],[1,20,8,6]],[4,16,2,-193,[0,"8b3dEu5etPla6WcNCKrWwZ"]],[55,-195,[0,"5fXhbTgSBBF4p7ju1AgzkU"],[-194]]],[1,"b8lNuQXOJCi5mjj9qAXqc0",1,0],[1,0,1,-327.573],[1,0.64,0.64,0.64]],[12,"obstacleServantCreater",2,1,[-203,-204],[[25,true,1.25,-197,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-198,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,8,-202,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-201],[74,75,76],-200,-199,73]],[1,"d3t85byPRBJb+N1obyED0Q",1,0],[1,-1.639,3.641,-34.965],[3,0.15643446504023087,0,0,0.9876883405951378],[1,18,0,0]],[10,"floor34",2,1,[-208,-209,-210],[[7,-205,[0,"dbonk7GdRWgonGEGEUZVgt"],[83],[2],84],[4,4,2,-206,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-207,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"78tVu8oP9Nlr9hvY1DRzrt",1,0],[1,0,4.695,-38.293],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,1,9],[1,18,0,0]],[10,"floor35",2,1,[-214,-215,-216],[[7,-211,[0,"dbonk7GdRWgonGEGEUZVgt"],[91],[2],92],[4,4,2,-212,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-213,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"00hKpaxjtJ2pZVcyB0j+jY",1,0],[1,0,7.011,-45.422],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999999,9],[1,18,0,0]],[10,"floor36",2,1,[-220,-221,-222],[[7,-217,[0,"dbonk7GdRWgonGEGEUZVgt"],[99],[2],100],[4,4,2,-218,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-219,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"d82Y6GqgpG/5g7ObdQkYPp",1,0],[1,0,11.85,-60.316],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999999,9],[1,18,0,0]],[10,"floor37",2,1,[-226,-227,-228],[[7,-223,[0,"dbonk7GdRWgonGEGEUZVgt"],[107],[2],108],[4,4,2,-224,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-225,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"25f0ud89tBm60fnT2uOCL/",1,0],[1,0,9.534,-53.187],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,1,9],[1,18,0,0]],[10,"floor38",2,1,[-232,-233,-234],[[7,-229,[0,"dbonk7GdRWgonGEGEUZVgt"],[115],[2],116],[4,4,2,-230,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-231,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"1b+9dR+zdHBKDQnAMWULex",1,0],[1,0,16.545,-74.763],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,1,9],[1,18,0,0]],[10,"floor39",2,1,[-238,-239,-240],[[7,-235,[0,"dbonk7GdRWgonGEGEUZVgt"],[123],[2],124],[4,4,2,-236,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-237,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"bciDc1v/lOtaI170jp6VI8",1,0],[1,0,18.861,-81.892],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999999,9],[1,18,0,0]],[10,"floor40",2,1,[-244,-245,-246],[[7,-241,[0,"dbonk7GdRWgonGEGEUZVgt"],[131],[2],132],[4,4,2,-242,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-243,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"67ArbGUZ5EtItZFiY5n7DX",1,0],[1,0,14.022,-66.998],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999999,9],[1,18,0,0]],[10,"floor41",2,1,[-250,-251,-252],[[7,-247,[0,"dbonk7GdRWgonGEGEUZVgt"],[139],[2],140],[4,4,2,-248,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-249,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"94hl/zihVAhrBOnVxmlJSl",1,0],[1,0,21.484,-89.966],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999998,9],[1,18,0,0]],[10,"floor42",2,1,[-256,-257,-258],[[7,-253,[0,"dbonk7GdRWgonGEGEUZVgt"],[147],[2],148],[4,4,2,-254,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-255,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"846qbOykVJLYtNNxSNf4Jl",1,0],[1,0,24.007,-97.731],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999999,9],[1,18,0,0]],[10,"floor43",2,1,[-262,-263,-264],[[7,-259,[0,"dbonk7GdRWgonGEGEUZVgt"],[155],[2],156],[4,4,2,-260,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-261,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"eensUOpAhGW4soUgiwvjaH",1,0],[1,0,26.323,-104.86],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999998,9],[1,18,0,0]],[10,"floor44",2,1,[-268,-269,-270],[[7,-265,[0,"dbonk7GdRWgonGEGEUZVgt"],[163],[2],164],[4,4,2,-266,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-267,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"8cRl0tXY9DG46l9IUGwU6A",1,0],[1,0,28.616,-111.915],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999999,9],[1,18,0,0]],[10,"floor45",2,1,[-274,-275,-276],[[7,-271,[0,"dbonk7GdRWgonGEGEUZVgt"],[171],[2],172],[4,4,2,-272,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-273,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"1576JDErNBzo2YLT3BcgPn",1,0],[1,0,30.99,-119.221],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999998,9],[1,18,0,0]],[10,"floor46",2,1,[-280,-281,-282],[[7,-277,[0,"dbonk7GdRWgonGEGEUZVgt"],[179],[2],180],[4,4,2,-278,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-279,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"ebGpeItmRDZ4sQzvwutqx2",1,0],[1,0,33.381,-126.578],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999997,9],[1,18,0,0]],[10,"floor47",2,1,[-286,-287,-288],[[7,-283,[0,"dbonk7GdRWgonGEGEUZVgt"],[187],[2],188],[4,4,2,-284,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-285,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"3972WgB9pP0ZMbbCPb9/Rg",1,0],[1,0,35.937,-134.444],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999996,9],[1,18,0,0]],[10,"floor48",2,1,[-292,-293,-294],[[7,-289,[0,"dbonk7GdRWgonGEGEUZVgt"],[195],[2],196],[4,4,2,-290,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-291,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"dc3925kApM8IkHw1//rC15",1,0],[1,0,35.937,-134.444],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999996,9],[1,18,0,0]],[10,"floor49",2,1,[-298,-299,-300],[[7,-295,[0,"dbonk7GdRWgonGEGEUZVgt"],[203],[2],204],[4,4,2,-296,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-297,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"5eGn3gPBlAQIE6Gp0LK1Dt",1,0],[1,0,26.323,-104.86],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999997,9],[1,18,0,0]],[10,"floor50",2,1,[-304,-305,-306],[[7,-301,[0,"dbonk7GdRWgonGEGEUZVgt"],[211],[2],212],[4,4,2,-302,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-303,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"04jIXC9SpPGbDfBAvsm1Ih",1,0],[1,0,30.99,-119.221],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999997,9],[1,18,0,0]],[10,"floor51",2,1,[-310,-311,-312],[[7,-307,[0,"dbonk7GdRWgonGEGEUZVgt"],[219],[2],220],[4,4,2,-308,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-309,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"9fik8CNCZN7YT7zZV5mJQL",1,0],[1,0,28.616,-111.915],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999998,9],[1,18,0,0]],[10,"floor52",2,1,[-316,-317,-318],[[7,-313,[0,"dbonk7GdRWgonGEGEUZVgt"],[227],[2],228],[4,4,2,-314,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-315,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"92ANIbQOFF8ag58yKAcf1s",1,0],[1,0,33.381,-126.578],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999996,9],[1,18,0,0]],[10,"floor53",2,1,[-322,-323,-324],[[7,-319,[0,"dbonk7GdRWgonGEGEUZVgt"],[235],[2],236],[4,4,2,-320,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-321,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"07zEOLpWlOZqUDoIKKplMi",1,0],[1,0,45.325,-163.34],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999996,9],[1,18,0,0]],[10,"floor54",2,1,[-328,-329,-330],[[7,-325,[0,"dbonk7GdRWgonGEGEUZVgt"],[243],[2],244],[4,4,2,-326,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-327,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"2f75JC+QxC3YD5I6FLdgNr",1,0],[1,0,42.934,-155.983],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999997,9],[1,18,0,0]],[10,"floor55",2,1,[-334,-335,-336],[[7,-331,[0,"dbonk7GdRWgonGEGEUZVgt"],[251],[2],252],[4,4,2,-332,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-333,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"edBCu2WjxLT7vL136ye3wV",1,0],[1,0,40.56,-148.677],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999998,9],[1,18,0,0]],[10,"floor56",2,1,[-340,-341,-342],[[7,-337,[0,"dbonk7GdRWgonGEGEUZVgt"],[259],[2],260],[4,4,2,-338,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-339,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"b0w2mOYuZFt43pLPTIVoGW",1,0],[1,0,38.267,-141.622],[3,0.15643446504023087,0,0,0.9876883405951378],[1,8,0.9999999999999997,9],[1,18,0,0]],[10,"floor57",2,1,[-346,-347,-348],[[7,-343,[0,"dbonk7GdRWgonGEGEUZVgt"],[267],[2],268],[4,4,2,-344,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-345,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"dasND0BRpI064FbvvTc+5i",1,0],[1,0,45.325,-171.768],[3,0.15643446504023115,0,0,-0.9876883405951377],[1,8,0.9999999999999996,9],[1,-1818,0,0]],[10,"floor58",2,1,[-352,-353,-354],[[7,-349,[0,"dbonk7GdRWgonGEGEUZVgt"],[275],[2],276],[4,4,2,-350,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-351,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"93dyViq65Eu4/kUbZyUjMR",1,0],[1,0,42.543,-180.331],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor59",2,1,[-358,-359,-360],[[7,-355,[0,"dbonk7GdRWgonGEGEUZVgt"],[283],[2],284],[4,4,2,-356,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-357,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"a5GTKqMPZDsJ+Brjp+ClwT",1,0],[1,0,37.037,-197.278],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor60",2,1,[-364,-365,-366],[[7,-361,[0,"dbonk7GdRWgonGEGEUZVgt"],[291],[2],292],[4,4,2,-362,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-363,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"e7xquuJtJGZajHmmSDy62n",1,0],[1,0,39.819,-188.715],[3,0.15643446504023115,0,0,-0.9876883405951377],[1,8,0.9999999999999996,9],[1,-1818,0,0]],[10,"floor61",2,1,[-370,-371,-372],[[7,-367,[0,"dbonk7GdRWgonGEGEUZVgt"],[299],[2],300],[4,4,2,-368,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-369,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"5aRMFVThdAT50WpasPuMUR",1,0],[1,0,26.088,-230.972],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor62",2,1,[-376,-377,-378],[[7,-373,[0,"dbonk7GdRWgonGEGEUZVgt"],[307],[2],308],[4,4,2,-374,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-375,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"ffwflbGsRAJZm1dK167YfK",1,0],[1,0,31.594,-214.025],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor63",2,1,[-382,-383,-384],[[7,-379,[0,"dbonk7GdRWgonGEGEUZVgt"],[315],[2],316],[4,4,2,-380,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-381,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"445nTMleZCFp+wkJxRcssv",1,0],[1,0,34.376,-205.462],[3,0.15643446504023115,0,0,-0.9876883405951377],[1,8,0.9999999999999996,9],[1,-1818,0,0]],[10,"floor64",2,1,[-388,-389,-390],[[7,-385,[0,"dbonk7GdRWgonGEGEUZVgt"],[323],[2],324],[4,4,2,-386,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-387,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"4eer4C5GtMv7UhdM8ciHtZ",1,0],[1,0,28.87,-222.409],[3,0.15643446504023115,0,0,-0.9876883405951377],[1,8,0.9999999999999996,9],[1,-1818,0,0]],[10,"floor65",2,1,[-394,-395,-396],[[7,-391,[0,"dbonk7GdRWgonGEGEUZVgt"],[331],[2],332],[4,4,2,-392,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-393,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"dcXBwI0hRDjbwWptI8AJtL",1,0],[1,0,23.546,-238.797],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor66",2,1,[-400,-401,-402],[[7,-397,[0,"dbonk7GdRWgonGEGEUZVgt"],[339],[2],340],[4,4,2,-398,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-399,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"7dLeG/TF5JH4d9SVChVs8J",1,0],[1,0,18.04,-255.744],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor67",2,1,[-406,-407,-408],[[7,-403,[0,"dbonk7GdRWgonGEGEUZVgt"],[347],[2],348],[4,4,2,-404,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-405,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"98tbrN1m9IapZ32dHgFA0B",1,0],[1,0,20.822,-247.181],[3,0.15643446504023115,0,0,-0.9876883405951377],[1,8,0.9999999999999996,9],[1,-1818,0,0]],[10,"floor68",2,1,[-412,-413,-414],[[7,-409,[0,"dbonk7GdRWgonGEGEUZVgt"],[355],[2],356],[4,4,2,-410,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-411,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"42+3/VuyVDDIpz78tKpxim",1,0],[1,0,7.091,-289.438],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor69",2,1,[-418,-419,-420],[[7,-415,[0,"dbonk7GdRWgonGEGEUZVgt"],[363],[2],364],[4,4,2,-416,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-417,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"c53UHqVURMN7UoedafrAQc",1,0],[1,0,12.597,-272.491],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor70",2,1,[-424,-425,-426],[[7,-421,[0,"dbonk7GdRWgonGEGEUZVgt"],[371],[2],372],[4,4,2,-422,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-423,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"f3H5EKQM9APp4n/ETGc6kI",1,0],[1,0,15.379,-263.928],[3,0.15643446504023115,0,0,-0.9876883405951377],[1,8,0.9999999999999996,9],[1,-1818,0,0]],[10,"floor71",2,1,[-430,-431,-432],[[7,-427,[0,"dbonk7GdRWgonGEGEUZVgt"],[379],[2],380],[4,4,2,-428,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-429,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"e5lB1Bt11CvYYgdkNc0Ivo",1,0],[1,0,9.873,-280.875],[3,0.15643446504023115,0,0,-0.9876883405951377],[1,8,0.9999999999999996,9],[1,-1818,0,0]],[10,"floor72",2,1,[-436,-437,-438],[[7,-433,[0,"dbonk7GdRWgonGEGEUZVgt"],[387],[2],388],[4,4,2,-434,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-435,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"79ugGu25FEqaPvFy6QxnYn",1,0],[1,0,4.622,-297.037],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[10,"floor73",2,1,[-442,-443,-444],[[7,-439,[0,"dbonk7GdRWgonGEGEUZVgt"],[395],[2],396],[4,4,2,-440,[0,"d5JA11V3VCDoEtFRO+wpDy"]],[9,-441,[0,"43sOYfVrVDJohdJKrNewUQ"],[1,0,-0.5,0]]],[1,"c2WwZr0UdJeIWvGd9kzyt6",1,0],[1,0,2.329,-304.095],[3,-0.15643446504023115,0,0,0.9876883405951377],[1,8,0.9999999999999996,9],[1,-18.000000000000032,0,0]],[50,"obstacleServantCreater-001",2,1,[-451,-452],[[25,true,1.25,-445,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-446,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,8,-450,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-449],[433,434,435],-448,-447,432]],[1,"24MLNRsn5KGYNCNuFiQh+X",1,0],[1,1.569,1.01,-22.473]],[12,"obstacleServantCreater-003",2,1,[-459,-460],[[25,true,1.25,-453,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-454,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,7,-458,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-457],[442,443,444],-456,-455,441]],[1,"d0XMaOyctAC5KAESOT9gza",1,0],[1,1.954,17.099,-76.384],[3,0.15643446504023092,0,0,0.9876883405951378],[1,18.000000000000007,0,0]],[12,"obstacleServantCreater-004",2,1,[-467,-468],[[25,true,1.25,-461,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-462,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,8,-466,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-465],[451,452,453],-464,-463,450]],[1,"34/TMXxjJA8ZhmHdWRvUuN",1,0],[1,-1.639,12.374,-61.842],[3,0.15643446504023092,0,0,0.9876883405951378],[1,18.000000000000007,0,0]],[12,"obstacleServantCreater-005",2,1,[-475,-476],[[25,true,1.25,-469,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-470,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,7,-474,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-473],[460,461,462],-472,-471,459]],[1,"4d0f2RP01Ne40/Ao8f6Sx9",1,0],[1,0.112,34.118,-128.766],[3,0.15643446504023092,0,0,0.9876883405951378],[1,18.000000000000007,0,0]],[12,"obstacleServantCreater-006",2,1,[-483,-484],[[25,true,1.25,-477,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-478,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,8,-482,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-481],[469,470,471],-480,-479,468]],[1,"45JG2y/LJG0YTLNOPXn/+L",1,0],[1,-1.639,44.449,-160.561],[3,0.15643446504023092,0,0,0.9876883405951378],[1,18.000000000000007,0,0]],[12,"obstacleServantCreater-008",2,1,[-491,-492],[[25,true,1.25,-485,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-486,[0,"8d45efCqZA+4VfR2t4toYf"]],[33,0,3,-490,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-489],[494,495,496],-488,-487,493]],[1,"38naZjd+JHhZbwFVuyg1PA",1,0],[1,-1.639,7.245,-46.058],[3,0.15643446504023095,0,0,0.9876883405951377],[1,18.00000000000001,0,0]],[12,"obstacleServantCreater-009",2,1,[-499,-500],[[25,true,1.25,-493,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-494,[0,"8d45efCqZA+4VfR2t4toYf"]],[33,0,3,-498,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-497],[503,504,505],-496,-495,502]],[1,"13/RDQtLZBerydtpTOiIlr",1,0],[1,1.688,23.955,-97.557],[3,0.15643446504023092,0,0,0.9876883405951378],[1,18.000000000000007,0,0]],[12,"obstacleServantCreater-010",2,1,[-507,-508],[[25,true,1.25,-501,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-502,[0,"8d45efCqZA+4VfR2t4toYf"]],[33,0,3,-506,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-505],[512,513,514],-504,-503,511]],[1,"0eUT609DxJEZh667z8/+7M",1,0],[1,1.688,21.883,-91.181],[3,0.15643446504023095,0,0,0.9876883405951377],[1,18.00000000000001,0,0]],[12,"obstacleServantCreater-011",2,1,[-515,-516],[[25,true,1.25,-509,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-510,[0,"8d45efCqZA+4VfR2t4toYf"]],[33,0,3,-514,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-513],[521,522,523],-512,-511,520]],[1,"59rHCSDORNJpDoR0UwX2Lv",1,0],[1,-1.935,38.496,-142.309],[3,0.15643446504023092,0,0,0.9876883405951378],[1,18.000000000000007,0,0]],[12,"obstacleServantCreater-007",2,1,[-523,-524],[[25,true,1.25,-517,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-518,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,8,-522,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-521],[595,596,597],-520,-519,594]],[1,"fdH8+XtldOCKxwJjfEu+Cu",1,0],[1,-1.639,42.321,-181.042],[3,-0.15643446504023087,0,0,0.9876883405951378],[1,-18,0,0]],[12,"obstacleServantCreater-012",2,1,[-531,-532],[[25,true,1.25,-525,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-526,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,9,-530,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-529],[604,605,606],-528,-527,603]],[1,"efi578UjRK1a9lWqZqbPlC",1,0],[1,0.653,23.467,-239.068],[3,-0.15643446504023087,0,0,0.9876883405951378],[1,-18,0,0]],[12,"obstacleServantCreater-013",2,1,[-539,-540],[[25,true,1.25,-533,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-534,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,9,-538,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-537],[613,614,615],-536,-535,612]],[1,"dac2H5dbVKQ5zx9neLkfBh",1,0],[1,-1.451,14.839,-265.622],[3,-0.1564344650402309,0,0,0.9876883405951378],[1,-18.000000000000007,0,0]],[12,"obstacleServantCreater-014",2,1,[-547,-548],[[25,true,1.25,-541,[0,"04hBA9MShPn7M3x0Cx/4uZ"]],[4,8,2,-542,[0,"8d45efCqZA+4VfR2t4toYf"]],[28,1,2,9,-546,[0,"30ad5ouAtBJ6TtesAZLZ52"],[-545],[622,623,624],-544,-543,621]],[1,"e2D6+YIkNDNKXLKw41vQuW",1,0],[1,1.388,33.583,-207.932],[3,-0.15643446504023087,0,0,0.9876883405951378],[1,-18,0,0]],[6,"key",2,1,[[18,1,0,-549,[0,"1fSe5LY4RSY6qoLiGIWIKO"],[66],[2],67],[4,8,2,-550,[0,"43s4hvZmdD3JpGnLLKyNq9"]],[27,true,-551,[0,"36uW/iMJ9CG5GIojJ/BgX8"],[1,-0.008134037256240845,0.060585394501686096,0],[1,0.45162925124168396,0.9340642392635345,0.12502029538154602]],[56,-553,[0,"87/avJj2JH94gMbbxSAYA3"],[-552]]],[1,"ddY4ajs69Lq5iehc1DEUdk",1,0],[1,0,48.188,-167.561],[3,0,0,0.4113870986902541,0.9114607259949357],[1,1.2,1.2,1.2],[1,0,0,48.584]],[22,"mankindCount",512,2,14,[-557,-558],[[[8,-554,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-555,[0,"1fdYtbyMtJCZIT5c5edufg"]],-556],4,4,1],[1,"a0b7w8WX1EVY4CqHf4iL9o",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[6,"smallDiamond-045",2,2,[[11,"Quad<ModelComponent>",1,0,-559,[0,"0e7bObnqlFyaNHQCE4rCP/"],[397],[2],398],[4,8,2,-560,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-561,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-563,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-562]]],[1,"7cyuamXtVGcLcVPJkwd68b",1,0],[1,1.5,5.754,-40.271],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999998,1.9999999999999998],[1,18.000000000000007,0,0]],[6,"smallDiamond-046",2,2,[[11,"Quad<ModelComponent>",1,0,-564,[0,"0e7bObnqlFyaNHQCE4rCP/"],[399],[2],400],[4,8,2,-565,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-566,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-568,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-567]]],[1,"0bgA4g2kpBG40qNQO5NqfN",1,0],[1,1.5,6.986,-44.062],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[6,"smallDiamond-047",2,2,[[11,"Quad<ModelComponent>",1,0,-569,[0,"0e7bObnqlFyaNHQCE4rCP/"],[401],[2],402],[4,8,2,-570,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-571,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-573,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-572]]],[1,"16dr5WMYdE+b1OV4rRJHPS",1,0],[1,1.5,7.971,-47.094],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999998,1.9999999999999998],[1,18.000000000000007,0,0]],[6,"smallDiamond-048",2,2,[[11,"Quad<ModelComponent>",1,0,-574,[0,"0e7bObnqlFyaNHQCE4rCP/"],[403],[2],404],[4,8,2,-575,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-576,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-578,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-577]]],[1,"7dzyxxJZ9Js7amZy9+gAkc",1,0],[1,1.5,8.993,-50.237],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[6,"smallDiamond-049",2,2,[[11,"Quad<ModelComponent>",1,0,-579,[0,"0e7bObnqlFyaNHQCE4rCP/"],[405],[2],406],[4,8,2,-580,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-581,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-583,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-582]]],[1,"9bpb0b3HJJxZR3pl5JwxXl",1,0],[1,1.5,10.074,-53.564],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[6,"smallDiamond-050",2,2,[[11,"Quad<ModelComponent>",1,0,-584,[0,"0e7bObnqlFyaNHQCE4rCP/"],[407],[2],408],[4,8,2,-585,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-586,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-588,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-587]]],[1,"a25MfO7RpIUJWAj7Paz8vU",1,0],[1,-1.459,25.483,-100.985],[3,0.15643446504023095,0,0,0.9876883405951377],[1,2,1.9999999999999993,1.9999999999999993],[1,18.00000000000001,0,0]],[6,"smallDiamond-051",2,2,[[11,"Quad<ModelComponent>",1,0,-589,[0,"0e7bObnqlFyaNHQCE4rCP/"],[409],[2],410],[4,8,2,-590,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-591,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-593,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-592]]],[1,"603Dr7e9ZGGLvWs5I1DzAT",1,0],[1,-1.459,24.402,-97.658],[3,0.15643446504023095,0,0,0.9876883405951377],[1,2,1.9999999999999993,1.9999999999999993],[1,18.00000000000001,0,0]],[6,"smallDiamond-052",2,2,[[11,"Quad<ModelComponent>",1,0,-594,[0,"0e7bObnqlFyaNHQCE4rCP/"],[411],[2],412],[4,8,2,-595,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-596,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-598,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-597]]],[1,"3fDnw/d/dPWqAiDPSmWlXn",1,0],[1,-1.459,23.38,-94.515],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[6,"smallDiamond-053",2,2,[[11,"Quad<ModelComponent>",1,0,-599,[0,"0e7bObnqlFyaNHQCE4rCP/"],[413],[2],414],[4,8,2,-600,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-601,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-603,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-602]]],[1,"1aA7G0gFxGtqdfe1cyHyvi",1,0],[1,-1.459,22.395,-91.483],[3,0.15643446504023095,0,0,0.9876883405951377],[1,2,1.9999999999999993,1.9999999999999993],[1,18.00000000000001,0,0]],[6,"smallDiamond-054",2,2,[[11,"Quad<ModelComponent>",1,0,-604,[0,"0e7bObnqlFyaNHQCE4rCP/"],[415],[2],416],[4,8,2,-605,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-606,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-608,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-607]]],[1,"e5LxFR/t9EGLEZ3Q9Ofktq",1,0],[1,-1.459,21.163,-87.692],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[6,"smallDiamond-055",2,2,[[11,"Quad<ModelComponent>",1,0,-609,[0,"0e7bObnqlFyaNHQCE4rCP/"],[417],[2],418],[4,8,2,-610,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-611,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-613,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-612]]],[1,"bcedq3Xr9L5oLGQD1PK5a4",1,0],[1,1.5,36.774,-135.741],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999998,1.9999999999999998],[1,18.000000000000007,0,0]],[6,"smallDiamond-056",2,2,[[11,"Quad<ModelComponent>",1,0,-614,[0,"0e7bObnqlFyaNHQCE4rCP/"],[419],[2],420],[4,8,2,-615,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-616,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-618,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-617]]],[1,"0ful4w+M9FF6GkC9/Kr3Xg",1,0],[1,1.5,38.006,-139.532],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[6,"smallDiamond-057",2,2,[[11,"Quad<ModelComponent>",1,0,-619,[0,"0e7bObnqlFyaNHQCE4rCP/"],[421],[2],422],[4,8,2,-620,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-621,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-623,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-622]]],[1,"51Ax9kaotOJYt3sykDXm71",1,0],[1,1.5,38.991,-142.564],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999998,1.9999999999999998],[1,18.000000000000007,0,0]],[6,"smallDiamond-058",2,2,[[11,"Quad<ModelComponent>",1,0,-624,[0,"0e7bObnqlFyaNHQCE4rCP/"],[423],[2],424],[4,8,2,-625,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-626,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-628,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-627]]],[1,"5bLer2PwBEtY1lG02sMMs0",1,0],[1,1.5,40.013,-145.707],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[6,"smallDiamond-059",2,2,[[11,"Quad<ModelComponent>",1,0,-629,[0,"0e7bObnqlFyaNHQCE4rCP/"],[425],[2],426],[4,8,2,-630,[0,"94hVLGmr1JibHKK+p3twba"]],[13,true,-631,[0,"afFABMzK5AgJRfqqLXq5nC"],[1,0.2098170518875122,0.33108824491500854,0.2098170518875122]],[20,-633,[0,"25AfzCy/NLKYxQ1u/5V+e1"],[-632]]],[1,"e2MUecs+JDY5vxU02jIhLQ",1,0],[1,1.5,41.094,-149.034],[3,0.15643446504023092,0,0,0.9876883405951378],[1,2,1.9999999999999996,1.9999999999999996],[1,18.000000000000007,0,0]],[22,"mankindCount",512,2,55,[-637,-638],[[[8,-634,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-635,[0,"1fdYtbyMtJCZIT5c5edufg"]],-636],4,4,1],[1,"88WJRqWNRLuKqsM6SH4YkI",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,56,[-642,-643],[[[8,-639,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-640,[0,"1fdYtbyMtJCZIT5c5edufg"]],-641],4,4,1],[1,"c53JBtj9xPNqZ1Mt3+PEgr",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,57,[-647,-648],[[[8,-644,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-645,[0,"1fdYtbyMtJCZIT5c5edufg"]],-646],4,4,1],[1,"39AFfZPH1E0o+hFU9BLn6a",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,58,[-652,-653],[[[8,-649,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-650,[0,"1fdYtbyMtJCZIT5c5edufg"]],-651],4,4,1],[1,"feC5BwakdJWYEpScY5rEOp",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,59,[-657,-658],[[[8,-654,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-655,[0,"1fdYtbyMtJCZIT5c5edufg"]],-656],4,4,1],[1,"72sMsV1SxIf5bGFellCDCc",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[5,"speedUp",2,1,[[11,"Quad<ModelComponent>",1,0,-659,[0,"60+34yaRpGm48exD9bSGfo"],[472],[2],473],[4,8,2,-660,[0,"b6kj2bVzxD052pRDevHi2N"]],[40,true,-661,[0,"f6na3NSDVGXqj0DxfZ9pSG"]],[42,9,-663,[0,"58xeRm+1BHE7Rd5JTDfDKq"],[-662]]],[1,"99m7JmuuJE6om3SpBGFwIA",1,0],[1,1.612,1.01,-14.295],[1,3.2,3.2,3.2]],[5,"speedUp-001",2,1,[[11,"Quad<ModelComponent>",1,0,-664,[0,"3bNLVapxJDPZJLVtAlaz8t"],[474],[2],475],[4,8,2,-665,[0,"64fHLiV/VIk5wTa6fgG3NN"]],[40,true,-666,[0,"4dwpCHRYJLCqfTIErD7WQM"]],[42,9,-668,[0,"8bTREynelM7brc6mSlSez7"],[-667]]],[1,"6eQibtnbxFn5qjimMdXGU7",1,0],[1,-1.558,1.01,-14.295],[1,3.2,3.2,3.2]],[22,"mankindCount",512,2,60,[-672,-673],[[[8,-669,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-670,[0,"1fdYtbyMtJCZIT5c5edufg"]],-671],4,4,1],[1,"19DIP9D/pM0KigoQ3Tj5aK",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,61,[-677,-678],[[[8,-674,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-675,[0,"1fdYtbyMtJCZIT5c5edufg"]],-676],4,4,1],[1,"60ag+lQpVNfIAb4jXpD7xU",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,62,[-682,-683],[[[8,-679,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-680,[0,"1fdYtbyMtJCZIT5c5edufg"]],-681],4,4,1],[1,"801bcTaQxBo7cEo7w7OlgO",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,63,[-687,-688],[[[8,-684,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-685,[0,"1fdYtbyMtJCZIT5c5edufg"]],-686],4,4,1],[1,"eelMA59MJJ8qWJ55grn1nK",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[31,"box",512,2,[[18,1,0,-689,[0,"74XBXD2xRF7r5XzifjdP9J"],[554],[2],555],[4,8,2,-690,[0,"42E2uKxdJNMIMTCVF6vqgc"]],[13,true,-691,[0,"31RxAc1OBOU7Wgc6OceQuy"],[1,3.4234819412231445,1.5335367918014526,0.4]]],[1,"91HBHbwd9M05NwMwravcVy",1,0],[1,0,0.75,0],[1,0.864,1,1]],[31,"box",512,2,[[18,1,0,-692,[0,"84ddQarxdDq6feaKYnH8Nu"],[560],[2],561],[4,8,2,-693,[0,"7dfzWIADJMBbXMDkoaXfFe"]],[13,true,-694,[0,"96zvjVgsxMYozglfQtDxJ7"],[1,3.4234819412231445,1.5335367918014526,0.4]]],[1,"9dUjEvdcJE9KTqcpRKUH7H",1,0],[1,0,0.75,0],[1,0.864,1,1]],[31,"box",512,2,[[18,1,0,-695,[0,"84ddQarxdDq6feaKYnH8Nu"],[568],[2],569],[4,8,2,-696,[0,"7dfzWIADJMBbXMDkoaXfFe"]],[13,true,-697,[0,"96zvjVgsxMYozglfQtDxJ7"],[1,3.4234819412231445,1.5335367918014526,0.4]]],[1,"6cr4A2hHBE2JoIF75NxzQU",1,0],[1,0,0.75,0],[1,0.864,1,1]],[31,"box",512,2,[[18,1,0,-698,[0,"74XBXD2xRF7r5XzifjdP9J"],[574],[2],575],[4,8,2,-699,[0,"42E2uKxdJNMIMTCVF6vqgc"]],[13,true,-700,[0,"31RxAc1OBOU7Wgc6OceQuy"],[1,3.4234819412231445,1.5335367918014526,0.4]]],[1,"9c3cZjJ01GE6Kis1MUh+Bu",1,0],[1,0,0.75,0],[1,0.864,1,1]],[35,"body",512,2,[[18,1,0,-701,[0,"d0R+/GI/tQd54Z0gjv65L2"],[580,581],[2],582],[4,8,2,-702,[0,"76NOaTKLJClrF3LdPRTxsh"]],[43,true,0.6272415518760681,1.7515132427215576,-703,[0,"37WWDYxzBPxZG1VwA3FDMZ"],[1,0,0.8757566213607788,0]]],[1,"3dCwIG8t9LiJSS7U6nxsxG",1,0],[1,2,2,2]],[51,"body",512,2,[[18,1,0,-704,[0,"d1EDORGBRXOonBgVuE4jlJ"],[583,584],[2],585],[4,8,2,-705,[0,"1eiNdXl7NNtrYLwlUSqPIo"]],[27,true,-706,[0,"b8Cf5PKhJFvadJtDPaqtkZ"],[1,0,1.3549484685063362,0],[1,1.031943440437317,3.1775218099355698,2]]],[1,"2fpfPZYQtPgbTSZyTMYx9C",1,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0,0,-90]],[35,"body",512,2,[[18,1,0,-707,[0,"d0R+/GI/tQd54Z0gjv65L2"],[586,587],[2],588],[4,8,2,-708,[0,"76NOaTKLJClrF3LdPRTxsh"]],[43,true,0.6272415518760681,1.7515132427215576,-709,[0,"37WWDYxzBPxZG1VwA3FDMZ"],[1,0,0.8757566213607788,0]]],[1,"5bvkKCA+pKlKT2a9aMF/Te",1,0],[1,2,2,2]],[22,"mankindCount",512,2,64,[-713,-714],[[[8,-710,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-711,[0,"1fdYtbyMtJCZIT5c5edufg"]],-712],4,4,1],[1,"bclxJ88oVIoaEhfc3p8HBI",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,65,[-718,-719],[[[8,-715,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-716,[0,"1fdYtbyMtJCZIT5c5edufg"]],-717],4,4,1],[1,"638+qFS3FOpY1EG6VZ5goj",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,66,[-723,-724],[[[8,-720,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-721,[0,"1fdYtbyMtJCZIT5c5edufg"]],-722],4,4,1],[1,"76cfDBy/dGILenz6rBpLjX",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[22,"mankindCount",512,2,67,[-728,-729],[[[8,-725,[0,"35LIQr8NlF7IbJUgeittSJ"],[5,1,1]],[17,-726,[0,"1fdYtbyMtJCZIT5c5edufg"]],-727],4,4,1],[1,"ec4kQBCgJBlK/ZryzVka3+",1,0],[1,0,1.5,0],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,3,3,3],[1,-13.353,11.808,0]],[12,"doorDeadly-004",2,1,[96,-733,-734],[[34,0,-732,[0,"eb4tsVkQpPRoTlKBXCmvEU"],[96,-730,-731],96]],[1,"edJ1y8PfZAG7St8or39qPd",1,0],[1,-1.461,38.727,-199.57],[3,0.9876883405951378,0,0,0.15643446504023092],[1,162,0,0]],[29,"frame",512,2,107,[[18,1,0,-735,[0,"4ehz9QomZHc75nWhdBIT6K"],[556],[2],557],[4,8,2,-736,[0,"70pg3VcA1PJpBxeJKx90cH"]],[27,true,-737,[0,"788uNqrZtACqizPWe2duYI"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"08cKrrcD5Oz6zkjBsHWlx/",1,0],[1,-1.5,0.75,0]],[29,"frame-001",512,2,107,[[18,1,0,-738,[0,"8aenFTNS5IXJ022kWVxctg"],[558],[2],559],[4,8,2,-739,[0,"23AzgBwEZAaZ62NROfUxmd"]],[27,true,-740,[0,"bbnbRbdDlCYa/xNaNp3ecO"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"60szX3201AKqOxkskCf9mR",1,0],[1,1.5,0.75,0]],[12,"doorDeadly-005",2,1,[97,-744,-745],[[34,3,-743,[0,"dfF2ac4IBOkb9zHVdzDN1u"],[97,-741,-742],97]],[1,"d0x5ZFhndBCZ1kyeP0O4P4",1,0],[1,1.555,38.727,-199.57],[3,0.9876883405951378,0,0,0.15643446504023092],[1,162,0,0]],[29,"frame",512,2,110,[[18,1,0,-746,[0,"65zfqUrI9DPpe7Fx6NUC9M"],[562],[2],563],[4,8,2,-747,[0,"cefdVal5RC04gwz82WzQsK"]],[27,true,-748,[0,"49tKNq77JByqR129p61FS4"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"3f6rYukDZFA5V9lWcTg/IC",1,0],[1,-1.5,0.75,0]],[29,"frame-001",512,2,110,[[18,1,0,-749,[0,"6dYdBBKSVI3rZrX7rJHC9T"],[564],[2],565],[4,8,2,-750,[0,"e7Vv8c4BVKBL/vEA/KRpY8"]],[27,true,-751,[0,"e6VJM+NtJHLZYRoU1qFlKk"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"a32xNfqE9P1ZKEHBFqFwiG",1,0],[1,1.5,0.75,0]],[12,"doorDeadly-006",2,1,[98,-755,-756],[[34,3,-754,[0,"dfF2ac4IBOkb9zHVdzDN1u"],[98,-752,-753],98]],[1,"e3E6qUizlA2bTXtlgGp0/z",1,0],[1,1.555,22.263,-250.242],[3,0.9876883405951378,0,0,0.15643446504023092],[1,162,0,0]],[29,"frame",512,2,113,[[18,1,0,-757,[0,"65zfqUrI9DPpe7Fx6NUC9M"],[570],[2],571],[4,8,2,-758,[0,"cefdVal5RC04gwz82WzQsK"]],[27,true,-759,[0,"49tKNq77JByqR129p61FS4"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"6dN3l0h7dDk6SnKxQOk37U",1,0],[1,-1.5,0.75,0]],[29,"frame-001",512,2,113,[[18,1,0,-760,[0,"6dYdBBKSVI3rZrX7rJHC9T"],[572],[2],573],[4,8,2,-761,[0,"e7Vv8c4BVKBL/vEA/KRpY8"]],[27,true,-762,[0,"e6VJM+NtJHLZYRoU1qFlKk"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"fefiNutIVNhZk7QWQjM6be",1,0],[1,1.5,0.75,0]],[12,"doorDeadly-007",2,1,[99,-766,-767],[[34,0,-765,[0,"eb4tsVkQpPRoTlKBXCmvEU"],[99,-763,-764],99]],[1,"a5VvxzvAZMxJFQbbAVf98P",1,0],[1,-1.461,22.263,-250.242],[3,0.9876883405951378,0,0,0.15643446504023092],[1,162,0,0]],[29,"frame",512,2,116,[[18,1,0,-768,[0,"4ehz9QomZHc75nWhdBIT6K"],[576],[2],577],[4,8,2,-769,[0,"70pg3VcA1PJpBxeJKx90cH"]],[27,true,-770,[0,"788uNqrZtACqizPWe2duYI"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"68vFh2F2JEY4bXnA+HvEUz",1,0],[1,-1.5,0.75,0]],[29,"frame-001",512,2,116,[[18,1,0,-771,[0,"8aenFTNS5IXJ022kWVxctg"],[578],[2],579],[4,8,2,-772,[0,"23AzgBwEZAaZ62NROfUxmd"]],[27,true,-773,[0,"bbnbRbdDlCYa/xNaNp3ecO"],[1,0,0.0989067554473877,0],[1,0.3956269919872284,1.8021864891052246,0.3956269919872284]]],[1,"9ct4mWOepOSoU18AVYQ4HW",1,0],[1,1.5,0.75,0]],[23,"label",2,69,[[[8,-774,[0,"c68UOAlNhN171Umca6yVvF"],[5,24,35]],-775,-776],4,1,1],[1,"89+FGT0v9BsL22oXVJrb06",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,85,[[[8,-777,[0,"c68UOAlNhN171Umca6yVvF"],[5,24,35]],-778,-779],4,1,1],[1,"91SAXwzp9FiLvJPwldKg8k",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,86,[[[8,-780,[0,"c68UOAlNhN171Umca6yVvF"],[5,24,35]],-781,-782],4,1,1],[1,"81nytXb2NBmJbFBS9rqd/1",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,87,[[[8,-783,[0,"c68UOAlNhN171Umca6yVvF"],[5,24,35]],-784,-785],4,1,1],[1,"a9O1mYLj5GZokzfvp1EUuV",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,88,[[[8,-786,[0,"c68UOAlNhN171Umca6yVvF"],[5,24,35]],-787,-788],4,1,1],[1,"78wYi95j1MlalbN/kVDI2o",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,89,[[[8,-789,[0,"c68UOAlNhN171Umca6yVvF"],[5,24,35]],-790,-791],4,1,1],[1,"57RmH2P9hAu6r0tMXPsOU4",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[36,"label0",512,2,3,[[[8,-792,[0,"c68UOAlNhN171Umca6yVvF"],[5,49,35]],-793,[14,true,-795,[0,"72dcwT+a9Gb4hy3wkrBOOr"],-794]],4,1,4],[1,"16lmOR6wtBJq3FqpX91KKQ",1,0],[1,0,0.759,0.01],[1,0.038,0.038,0.038]],[37,"label1",512,2,3,[[[8,-796,[0,"c68UOAlNhN171Umca6yVvF"],[5,49,35]],-797,[14,true,-799,[0,"97dxX+a49AtqEyWRnSgPIe"],-798]],4,1,4],[1,"afcjvwDmBE/7d3/9mbTrVd",1,0],[1,0,0.759,0.01],[3,0,1,0,6.123233995736766e-17],[1,0.038,0.038,0.038],[1,0,180,0]],[36,"label0",512,2,4,[[[8,-800,[0,"c68UOAlNhN171Umca6yVvF"],[5,68,35]],-801,[14,true,-803,[0,"72dcwT+a9Gb4hy3wkrBOOr"],-802]],4,1,4],[1,"39P2AftEhCPIadRETz9G+R",1,0],[1,0,0.759,0.01],[1,0.038,0.038,0.038]],[37,"label1",512,2,4,[[[8,-804,[0,"c68UOAlNhN171Umca6yVvF"],[5,68,35]],-805,[14,true,-807,[0,"97dxX+a49AtqEyWRnSgPIe"],-806]],4,1,4],[1,"6ci5RxbxtIhKYNUI+b9AUL",1,0],[1,0,0.759,0.01],[3,0,1,0,6.123233995736766e-17],[1,0.038,0.038,0.038],[1,0,180,0]],[23,"label",2,92,[[[8,-808,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-809,-810],4,1,1],[1,"0cDJvIor9C/42cFLH4+2fv",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,93,[[[8,-811,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-812,-813],4,1,1],[1,"53hE12shFKqb0dYwv24gDg",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,94,[[[8,-814,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-815,-816],4,1,1],[1,"dfVXl65x9GT4YZaP9VD8Pn",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,95,[[[8,-817,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-818,-819],4,1,1],[1,"90LSxRPnFIXY3Eea9E0kek",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,103,[[[8,-820,[0,"c68UOAlNhN171Umca6yVvF"],[5,24,35]],-821,-822],4,1,1],[1,"c3azuPgWpKaKhCi34wyT6j",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,104,[[[8,-823,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-824,-825],4,1,1],[1,"c1MbVHzFVNsrnpPdVPy4uh",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,105,[[[8,-826,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-827,-828],4,1,1],[1,"dcIEQbS6RFO7zEBkfhA+rG",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[23,"label",2,106,[[[8,-829,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-830,-831],4,1,1],[1,"2dCtfazkdAkbfepIZE1SOk",1,0],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[24,"bg",2,69,[[[8,-832,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-833],4,1],[1,"62W826IJNEwaqTOCs/EQ+L",1,0],[1,0.002,0.002,0.002]],[15,"8",32,32,35,false,2,119,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,14,[[19,"Quad<ModelComponent>",-834,[0,"cf0e2Ddb1LaZRmljaFideC"],[71],[2],72]],[1,"96wQjoEK1NmoH1tuy8zTiT",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,85,[[[8,-835,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-836],4,1],[1,"69YkJvL9NGt4Iqv+03EAr2",1,0],[1,0.002,0.002,0.002]],[15,"8",32,32,35,false,2,120,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,55,[[19,"Quad<ModelComponent>",-837,[0,"cf0e2Ddb1LaZRmljaFideC"],[430],[2],431]],[1,"e5Z69qtIhCuKvTFaY2SupO",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,86,[[[8,-838,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-839],4,1],[1,"f0aYlk5dJEjp5Lg7H5oKqo",1,0],[1,0.002,0.002,0.002]],[15,"7",32,32,35,false,2,121,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,56,[[19,"Quad<ModelComponent>",-840,[0,"cf0e2Ddb1LaZRmljaFideC"],[439],[2],440]],[1,"b7EP8hWPhDJI5QercUYsdC",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,87,[[[8,-841,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-842],4,1],[1,"a3sl7NYxpAHJ20hh072EO7",1,0],[1,0.002,0.002,0.002]],[15,"8",32,32,35,false,2,122,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,57,[[19,"Quad<ModelComponent>",-843,[0,"cf0e2Ddb1LaZRmljaFideC"],[448],[2],449]],[1,"f65fY6TcVAgKJBFbsEkqqf",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,88,[[[8,-844,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-845],4,1],[1,"1beDb07xxDKIaoYjNfJYzi",1,0],[1,0.002,0.002,0.002]],[15,"7",32,32,35,false,2,123,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,58,[[19,"Quad<ModelComponent>",-846,[0,"cf0e2Ddb1LaZRmljaFideC"],[457],[2],458]],[1,"b77zGI+9FAI7nuflpbliPk",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,89,[[[8,-847,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-848],4,1],[1,"5ehLlQGsdMhqXf5eUjBBjW",1,0],[1,0.002,0.002,0.002]],[15,"8",32,32,35,false,2,124,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,59,[[19,"Quad<ModelComponent>",-849,[0,"cf0e2Ddb1LaZRmljaFideC"],[466],[2],467]],[1,"63LKPzzbhJPpS+JylgUDVw",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[38,"bg0",512,2,3,[[[8,-850,[0,"e590ZvmT5JoqwLesweOABd"],[5,3.2,1.5]],-851],4,1],[1,"79bMz0ujpIfbjjMbrf9OYG",1,0],[1,0,0.75,0]],[39,"bg1",512,2,3,[[[8,-852,[0,"17zvtgMFlNy4pMVskdvpUN"],[5,3.2,1.5]],-853],4,1],[1,"01ESdGnXJFGobZ9UuwfjEU",1,0],[1,0,0.75,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[15,"x 2",32,32,35,false,2,125,[0,"2frm37uaJHQr0AEEaYyM82"]],[15,"x 2",32,32,35,false,2,126,[0,"2frm37uaJHQr0AEEaYyM82"]],[38,"bg0",512,2,4,[[[8,-854,[0,"e590ZvmT5JoqwLesweOABd"],[5,3.2,1.5]],-855],4,1],[1,"d85Fuuz1ZCt6YKic0mBbFp",1,0],[1,0,0.75,0]],[39,"bg1",512,2,4,[[[8,-856,[0,"17zvtgMFlNy4pMVskdvpUN"],[5,3.2,1.5]],-857],4,1],[1,"74qpRl0ZlOQonGfeC9ho2s",1,0],[1,0,0.75,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[15,"+ 30",32,32,35,false,2,127,[0,"2frm37uaJHQr0AEEaYyM82"]],[15,"+ 30",32,32,35,false,2,128,[0,"2frm37uaJHQr0AEEaYyM82"]],[24,"bg",2,92,[[[8,-858,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-859],4,1],[1,"5drq51k6pE0pgq2FY9YtsQ",1,0],[1,0.002,0.002,0.002]],[15,"3",32,32,35,false,2,129,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,60,[[19,"Quad<ModelComponent>",-860,[0,"cf0e2Ddb1LaZRmljaFideC"],[491],[2],492]],[1,"6eyYwqHExLjo2C+rFiCCr7",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,93,[[[8,-861,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-862],4,1],[1,"77wafXPHRJ9Zxa/p31Cail",1,0],[1,0.002,0.002,0.002]],[15,"3",32,32,35,false,2,130,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,61,[[19,"Quad<ModelComponent>",-863,[0,"cf0e2Ddb1LaZRmljaFideC"],[500],[2],501]],[1,"4ehWBHniFNgb47nWyShS61",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,94,[[[8,-864,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-865],4,1],[1,"datGotYYNHsIpPYGA6uNCd",1,0],[1,0.002,0.002,0.002]],[15,"3",32,32,35,false,2,131,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,62,[[19,"Quad<ModelComponent>",-866,[0,"cf0e2Ddb1LaZRmljaFideC"],[509],[2],510]],[1,"dcIb/JksZClqzqFD/gnsRr",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,95,[[[8,-867,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-868],4,1],[1,"ffgLUJGd1CXLbzkQrMg6Fk",1,0],[1,0.002,0.002,0.002]],[15,"3",32,32,35,false,2,132,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,63,[[19,"Quad<ModelComponent>",-869,[0,"cf0e2Ddb1LaZRmljaFideC"],[518],[2],519]],[1,"3ctTbhEL5LlJuv82aXluWX",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[6,"floor83",2,1,[[7,-870,[0,"dbonk7GdRWgonGEGEUZVgt"],[538],[2],539],[4,4,2,-871,[0,"d5JA11V3VCDoEtFRO+wpDy"]]],[1,"68InZByCJKXIke9H4yPdx6",1,0],[1,0,26.989,-249.306],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[10,"cylinderDeadly",2,1,[100],[[44,-360,2,-872,[0,"be5Po52n9KVacQABEul17W"],[100],100]],[1,"faTkCD869C2oRjcEUFzgQs",1,0],[1,-2.5,33.493,-215.357],[3,0.9876883405951378,0,0,0.15643446504023092],[1,0.5,0.5,1],[1,162,0,0]],[12,"panelDeadly",2,1,[101],[[57,90,4,-873,[0,"763RiBb3FJGYr2QIg0kD5t"],[101],101]],[1,"cd433GAr1EkqzIoYwiTHFm",1,0],[1,0,30.905,-222.875],[3,0.9876883405951378,0,0,0.15643446504023092],[1,162,0,0]],[10,"cylinderDeadly-001",2,1,[102],[[44,-360,2,-874,[0,"be5Po52n9KVacQABEul17W"],[102],102]],[1,"fbRnkZt5xFar3K6ghrJv0F",1,0],[1,2.42,16.667,-267.14],[3,0.9876883405951378,0,0,0.15643446504023092],[1,0.5,0.5,1],[1,162,0,0]],[24,"bg",2,103,[[[8,-875,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-876],4,1],[1,"47T7MZax9CmJplNVhE+aTp",1,0],[1,0.002,0.002,0.002]],[15,"8",32,32,35,false,2,133,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,64,[[19,"Quad<ModelComponent>",-877,[0,"cf0e2Ddb1LaZRmljaFideC"],[592],[2],593]],[1,"ee7mVCiM9EY6QgTXUadS7t",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,104,[[[8,-878,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-879],4,1],[1,"2asn1yqQ5AZIelkIm0hfDy",1,0],[1,0.002,0.002,0.002]],[15,"9",32,32,35,false,2,134,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,65,[[19,"Quad<ModelComponent>",-880,[0,"cf0e2Ddb1LaZRmljaFideC"],[601],[2],602]],[1,"31bamC19BM9aeLucLhmRH/",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,105,[[[8,-881,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-882],4,1],[1,"e0F42JxjhFZYAmHd/nP8Eq",1,0],[1,0.002,0.002,0.002]],[15,"9",32,32,35,false,2,135,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,66,[[19,"Quad<ModelComponent>",-883,[0,"cf0e2Ddb1LaZRmljaFideC"],[610],[2],611]],[1,"16BX2F8B1Dn7eqQiyehHbn",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[24,"bg",2,106,[[[8,-884,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-885],4,1],[1,"6c5v2IiIpOy7zv3B2dBmEa",1,0],[1,0.002,0.002,0.002]],[15,"9",32,32,35,false,2,136,[0,"2frm37uaJHQr0AEEaYyM82"]],[21,"circle",512,2,67,[[19,"Quad<ModelComponent>",-886,[0,"cf0e2Ddb1LaZRmljaFideC"],[619],[2],620]],[1,"f70L8/5ipFYJKToMJYEc7D",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,2.5,2.5,2.5],[1,-90,0,0]],[5,"leftHandrail",2,6,[[3,0,-887,[0,"dbonk7GdRWgonGEGEUZVgt"],[0],[2],1]],[1,"ceKWg0YcJKOohXAOnAdYrj",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,6,[[3,0,-888,[0,"dbonk7GdRWgonGEGEUZVgt"],[2],[2],3]],[1,"bf3MEq3vFHg6+VXWsXw6km",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,6,[[3,0,-889,[0,"dbonk7GdRWgonGEGEUZVgt"],[4],[2],5]],[1,"b2Yi5v2nBITrWd8Z1inGf8",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,7,[[3,0,-890,[0,"dbonk7GdRWgonGEGEUZVgt"],[8],[2],9]],[1,"9cClPrV3FLHYF700WzuP5i",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,7,[[3,0,-891,[0,"dbonk7GdRWgonGEGEUZVgt"],[10],[2],11]],[1,"f6UMqsMzBCaqAlns4UcPkK",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,7,[[3,0,-892,[0,"dbonk7GdRWgonGEGEUZVgt"],[12],[2],13]],[1,"ddKv6awCZESZmbkun8fEjm",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,8,[[3,0,-893,[0,"dbonk7GdRWgonGEGEUZVgt"],[16],[2],17]],[1,"95pvYZRDFJxJayFJqsuCuS",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,8,[[3,0,-894,[0,"dbonk7GdRWgonGEGEUZVgt"],[18],[2],19]],[1,"e6tKsJTGFPP7PXdn2vPC/y",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,8,[[3,0,-895,[0,"dbonk7GdRWgonGEGEUZVgt"],[20],[2],21]],[1,"aeAoJ2PvBF06TL24zf37Jb",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,9,[[3,0,-896,[0,"dbonk7GdRWgonGEGEUZVgt"],[24],[2],25]],[1,"c13z/KOF5E1rUFFXtM5tty",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,9,[[3,0,-897,[0,"dbonk7GdRWgonGEGEUZVgt"],[26],[2],27]],[1,"f4+nsvVwtNd7A3X/4H0Osq",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,9,[[3,0,-898,[0,"dbonk7GdRWgonGEGEUZVgt"],[28],[2],29]],[1,"51OyPVdmlIE4EwrRvWBe3T",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,10,[[3,0,-899,[0,"dbonk7GdRWgonGEGEUZVgt"],[32],[2],33]],[1,"94hJxETylH1IHZ26zlT8cd",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,10,[[3,0,-900,[0,"dbonk7GdRWgonGEGEUZVgt"],[34],[2],35]],[1,"7exi4aeC9GUrumVOW6gpPR",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,10,[[3,0,-901,[0,"dbonk7GdRWgonGEGEUZVgt"],[36],[2],37]],[1,"67jUUdlX9Frqu7pgYhCM73",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,11,[[3,0,-902,[0,"dbonk7GdRWgonGEGEUZVgt"],[40],[2],41]],[1,"d4eXl/SPZAapAAOZiWjMfC",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,11,[[3,0,-903,[0,"dbonk7GdRWgonGEGEUZVgt"],[42],[2],43]],[1,"60e6S94E1Au4B6w3XrGOHD",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,11,[[3,0,-904,[0,"dbonk7GdRWgonGEGEUZVgt"],[44],[2],45]],[1,"0dUWifbGZK8agZ7N/ny/kD",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,12,[[3,0,-905,[0,"dbonk7GdRWgonGEGEUZVgt"],[48],[2],49]],[1,"efg9BbjupM6aYBxiKlznVi",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,12,[[3,0,-906,[0,"dbonk7GdRWgonGEGEUZVgt"],[50],[2],51]],[1,"20iHq3+FNAxJ4+XSpUkkZc",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,12,[[3,0,-907,[0,"dbonk7GdRWgonGEGEUZVgt"],[52],[2],53]],[1,"7e2HzBnzZAr4+bIknJfFoA",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,5,[[3,0,-908,[0,"dbonk7GdRWgonGEGEUZVgt"],[56],[2],57]],[1,"6aRR2b8iVNBpzbxUpQwnI9",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,5,[[3,0,-909,[0,"dbonk7GdRWgonGEGEUZVgt"],[58],[2],59]],[1,"b18E+IgFtIWpq5F4vQJevh",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,5,[[3,0,-910,[0,"dbonk7GdRWgonGEGEUZVgt"],[60],[2],61]],[1,"9d8CnqW1lH5pj7G1HRn10V",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[52,"Plane",2,13,[[19,"Plane<ModelComponent>",-911,[0,"e0uHCYkZ1D1I9glcT6oLf2"],[64],[2],65]],[1,"e4Rd1hULJGMrvy3SZgrcj0",1,0],[1,0,0.1,4.041]],[16,1,0,137,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,119,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],138],[26,8,69,[0,"469BNWXEBH1ZyZ0kbdzFHL"],138,217,[68,69,70],216],[5,"leftHandrail",2,15,[[3,0,-912,[0,"dbonk7GdRWgonGEGEUZVgt"],[77],[2],78]],[1,"40hSbeb4FMwZe4JIXKotql",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,15,[[3,0,-913,[0,"dbonk7GdRWgonGEGEUZVgt"],[79],[2],80]],[1,"fehHrKMrNNML9Ykfu9AHrI",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,15,[[3,0,-914,[0,"dbonk7GdRWgonGEGEUZVgt"],[81],[2],82]],[1,"1euiNvKqlORIgZGEaoQ5KQ",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,16,[[3,0,-915,[0,"dbonk7GdRWgonGEGEUZVgt"],[85],[2],86]],[1,"7cc0cSUmtAR7P7y8rx4vq1",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,16,[[3,0,-916,[0,"dbonk7GdRWgonGEGEUZVgt"],[87],[2],88]],[1,"eaNtimMb5D6pO4pP/TyZBd",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,16,[[3,0,-917,[0,"dbonk7GdRWgonGEGEUZVgt"],[89],[2],90]],[1,"ae5zGnCQBDBpkzLsJGqatK",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,17,[[3,0,-918,[0,"dbonk7GdRWgonGEGEUZVgt"],[93],[2],94]],[1,"dd7tmnsfJCo5gmyUELXzO/",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,17,[[3,0,-919,[0,"dbonk7GdRWgonGEGEUZVgt"],[95],[2],96]],[1,"b3Ofh7oZFK17xJHz99/G2B",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,17,[[3,0,-920,[0,"dbonk7GdRWgonGEGEUZVgt"],[97],[2],98]],[1,"00fwyvX6BMJ59MG/8F+cKU",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,18,[[3,0,-921,[0,"dbonk7GdRWgonGEGEUZVgt"],[101],[2],102]],[1,"f46Gj1JBdK97ewOu5sGPgs",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,18,[[3,0,-922,[0,"dbonk7GdRWgonGEGEUZVgt"],[103],[2],104]],[1,"6e2TeSXTpIFZHe0CTsSs9u",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,18,[[3,0,-923,[0,"dbonk7GdRWgonGEGEUZVgt"],[105],[2],106]],[1,"28gO4LocVEM7Tr715OdmOL",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,19,[[3,0,-924,[0,"dbonk7GdRWgonGEGEUZVgt"],[109],[2],110]],[1,"0d6axCDQhElZ8f2Du7TPNZ",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,19,[[3,0,-925,[0,"dbonk7GdRWgonGEGEUZVgt"],[111],[2],112]],[1,"ef9TgJD0RAO7u3blCJWaMG",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,19,[[3,0,-926,[0,"dbonk7GdRWgonGEGEUZVgt"],[113],[2],114]],[1,"bdLMRX67NNQ6s+9lQUcyOA",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,20,[[3,0,-927,[0,"dbonk7GdRWgonGEGEUZVgt"],[117],[2],118]],[1,"97WY3B+KpFdZD0XlDCgldC",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,20,[[3,0,-928,[0,"dbonk7GdRWgonGEGEUZVgt"],[119],[2],120]],[1,"355JawLUJHwbpVcheL78NL",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,20,[[3,0,-929,[0,"dbonk7GdRWgonGEGEUZVgt"],[121],[2],122]],[1,"c0bgyqOPRJaJBggyjUX+fO",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,21,[[3,0,-930,[0,"dbonk7GdRWgonGEGEUZVgt"],[125],[2],126]],[1,"73aloWmjtLJIzCuGcNdKxf",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,21,[[3,0,-931,[0,"dbonk7GdRWgonGEGEUZVgt"],[127],[2],128]],[1,"e1BVvxkplKf5OlC9KVA0YV",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,21,[[3,0,-932,[0,"dbonk7GdRWgonGEGEUZVgt"],[129],[2],130]],[1,"87tWyx9gdJALDilFTxu1fV",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,22,[[3,0,-933,[0,"dbonk7GdRWgonGEGEUZVgt"],[133],[2],134]],[1,"64JKlAWHpOj7/+AAcWD0MT",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,22,[[3,0,-934,[0,"dbonk7GdRWgonGEGEUZVgt"],[135],[2],136]],[1,"f92n+3Oj9DV5lAuEhlsBpo",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,22,[[3,0,-935,[0,"dbonk7GdRWgonGEGEUZVgt"],[137],[2],138]],[1,"ddlSQ1G7JMTZkGktX7CPuf",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,23,[[3,0,-936,[0,"dbonk7GdRWgonGEGEUZVgt"],[141],[2],142]],[1,"adaLE1LwNF5oC+K6kGQzeN",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,23,[[3,0,-937,[0,"dbonk7GdRWgonGEGEUZVgt"],[143],[2],144]],[1,"39cwyz3cZGLJMcA5Gira54",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,23,[[3,0,-938,[0,"dbonk7GdRWgonGEGEUZVgt"],[145],[2],146]],[1,"ace+KUjl1HbYECzreERznj",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,24,[[3,0,-939,[0,"dbonk7GdRWgonGEGEUZVgt"],[149],[2],150]],[1,"08DLdNehpPNJYuwiQY9V95",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,24,[[3,0,-940,[0,"dbonk7GdRWgonGEGEUZVgt"],[151],[2],152]],[1,"77KvPQIslN4IKPADcaqJIm",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,24,[[3,0,-941,[0,"dbonk7GdRWgonGEGEUZVgt"],[153],[2],154]],[1,"e6nAYamKpONo3cbKxwOzVy",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,25,[[3,0,-942,[0,"dbonk7GdRWgonGEGEUZVgt"],[157],[2],158]],[1,"a0Ww6kBNNEhIF1uBHfIsrb",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,25,[[3,0,-943,[0,"dbonk7GdRWgonGEGEUZVgt"],[159],[2],160]],[1,"9av9Q5GAhCFa/y1+7dEwn4",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,25,[[3,0,-944,[0,"dbonk7GdRWgonGEGEUZVgt"],[161],[2],162]],[1,"fcy7GZoKlEEL814ANCehjU",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,26,[[3,0,-945,[0,"dbonk7GdRWgonGEGEUZVgt"],[165],[2],166]],[1,"67Lom6vKNJvo77RWei9bx2",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,26,[[3,0,-946,[0,"dbonk7GdRWgonGEGEUZVgt"],[167],[2],168]],[1,"bf+0HKqXpNIb16Vsc/KoC4",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,26,[[3,0,-947,[0,"dbonk7GdRWgonGEGEUZVgt"],[169],[2],170]],[1,"2a1hizEsRLEraCnI8ljdgJ",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,27,[[3,0,-948,[0,"dbonk7GdRWgonGEGEUZVgt"],[173],[2],174]],[1,"3ejoQfyYlGt6pOPHl1mkg8",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,27,[[3,0,-949,[0,"dbonk7GdRWgonGEGEUZVgt"],[175],[2],176]],[1,"3fI35+LhxHkaPV6oY+/kZx",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,27,[[3,0,-950,[0,"dbonk7GdRWgonGEGEUZVgt"],[177],[2],178]],[1,"acwKlreEdL1Leyl3YvfPIM",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,28,[[3,0,-951,[0,"dbonk7GdRWgonGEGEUZVgt"],[181],[2],182]],[1,"2fZgTKRlZDOoIr84i6oqnj",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,28,[[3,0,-952,[0,"dbonk7GdRWgonGEGEUZVgt"],[183],[2],184]],[1,"acU6do8lhNrZ3ZFS0X64Lv",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,28,[[3,0,-953,[0,"dbonk7GdRWgonGEGEUZVgt"],[185],[2],186]],[1,"b1Hh8+NyhOTYlwIRWIcgm2",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,29,[[3,0,-954,[0,"dbonk7GdRWgonGEGEUZVgt"],[189],[2],190]],[1,"688XHrN41NLp6qfFlphL5s",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,29,[[3,0,-955,[0,"dbonk7GdRWgonGEGEUZVgt"],[191],[2],192]],[1,"86smg2+C5L/qABRSc6ujKZ",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,29,[[3,0,-956,[0,"dbonk7GdRWgonGEGEUZVgt"],[193],[2],194]],[1,"d4EqmBPFNAFZGe+Syln4KV",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,30,[[3,0,-957,[0,"dbonk7GdRWgonGEGEUZVgt"],[197],[2],198]],[1,"16UEPPVQxKjYpX6AGIt79w",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,30,[[3,0,-958,[0,"dbonk7GdRWgonGEGEUZVgt"],[199],[2],200]],[1,"08e62HzoxFCqqTG1UYG8h2",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,30,[[3,0,-959,[0,"dbonk7GdRWgonGEGEUZVgt"],[201],[2],202]],[1,"9eKeBBIO9EVpB0s+nI6hyc",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,31,[[3,0,-960,[0,"dbonk7GdRWgonGEGEUZVgt"],[205],[2],206]],[1,"9bmwn4GetGuZNnA9FMAYSw",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,31,[[3,0,-961,[0,"dbonk7GdRWgonGEGEUZVgt"],[207],[2],208]],[1,"bfm1MTKyhECaRJ1iNfvLE7",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,31,[[3,0,-962,[0,"dbonk7GdRWgonGEGEUZVgt"],[209],[2],210]],[1,"a6sr8WFxFDVac1cAvTxY15",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,32,[[3,0,-963,[0,"dbonk7GdRWgonGEGEUZVgt"],[213],[2],214]],[1,"3fkiqx6/pN8p+ggX6Njs25",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,32,[[3,0,-964,[0,"dbonk7GdRWgonGEGEUZVgt"],[215],[2],216]],[1,"8asmM0wipK/qmx9sMwmydD",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,32,[[3,0,-965,[0,"dbonk7GdRWgonGEGEUZVgt"],[217],[2],218]],[1,"2f0LFCu+dK4Y7lFdocWcT5",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,33,[[3,0,-966,[0,"dbonk7GdRWgonGEGEUZVgt"],[221],[2],222]],[1,"c0Mx96ZE1N8q2fdPvxF6Kx",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,33,[[3,0,-967,[0,"dbonk7GdRWgonGEGEUZVgt"],[223],[2],224]],[1,"47eNOXLyVHI6CxFk0617PA",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,33,[[3,0,-968,[0,"dbonk7GdRWgonGEGEUZVgt"],[225],[2],226]],[1,"8e4bd7XCRGjI42z2UTOduI",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,34,[[3,0,-969,[0,"dbonk7GdRWgonGEGEUZVgt"],[229],[2],230]],[1,"83CAbuLTVIq6eqdudbBg0B",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,34,[[3,0,-970,[0,"dbonk7GdRWgonGEGEUZVgt"],[231],[2],232]],[1,"6dcZSzEcFIH6nb+MhxcHBl",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,34,[[3,0,-971,[0,"dbonk7GdRWgonGEGEUZVgt"],[233],[2],234]],[1,"4ccfRfDX5ABLHmZOzilZHt",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,35,[[3,0,-972,[0,"dbonk7GdRWgonGEGEUZVgt"],[237],[2],238]],[1,"83Vxv+521HO4KiHUHraPo/",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,35,[[3,0,-973,[0,"dbonk7GdRWgonGEGEUZVgt"],[239],[2],240]],[1,"b1BUIWCxVIv5JNz6lMjq0c",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,35,[[3,0,-974,[0,"dbonk7GdRWgonGEGEUZVgt"],[241],[2],242]],[1,"47IIRqCORNwrtkfETQDKl7",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,36,[[3,0,-975,[0,"dbonk7GdRWgonGEGEUZVgt"],[245],[2],246]],[1,"d6lBk/sj5P1rE7WWsPHzcC",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,36,[[3,0,-976,[0,"dbonk7GdRWgonGEGEUZVgt"],[247],[2],248]],[1,"1c5rRoVx5FgJ92CgUDpPmH",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,36,[[3,0,-977,[0,"dbonk7GdRWgonGEGEUZVgt"],[249],[2],250]],[1,"19wvPzpNlKX6o1NayA6u2X",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,37,[[3,0,-978,[0,"dbonk7GdRWgonGEGEUZVgt"],[253],[2],254]],[1,"3aAZgE8VlPYr3cRfHXgMPl",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,37,[[3,0,-979,[0,"dbonk7GdRWgonGEGEUZVgt"],[255],[2],256]],[1,"fbAgvK9ztFVqmWnwuJGNf7",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,37,[[3,0,-980,[0,"dbonk7GdRWgonGEGEUZVgt"],[257],[2],258]],[1,"36k8SFS11CQ6ImiyYOEH4Y",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,38,[[3,0,-981,[0,"dbonk7GdRWgonGEGEUZVgt"],[261],[2],262]],[1,"61QqKZiI5JuoKbafn180aF",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,38,[[3,0,-982,[0,"dbonk7GdRWgonGEGEUZVgt"],[263],[2],264]],[1,"40obUWOmlMnp4D8G35iRDU",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,38,[[3,0,-983,[0,"dbonk7GdRWgonGEGEUZVgt"],[265],[2],266]],[1,"75Sc0mNgFDK4RX/6GlOi+S",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,39,[[3,0,-984,[0,"dbonk7GdRWgonGEGEUZVgt"],[269],[2],270]],[1,"47JESYWv1B2b1l4wG1DlFR",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,39,[[3,0,-985,[0,"dbonk7GdRWgonGEGEUZVgt"],[271],[2],272]],[1,"abffjzmR1FEbX67oXnmte4",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,39,[[3,0,-986,[0,"dbonk7GdRWgonGEGEUZVgt"],[273],[2],274]],[1,"fcMm3oKoNFNYfyY8T3O1Q2",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,40,[[3,0,-987,[0,"dbonk7GdRWgonGEGEUZVgt"],[277],[2],278]],[1,"d8ax8GG4JAjJt4KTBZTDfG",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,40,[[3,0,-988,[0,"dbonk7GdRWgonGEGEUZVgt"],[279],[2],280]],[1,"b8oO82CLpB4o7julhM/CBq",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,40,[[3,0,-989,[0,"dbonk7GdRWgonGEGEUZVgt"],[281],[2],282]],[1,"67Va0nlc5DGpDV4W9J9w/7",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,41,[[3,0,-990,[0,"dbonk7GdRWgonGEGEUZVgt"],[285],[2],286]],[1,"del5WQzXtOXLh07pOyYrMu",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,41,[[3,0,-991,[0,"dbonk7GdRWgonGEGEUZVgt"],[287],[2],288]],[1,"14i4qj8TRLo5eCcKMGxRhX",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,41,[[3,0,-992,[0,"dbonk7GdRWgonGEGEUZVgt"],[289],[2],290]],[1,"c0qAHX5ndPUrP94tbfnY3X",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,42,[[3,0,-993,[0,"dbonk7GdRWgonGEGEUZVgt"],[293],[2],294]],[1,"11ECbc5/RET7LdF5NUjt20",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,42,[[3,0,-994,[0,"dbonk7GdRWgonGEGEUZVgt"],[295],[2],296]],[1,"7d+CivLAlPi4evwlFhzGWW",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,42,[[3,0,-995,[0,"dbonk7GdRWgonGEGEUZVgt"],[297],[2],298]],[1,"4egLx4E11DJqUQ4hb0jjWC",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,43,[[3,0,-996,[0,"dbonk7GdRWgonGEGEUZVgt"],[301],[2],302]],[1,"f6LOl5uS9GMpM4ejOUujnQ",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,43,[[3,0,-997,[0,"dbonk7GdRWgonGEGEUZVgt"],[303],[2],304]],[1,"caL7Q3fMhJJ4CeO5eumh2m",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,43,[[3,0,-998,[0,"dbonk7GdRWgonGEGEUZVgt"],[305],[2],306]],[1,"beVq100WZIJqBnNoc2afch",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,44,[[3,0,-999,[0,"dbonk7GdRWgonGEGEUZVgt"],[309],[2],310]],[1,"2fpuaTHfFFma/hkegzQIJF",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,44,[[3,0,-1000,[0,"dbonk7GdRWgonGEGEUZVgt"],[311],[2],312]],[1,"3bq/iEZsdO5po4ultVH0bu",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,44,[[3,0,-1001,[0,"dbonk7GdRWgonGEGEUZVgt"],[313],[2],314]],[1,"3eZRJPNllDUr/LpQ8LoDtN",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,45,[[3,0,-1002,[0,"dbonk7GdRWgonGEGEUZVgt"],[317],[2],318]],[1,"91FeVVZIdKpaO/14Pm0H13",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,45,[[3,0,-1003,[0,"dbonk7GdRWgonGEGEUZVgt"],[319],[2],320]],[1,"004hEtv/lJP4Jrh+iXwdev",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,45,[[3,0,-1004,[0,"dbonk7GdRWgonGEGEUZVgt"],[321],[2],322]],[1,"24IfDuWpxJWKEZxei4ky1Y",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,46,[[3,0,-1005,[0,"dbonk7GdRWgonGEGEUZVgt"],[325],[2],326]],[1,"9fSs6BuD9Ok5nLJXJttGBy",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,46,[[3,0,-1006,[0,"dbonk7GdRWgonGEGEUZVgt"],[327],[2],328]],[1,"ff5Vk5gJ9LfYI4AjFoiQx+",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,46,[[3,0,-1007,[0,"dbonk7GdRWgonGEGEUZVgt"],[329],[2],330]],[1,"b6s130Z8FN0LGoeVUKeeBr",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,47,[[3,0,-1008,[0,"dbonk7GdRWgonGEGEUZVgt"],[333],[2],334]],[1,"f71z9tydZFoaqGd5N9H3d7",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,47,[[3,0,-1009,[0,"dbonk7GdRWgonGEGEUZVgt"],[335],[2],336]],[1,"0ezjEGEY9AFJgnaRwAHYp1",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,47,[[3,0,-1010,[0,"dbonk7GdRWgonGEGEUZVgt"],[337],[2],338]],[1,"ffOZoKjpNFe4Hl9ALJPAYh",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,48,[[3,0,-1011,[0,"dbonk7GdRWgonGEGEUZVgt"],[341],[2],342]],[1,"00O2g+XKtKhLbuIHkWrt5O",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,48,[[3,0,-1012,[0,"dbonk7GdRWgonGEGEUZVgt"],[343],[2],344]],[1,"a07aUfppxK05Dlg1LXd/6/",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,48,[[3,0,-1013,[0,"dbonk7GdRWgonGEGEUZVgt"],[345],[2],346]],[1,"eaLhJiqQBLU72zaTFIrp5V",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,49,[[3,0,-1014,[0,"dbonk7GdRWgonGEGEUZVgt"],[349],[2],350]],[1,"7a7u8SEdxIuoV08UpyO1qp",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,49,[[3,0,-1015,[0,"dbonk7GdRWgonGEGEUZVgt"],[351],[2],352]],[1,"e6oEO6CL1DKJXsImGGxIFt",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,49,[[3,0,-1016,[0,"dbonk7GdRWgonGEGEUZVgt"],[353],[2],354]],[1,"50vw7FMSJOiK0p0fCbPDcm",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,50,[[3,0,-1017,[0,"dbonk7GdRWgonGEGEUZVgt"],[357],[2],358]],[1,"719r4s3hxJA5E+SFJSyC2w",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,50,[[3,0,-1018,[0,"dbonk7GdRWgonGEGEUZVgt"],[359],[2],360]],[1,"1722K9gdlM5IFIBfkARg6Q",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,50,[[3,0,-1019,[0,"dbonk7GdRWgonGEGEUZVgt"],[361],[2],362]],[1,"2ek9112H5KwL3AAQVQAZPN",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,51,[[3,0,-1020,[0,"dbonk7GdRWgonGEGEUZVgt"],[365],[2],366]],[1,"4buh7VGZhML5mBQxS9e5Ek",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,51,[[3,0,-1021,[0,"dbonk7GdRWgonGEGEUZVgt"],[367],[2],368]],[1,"77quAGSxNOOYGZYgutpwXe",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,51,[[3,0,-1022,[0,"dbonk7GdRWgonGEGEUZVgt"],[369],[2],370]],[1,"a8NyeQvYZBfYB4AigYDf9O",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,52,[[3,0,-1023,[0,"dbonk7GdRWgonGEGEUZVgt"],[373],[2],374]],[1,"a9ANed1RlHBIH0add8DD0e",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,52,[[3,0,-1024,[0,"dbonk7GdRWgonGEGEUZVgt"],[375],[2],376]],[1,"77Bt+INrpAHLbHIjRk2UnR",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,52,[[3,0,-1025,[0,"dbonk7GdRWgonGEGEUZVgt"],[377],[2],378]],[1,"4aNuwVXytI55OgvEHQ6Igu",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,53,[[3,0,-1026,[0,"dbonk7GdRWgonGEGEUZVgt"],[381],[2],382]],[1,"daCtchHMhNVJLrfJWjQg2y",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,53,[[3,0,-1027,[0,"dbonk7GdRWgonGEGEUZVgt"],[383],[2],384]],[1,"adDqYwVXVCGohFhqmzayTB",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,53,[[3,0,-1028,[0,"dbonk7GdRWgonGEGEUZVgt"],[385],[2],386]],[1,"c5jpe+3GdJ4K4ExkHt5L/z",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[5,"leftHandrail",2,54,[[3,0,-1029,[0,"dbonk7GdRWgonGEGEUZVgt"],[389],[2],390]],[1,"97d1sofVBB/7sXgho+4OZW",1,0],[1,-0.45,0.2,0],[1,0.1,1,1]],[6,"leftHandrailV",2,54,[[3,0,-1030,[0,"dbonk7GdRWgonGEGEUZVgt"],[391],[2],392]],[1,"b2+qOtgiRBKp/rospgN+ZV",1,0],[1,-0.403,0.092,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,0.2,1,1],[1,0,0,-90]],[5,"rightHandrail",2,54,[[3,0,-1031,[0,"dbonk7GdRWgonGEGEUZVgt"],[393],[2],394]],[1,"2fXSt1vEZJc7y8r7VrpGft",1,0],[1,0.45,0.2,0],[1,0.1,1,1]],[16,1,0,140,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,120,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],141],[26,8,85,[0,"469BNWXEBH1ZyZ0kbdzFHL"],141,340,[427,428,429],339],[16,1,0,143,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,121,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],144],[26,7,86,[0,"469BNWXEBH1ZyZ0kbdzFHL"],144,343,[436,437,438],342],[16,1,0,146,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,122,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],147],[26,8,87,[0,"469BNWXEBH1ZyZ0kbdzFHL"],147,346,[445,446,447],345],[16,1,0,149,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,123,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],150],[26,7,88,[0,"469BNWXEBH1ZyZ0kbdzFHL"],150,349,[454,455,456],348],[16,1,0,152,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,124,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],153],[26,8,89,[0,"469BNWXEBH1ZyZ0kbdzFHL"],153,352,[463,464,465],351],[32,"left",512,2,3,[[11,"Cube<ModelComponent>",1,0,-1032,[0,"e8DOT5UJ1F/ZgplWYyCxRs"],[476],[2],477]],[1,"99NIuke4FBv4l7pz8oo0/x",1,0],[1,-1.6,0.75,0],[1,0.1,1.5,0.1]],[32,"right",512,2,3,[[11,"Cube<ModelComponent>",1,0,-1033,[0,"e8DOT5UJ1F/ZgplWYyCxRs"],[478],[2],479]],[1,"b45gNj5cZNL5zbRKHuyzts",1,0],[1,1.6,0.75,0],[1,0.1,1.5,0.1]],[16,1,0,155,[0,"36F3cOfT5GlayUcxikBeA/"]],[16,1,0,156,[0,"c6owLbqmhOTrDPu8XPAvOT"]],[32,"left",512,2,4,[[11,"Cube<ModelComponent>",1,0,-1034,[0,"e8DOT5UJ1F/ZgplWYyCxRs"],[482],[2],483]],[1,"4a5Gpa4rZGroMR3uxjS9LG",1,0],[1,-1.6,0.75,0],[1,0.1,1.5,0.1]],[32,"right",512,2,4,[[11,"Cube<ModelComponent>",1,0,-1035,[0,"e8DOT5UJ1F/ZgplWYyCxRs"],[484],[2],485]],[1,"09DWRhUiZLGLUsd0Ur7kmD",1,0],[1,1.6,0.75,0],[1,0.1,1.5,0.1]],[16,1,0,159,[0,"36F3cOfT5GlayUcxikBeA/"]],[16,1,0,160,[0,"c6owLbqmhOTrDPu8XPAvOT"]],[16,1,0,163,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,129,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],164],[26,3,92,[0,"469BNWXEBH1ZyZ0kbdzFHL"],164,363,[488,489,490],362],[16,1,0,166,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,130,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],167],[26,3,93,[0,"469BNWXEBH1ZyZ0kbdzFHL"],167,366,[497,498,499],365],[16,1,0,169,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,131,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],170],[26,3,94,[0,"469BNWXEBH1ZyZ0kbdzFHL"],170,369,[506,507,508],368],[16,1,0,172,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,132,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],173],[26,3,95,[0,"469BNWXEBH1ZyZ0kbdzFHL"],173,372,[515,516,517],371],[6,"floor76",2,1,[[3,0,-1036,[0,"dbonk7GdRWgonGEGEUZVgt"],[524],[2],525]],[1,"88aePmjeBLEYXbdDiBrpAj",1,0],[1,0,44.096,-196.657],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor77",2,1,[[7,-1037,[0,"dbonk7GdRWgonGEGEUZVgt"],[526],[2],527]],[1,"0fMKHUiS5NQakFypxmmrUb",1,0],[1,0,41.403,-204.944],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor78",2,1,[[7,-1038,[0,"dbonk7GdRWgonGEGEUZVgt"],[528],[2],529]],[1,"beAuIle2FJub9beLg9Njrr",1,0],[1,0,38.723,-213.193],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor79",2,1,[[7,-1039,[0,"dbonk7GdRWgonGEGEUZVgt"],[530],[2],531]],[1,"3aW/SpphVKzbjEYnqWuQZe",1,0],[1,0,28.31,-245.242],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor80",2,1,[[7,-1040,[0,"dbonk7GdRWgonGEGEUZVgt"],[532],[2],533]],[1,"238ETsk8VBBpuFOgO49zh7",1,0],[1,0,30.99,-236.993],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor81",2,1,[[7,-1041,[0,"dbonk7GdRWgonGEGEUZVgt"],[534],[2],535]],[1,"ab0fEefuNBu4r8czDB3RkH",1,0],[1,0,33.683,-228.706],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor82",2,1,[[7,-1042,[0,"dbonk7GdRWgonGEGEUZVgt"],[536],[2],537]],[1,"c6YKHu3F1ObbVHOe4PsnoC",1,0],[1,0,36.363,-220.457],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor84",2,1,[[7,-1043,[0,"dbonk7GdRWgonGEGEUZVgt"],[540],[2],541]],[1,"d0/mKjS8lKLpylZTroncYn",1,0],[1,0,13.896,-289.604],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor85",2,1,[[7,-1044,[0,"dbonk7GdRWgonGEGEUZVgt"],[542],[2],543]],[1,"5eNQKA9YZBybcG9v8OxFUt",1,0],[1,0,11.203,-297.891],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor86",2,1,[[7,-1045,[0,"dbonk7GdRWgonGEGEUZVgt"],[544],[2],545]],[1,"85z5ZRlrlHLIiFdC106wCK",1,0],[1,0,8.523,-306.14],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor87",2,1,[[7,-1046,[0,"dbonk7GdRWgonGEGEUZVgt"],[546],[2],547]],[1,"b1L8A2uP9BtoHZMXqc/S44",1,0],[1,0,18.936,-274.091],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor88",2,1,[[7,-1047,[0,"dbonk7GdRWgonGEGEUZVgt"],[548],[2],549]],[1,"19OEXceoBBbbaT7Rnd1IuZ",1,0],[1,0,21.616,-265.842],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor89",2,1,[[7,-1048,[0,"dbonk7GdRWgonGEGEUZVgt"],[550],[2],551]],[1,"2cfPb29ctFOagpZr+Xpwu4",1,0],[1,0,24.309,-257.555],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor90",2,1,[[7,-1049,[0,"dbonk7GdRWgonGEGEUZVgt"],[552],[2],553]],[1,"a4XGeRcy9JS4u+1J3LMPdD",1,0],[1,0,16.576,-281.355],[3,0.9876883405951378,0,0,0.15643446504023092],[1,8,0.9999999999999996,9],[1,162,0,0]],[6,"floor91",2,1,[[7,-1050,[0,"dbonk7GdRWgonGEGEUZVgt"],[566],[2],567]],[1,"2dl63fPIpKoLn+cMa1yE0x",1,0],[1,0.077,49.123,-190.999],[3,0.7071067811865475,0,0,0.7071067811865476],[1,8,1,7.4],[1,90,0,0]],[16,1,0,179,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,133,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],180],[26,8,103,[0,"469BNWXEBH1ZyZ0kbdzFHL"],180,390,[589,590,591],389],[16,1,0,182,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,134,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],183],[26,9,104,[0,"469BNWXEBH1ZyZ0kbdzFHL"],183,393,[598,599,600],392],[16,1,0,185,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,135,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],186],[26,9,105,[0,"469BNWXEBH1ZyZ0kbdzFHL"],186,396,[607,608,609],395],[16,1,0,188,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[14,true,136,[0,"f1/ol5bxdIZ4Ho5o5/qRxr"],189],[26,9,106,[0,"469BNWXEBH1ZyZ0kbdz{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[17,18],[32,33]]]]
