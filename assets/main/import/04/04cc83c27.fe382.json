[1,["57BQ23s0FN+6JX/OUVU1ev","91te6xzoRDMIcBZM3qClpN@f9941","285iy+n0tI9oc0MsMEPilO@f9941","9e2zwAHvhAU5k7LDo9giCD@f9941","dcUa9RKrlO7ro5e0IkK6im@f9941","a55lZYQLlI2LryqFRCHepy@f9941","624cO4LrNEQq6kBDQePaTi","558eOO0nJIsoCIv+mqORgv@f9941","d1TUMlltVF+6sAVKqgmBbx@f9941","14ti2sq4JBHYrWLd3sQeMf@f9941","aeF2lZEAdEWJDxO+Yfo/II@cf5ee","15vNT51Z1M16fV11jhbUNX@f9941","62A5rt0y9KY4PfiKFxfXcS@f9941","f5Xf8rF4JKHKNLSekopK8q","e1YglTZZ1AwLebbB4Bt938","5bdwpy/dVCF5pSqyS0qchl","39o08tZE5HAo1amGMJCgTs@f9941","72mkxS7lNE3YNVON9cZBov@f9941","55Q6taS9hE2bxiQ/LwijKn@f9941","2fKRVLKvlLqqO8Ymom4/u0@f9941","20g1ukYUVPvKWKBRznAKo+@f9941","ad96+UunlERptkWXJAkZ84@eb5d7","ad96+UunlERptkWXJAkZ84@438fe","47PPD5vYpEbrcQxEFTOHph@f9941","5bgflN6wRGloVxPeZGpsyL@f9941","2b0oacq1tCD7Ur8EQ01Nbk@6c48a","80OPYo0YdNKaBPzlb8lemF@f9941","7e0cRyr9NEdp7de8Slnso2","3anH+GEF1Pd5wjUJLDDn4f@f9941","59zUCelSBLh588b+5ZImfp@f9941","ab7bOkTFdHA4xqKC/mKL9U@f9941","0des6bniVDDJbCg4dD7tfP","52e/2ZHldHrJ7YpLr2g4Ku@f9941","3eqh7h8SdGE4ac9yQHKwIu","05iEES0XZAlbTjyHr7axo7@f9941","cfnWRIVERP+IH4CZNDWoOE@f9941","4bJT0Y4iJMZJ5oVjqcVWjT","81jMuBNh1GcLdSoCunvC5g@f9941","840BwRxlBKD5a+6RHEBg+b@f9941","6fbqSs8mlDw720uWtNeCvY","aeF2lZEAdEWJDxO+Yfo/II@1f586","3f1+DFjjVCL4pxDyrKktXx@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","cdHQTtFUBKMoNaZ4Xn0ryK","8dyJhSUZlDjITKPrDdxlKa@f9941","84tdCNLAROrpRmEaaiBD1J@f9941","d07e3DaMpNnKOKbteXxY85@f9941","e3RzT9QfhPi6wJFOza7lNG","4eRVmmGg5PO5YOtUccA1lM@f9941","a401oQRfZGV56OwYlkGx6l","4c2hPnqrRPjJeKbiWe56iw@f9941","37GpzSbMtMvKF3sUENp9sJ","a401oQRfZGV56OwYlkGx6l@0f3ba","7bZ3GFVARDGZxic3oqp8tb","1acLYgnWNGrJCQFRc+CVHO@f9941","4cq7VnKdpAkb/c4XDLCSqC","aeF2lZEAdEWJDxO+Yfo/II@6018c","aeF2lZEAdEWJDxO+Yfo/II@708ed","aeF2lZEAdEWJDxO+Yfo/II@ab1a3","60zL9t4PtEKqtw4+5iudRS","47jK7SvWlMPpJtByS5m1KP@f9941","fbqQv53fJEpJcQVqQtc5Zo@f9941","d244FY+ENJxaybQNV98pSc","871QY+OMxIl5b2NIMMFAMo@f9941","4cYTywPclNs7EbgguHQ+rg@f9941","b8KUaeaitJxYwRTM9/G9m4","57Q5XNxuZLgq9WoUJtVKNG@f9941","9cEFIF18RGabrJJhQxAVFB@f9941","bdG8q6vX1KcbFDmXyII4Pk@f9941","c8XmiQijtDLpr+g2JNOTKV@f9941","79mt5RHP5O8KyHZ7ugr9Wu@f9941","bcmupbaJxEEbWkKN8lCIG/@f9941","2fKm3xNalDTLVXBu28O0BX","dcXgZBgvNGAL0B4QSGeten","48jnbU5CBGtoUQRBYMaGdU@f9941","e0qxdm2stHZYysBrD54JQn","1110zF73lBFJAByb9Ff+CR@f9941","5cJtpmyktLLLmWW5rsP3oI","64uuiS9eBHP5mUPdnaBtGC@f9941","11vcSwZKhOt6Knn7niM+l3@f9941","7cYOjD8HRF1ZsCA0tYGnTu@f9941","d1cEdKSIhAz6E9TOpZLYx2@f9941","72pSoqV2pPFKDQOq91JNL/","912tHpcNxNRJFJOu1vom6+","1aYndIgUVG+o4BxrthRr9M@6c48a","24J1dU5TBD842uFyj2/mkQ@6c48a","20b6/l3ftEz6I7aYGL/BZS@6c48a","262hfF0h9Hz6GzQNuQUdzM","d9R1CN9AdNeYXKO1XchUO9@f9941","ccllWod4JPX7zw76+YreD6@f9941","92L4K0CgVB3Zq7ipebOvtT@f9941","56G8R526xFzbzcp7ApKX6r@f9941","6csJ7aIPZPh7BDoKbw7MXg@f9941","57zmdwwF1AWbRu0y4JgVIc@f9941","a3NuC022xHfLuelxwmTPV1@f9941","8bQpKLSf9GTpq/qu8p76BO@f9941","1dbtFjFi5OFoZUhv8KSQj6@f9941","70Gpf8NXNOsoc42JwRh/+8@f9941","deggsv9iJLXoTpgwZJwviY","dcJTfqvjxCj5QGvLoeoD/v","dcC8X0AaVC67AD+WWuyfVt@f9941","b8UMVSRBNAI4hb0RKw1Xrt","06/P3AbAJIQYsqZKZ/fEnR","cdhfcoPzFAgoaZZV13DWFr","ddoaL6jGRBF4Ks7+n09Vx3","ac/hpAKJ9Mc6iqu3u65jop","deMbQ+6k5C0ZO9RKke/e/3@f9941","20ihqcglVFhJUm2oEq10Hi@f9941","3dg/PSNRtIK4gWhIEOMnwZ@f9941","b0HFby4IJFYpXU8EogOfQP@f9941","fa1fJgV6NO87asou80MK7z@f9941","d1NGQ2rJZCcbhjH0/erZWw","fffDcpdfVFOqQkd4xItUK+@f9941","bcO8cwCe1PFr3vcO4JvbJS@f9941","24J1dU5TBD842uFyj2/mkQ@f9941","2bUMgHyWVHxIzHzZxpL7Lp@f9941","28p44BAjdDKpyjN/k3ySxQ@f9941","1aYndIgUVG+o4BxrthRr9M@f9941","e58agv8xFKd7p3EV5Xg5Nx@f9941","89SXmcfRlISroMy1ZZdzFm@f9941","10IrcjOs1JrqvfF9zzsakT@f9941","d5C6CbMqZHGI/KrXKPj+Ps@f9941","13rCA+/GJO7LD947IdUPfV@f9941","aarTLs4SlDT4rqpH+6Z64X@f9941","24JGjrb2NP9owTRhTUnPYC@f9941","e2ip8aqyRMg6s88JOXqgoE@f9941","d0fAvt/nhPH4ajOJPg21Xe@f9941","efTwOG/JBIxr2KSkEIx4S5@f9941","06uvxhRaRM2I6tXLTYt6Tt@f9941","f1SlnSZklJq4JGMVDXAWrJ@f9941","0cPkUX9EJMJKjGqzFBM8aW@f9941","22pEnbjlJON4bjUvmAKQ3+","4aeq/TLRBL04RVM3i84hGA@f9941","98BYQLjtVHF7O3ZXy6sRGj@f9941","cf6a9ttapKOrvxUb8Ya3Y2@f9941","563VKndq1Bm5fX13D+K3Nb@f9941","10QRO6D2tFl5ROquDaNrs1@f9941","a3m/EmCktOxL+4Wss1oC0K@f9941","ba8PKXa0JIDqO4yuf86OJU@f9941","7dtaJbHuRMsaKnsK0XTprw","e0qx+gOfFMA6xmQ2wx8733","f5pqYEml5F8qS8DqtF8cOO","60MXJwYQRNTZGszTfCmt4R","b39EM9QuVJJIu6FSqSPKw3","aeF2lZEAdEWJDxO+Yfo/II@eb5d7","aeF2lZEAdEWJDxO+Yfo/II@438fe","6592M4T31BK7xH2DYzVSsw","cbDb2zJ3JE7LQMi+khvkR8","17t8ACU3dPM5uBXPivMcde","59F0smTZ1DdaLASZiSI1Qi","b8mFMGq6lNpJIUNRdfJLmz","89igdqpbVPApytdXcQPsdX","8bLdUJccFGqpooT2leUUDY","41xhrqT9JCHYcB7lhAMzNk","39cWwI4xdFupH3FIi5OfrE@9a84c","e6JCyOE/NP9rpk55H1+kYo@f9941","8cUjCBIvdBE4w3pMe0TwEM@6c48a","8e8XahgvpA6YNbTdn/ao0p@6c48a","a6fwALc+9FuJEhlCavLiQw","c2LtRaKhdOjKh4FfFwZuUd@6c48a","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","9cuubMSgFA8ZmT9iByFxMf","a1SMJWrTFCAJgXMZo6MfME@eb5d7","37MoUB6jtDzaGfJTPygruk","90RoEooepD/ZdEWqJYbhaU","bdSQsBy7FNMJeg1R8agh7Z","03MHfvErtNNq4bTEI7+IIM@f9941","e5WLQcVtxOQ4Eg53ITnmGU@f9941","0bC6gy6eJLEq2+xeH0tinl@f9941","24KRz5zTlP7J+hBP2aPQXe@f9941","e4/PYYbx5HDKz3mSTBS05V","75O1fadvFDuK+JrTyuqKPH","4749VPQppA0Zgu2Ol9xtFN","ecRed2LkpHdLt/ZFIuehi5@f9941","bcO8cwCe1PFr3vcO4JvbJS@6c48a","bdG8q6vX1KcbFDmXyII4Pk@6c48a","46HleC6LVAS4n3YsDt56/p@f9941","6dtLXsg8FHT7qoGUX0txXS@6c48a","1eb558NhJByLVlFtALM6oK@f9941","deMbQ+6k5C0ZO9RKke/e/3@6c48a","8e8XahgvpA6YNbTdn/ao0p@f9941","8cUjCBIvdBE4w3pMe0TwEM@f9941","e8N8g23gtOopDPzhI8KrDo@6c48a","a75A0r3GJGgZAs7seYmW54@6c48a","93Jlzz7UtGqYZbJjaKebZH","ecRed2LkpHdLt/ZFIuehi5@6c48a","fa1fJgV6NO87asou80MK7z@6c48a","fffDcpdfVFOqQkd4xItUK+@6c48a"],["node","_spriteFrame","_font","_parent","_normalSprite","_target","target","root","_defaultClip","data","_textureSource","animation","_mesh","_effectAsset","_customMaterial","_skeleton","desLabel","videoIcon","_hoverSprite","_pressedSprite","_disabledSprite","tryOutHeroCtrl","bar","striscaleTexture","icon","_particleSystem","_mainTexture","spriteFrame","source","labelNode","content","itemPrefab","redNode","rewardLabel","tickCtrl","progressTick","title","atlas","mainTexture","finger","diamondIcon","bottomLabel","bufferLabel","meshRenderer","_material","asset","closeNode","image","market","toggle","strictNode","resetNode","rebornNode","_content","singleButton","videoButton","arrow","diamondNode","videoDiamondTick","totalDiamondTick","diamondBufferTick","baseDiamondTick","bulletTick","orangeNode","barTick","orangeFont","pagePrefab","interstitialLayerPrefab","pinkLabel","rightFootNode","leftFootNode","headNode","desSpr","_cameraComponent","iconItemCtrl","blockAd","_placeholderLabel","_textLabel","bulletContainer","canvasCtrl","gameCameraCtrl","scene","countCtrl","servantContainerCtrl","rigidBody","playPageCtrl","mainPageCtrl","touchForShotCtrl","touchForMoveCtrl","canvas","test","remainLabel","moreGameLayerPrefab","_backgroundImage","recordFrameOn","recordFrameOff","desOn","desOff","servantBulletPrefab","privacyLayerPrefab","servantPrefab","redFrame","orangeFrame","failedPagePrefab","resultPagePrefab","loadingPagePrefab","tryOutPagePrefab","tryOutPageWithNativeNdePrefab","freeForeverPagePrefab","versionLabel","light","videoIconNode","imageBg","secondTexture"],[["cc.Node",["_name","_layer","_active","_id","_objFlags","_lpos","_parent","_components","_children","_prefab","_lscale","_lrot","_euler"],-2,5,1,12,2,4,5,5,5],["cc.Node",["_name","_layer","_active","_id","_objFlags","_components","_parent","_lpos","_children","_prefab","_lscale","_lrot","_euler"],-2,9,1,5,2,4,5,5,5],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","_fontSize","_lineHeight","_enableWrapText","_overflow","_horizontalAlign","_verticalAlign","_name","_cacheMode","node","__prefab","_font","_color"],-8,1,4,6,5],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","_name","node","__prefab","_spriteFrame","_color"],-1,1,4,6,5],["cc.Widget",["_alignFlags","_alignMode","_originalWidth","_originalHeight","_left","_bottom","_right","_top","_enabled","node","__prefab","_target"],-6,1,4,1],"cc.SpriteFrame",["cc.Button",["_transition","_name","node","clickEvents","__prefab","_normalSprite","_normalColor","_target","_hoverSprite","_pressedSprite","_disabledSprite","_pressedColor"],1,1,9,4,6,5,1,6,6,6,5],["cc.UITransform",["_name","node","_contentSize","__prefab","_anchorPoint"],2,1,5,4,5],["cc.Node",["_name","_layer","_id","_components","_parent","_lpos","_lrot","_euler","_lscale","_children","_prefab"],0,2,1,5,5,5,5,2,4],["cc.AnimationClip",["_name","_duration","_hash","_keys","wrapMode","events","sample","speed","_curves"],-5,12],["cc.Animation",["playOnLoad","_name","node","_clips","__prefab","_defaultClip"],1,1,3,4,6],["edafcvfa0xMpJSm5mai9wUN",["withAction","prefix","decimalPlaces","suffix","node","label","__prefab"],-1,1,1,4],["faf88osOxpFE6Fi2MBDukiX",["prefix","node","label","__prefab"],2,1,1,4],["cc.CurveRange",["constant","mode","curve"],1,4],["cc.Camera",["_far","_visibility","_projection","_orthoHeight","_priority","_clearFlags","_fov","_fovAxis","node","_color"],-5,1,5],["cc.Toggle",["node","__prefab","_normalColor","_target","_checkMark","_normalSprite","checkEvents"],3,1,4,5,1,1,6,9],["cc.Node",["_name","_layer","_parent","_children","_lpos","_lrot","_euler","_prefab"],1,1,9,5,5,5,4],["cc.PrefabInfo",["fileId","targetOverrides","root","asset"],1,1,1],["cc.PrefabInfo",["fileId","targetOverrides","root","instance","asset"],2,9,1,4,6],["cc.Layout",["_resizeMode","_layoutType","_spacingY","_spacingX","_affectedByScale","_enabled","_verticalDirection","node","__prefab"],-4,1,4],["cc.SkinnedMeshRenderer",["_shadowCastingMode","_shadowReceivingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],1,1,4,3,4,1,6,6],["cc.SkeletalAnimation",["_useBakedAnimation","node","__prefab","_clips","_sockets","_defaultClip"],2,1,4,3,9,6],["cc.ProgressBar",["_totalLength","_progress","node","_barSprite","__prefab"],1,1,1,4],["cc.Material",["_states","_defines","_techIdx","_props"],0,12],["9fcaeFdScVAPq/ZN04eTrKT",["node","tickCtrl","__prefab"],3,1,1,4],["cc.GradientRange",["_mode","colorMin","colorMax"],2,5,5],["cc.Keyframe",["value","time"],1],["cc.BoxCollider",["node","_center","_size","_material","__prefab"],3,1,5,5,6,4],["fcb64FjYGBHO7eu+GWa4t8b",["node","__prefab"],3,1,4],["cc.PrefabInstance",["fileId","propertyOverrides","removedComponents"],2,9,9],["cc.RigidBody",["_group","_allowSleep","node","_angularFactor","__prefab"],1,1,5,4],["cc.MeshRenderer",["_name","_shadowReceivingMode","node","__prefab","_materials","lightmapSettings","_mesh"],1,1,4,3,4,6],["2b2296Um4ZH65mFE/cJnWQD",["inActionName","outActionName","hadNativeNode","node","__prefab","animation","tryOutHeroCtrl","videoIcon","labelNode"],0,1,4,1,1,1,1],["cc.animation.ComponentPath",["component"],2],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["cfc21cbsfhHa7NTt68qCNzQ",["inActionName","outActionName","node","__prefab","animation","rebornNode","resetNode","strictNode"],1,1,4,1,1,1,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.ScrollView",["bounceDuration","brake","horizontal","node","__prefab","_content"],0,1,4,1],["0ac3aAywF1Bm5YPeA+Jl2sP",["itemScale","node","__prefab","content","itemPrefab"],2,1,4,1,6],["cc.Mask",["node","__prefab"],3,1,4],["41bdcExNUFI6I4EIldzHxH9",["inActionName","outActionName","itemScale","node","__prefab","animation","content","itemPrefab"],0,1,4,1,1,6],["cc.Mesh",["_native","_dataLength","_hash","_struct"],0,11],["95bf3WUZWROZYJq7QqlWvUM",["inActionName","outActionName","node","__prefab","animation","tryOutHeroCtrl"],1,1,4,1,1],["bf6e5PJzs1H/p9bKiZfHTQ/",["node","__prefab","desLabel","bar","rewardLabel","buttonNode","redNode"],3,1,4,1,1,1,1,1],["cc.ModelLightmapSettings",[],3],["cc.UIMeshRenderer",["node","__prefab"],3,1,4],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["ed47euPJdlFV6qv48zt/H1e",["node","__prefab","headNode","leftFootNode","rightFootNode","animation"],3,1,4,1,1,1,1],["cc.Material",["_props","_states","_defines"],0],["cc.EffectAsset",["_name","shaders","techniques"],0],["9081fsbKhBCHo++BAo/6RzJ",["inActionName","outActionName","node","animation","bulletTick","baseDiamondTick","diamondBufferTick","totalDiamondTick","videoDiamondTick","diamondNode","arrow","videoButton","singleButton","interstitialLayerPrefab"],1,1,1,1,1,1,1,1,1,1,1,1,6],["d86026tbD1HWITkFBBNqK1a",["inActionName","outActionName","node","animation","icon","title","progressTick","barTick","orangeNode","atlas","orangeFont","pagePrefab"],1,1,1,1,1,1,1,1,6,6,6],["13654yVfs9EpYJ26ox12U8g",["node","__prefab","progressBar"],3,1,4,1],["cc.animation.HierarchyPath",["path"],2],["cc.ParticleSystem",["duration","loop","playOnAwake","_capacity","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],-1,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4],["cc.Burst",["count"],3,4],["cc.ColorOvertimeModule",["color"],3,4],["cc.ShapeModule",["_enable","_shapeType","radius","arcSpeed"],0,4],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.AnimationCurve",["preWrapMode","postWrapMode","keyFrames"],1,9],["cc.VelocityOvertimeModule",["x","y","z","speedModifier"],3,4,4,4,4],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.RotationOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.ParticleSystemRenderer",["_mainTexture"],3,6],["cc.PhysicsMaterial",["_friction","_rollingFriction","_spinningFriction","_restitution"],-1],["cc.BitmapFont",["_name","fontSize","fntConfig"],0],["cc.SceneAsset",["_name"],2],["237b95ya6BBpbsoCDtMeDCi",["node","diamondNodes","pinkLabel","bar"],3,1,2,1,1],["e5038wqFtlGmqAg64qqMWyM",["node","bufferLabel","bottomLabel","diamondIcon","videoIcon","finger"],3,1,1,1,1,1,1],["ba407U1NF5FQpmHLyOlzDoy",["node","bufferLabel","bottomLabel","diamondIcon","videoIcon","finger"],3,1,1,1,1,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo"],2,1,1,4],["cc.TargetInfo",["localID"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_type","_enabled","_autoAdapt","_orthoSize","_maxReceived","_shadowColor","_size"],-2,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",["_fogColor"],3,5],["cc.SphereCollider",["_radius","node","_center","_material"],2,1,5,6],["5dad72HeoNCYJca/sLZ4H5O",["node","headNode","leftFootNode","rightFootNode"],3,1,1,1,1],["0df84Vf/yxLfqhm46KHnl2N",["node","icon","desSpr","recordFrameOn","recordFrameOff","desOn","desOff"],3,1,1,1,6,6,6,6],["cc.Canvas",["node","__prefab","_cameraComponent"],3,1,4,1],["85673ietp1EcpYkPSnEZqAg",["node","bodyNode"],3,1,1],["cc.RenderRoot2D",["node"],3,1],["5ec1eYnV3tHP5BsQgZwUMNo",["node","iconItemCtrl","moreNode","moreGameLayerPrefab"],3,1,1,1,6],["b0831EECZ1GCa25FhoK6vWx",["node","appBoxNodeButton","blockAd"],3,1,1,1],["3d2b7Ew4wNIDKmEqo2SRg1s",["node"],3,1],["cc.EditBox",["_inputMode","_maxLength","node","__prefab","_textLabel","_placeholderLabel","_backgroundImage"],1,1,4,1,1,6],["7a49bJDTNFPfY+rB/Vjw9dY",["heroNode"],3,1],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["51ee4GdB+1J64mcF3jQlvVf",["node"],3,1],["286bfIkmDpFzq58BP+QNlS0",["node","cameraNode","heroCtrl","meshRenderer"],3,1,1,1,1],["cc.DirectionalLight",["node","_staticSettings"],3,1,4],["cc.StaticLightSettings",[],3],["d7db84DNoFDUJJeh3885BK8",["node","followNode"],3,1,1],["e01efUJIetH+oTsT5LERbyp",["node","heroCtrl","gameCameraCtrl","servantContainerCtrl","canvasCtrl","bulletContainer","servantBulletPrefab","privacyLayerPrefab"],3,1,1,1,1,1,1,6,6],["dab79w9GbVNOK63FZMIi2et",["node","countLabel","countLabelTick","frames","sprite"],3,1,1,1,3,1],["93448mVSGBBa7cP7/sZFCXh",["node","hero"],3,1,1],["f249bSTKM1FbbtEsFHyLKdS",["node"],3,1],["142abQL0GNGJ5t3rDlZD6cK",["node","heroCtrl","tipNode"],3,1,1,1],["a710bVyc0hA3Jjf44p56Sde",["node","collimatorSpr","tipNode","frames","camera","clickButtonNode","progressFatherNode","bar"],3,1,1,1,3,1,1,1,1],["b482dH9f2NMMaZve+RJMsy6",["node","icon","nameLabel","markSprite","markLabel"],3,1,1,1,1,1],["5fd073HJd1IPKckadpjRp94",["animation","node","leftNode","rightNode","diamondNode","keyNodes","pickedKeyNodes","redPoints"],2,1,1,1,1,1,2,2],["037b7Gk2CtKC4Fc8I7gvO66",["node"],3,1],["82c10U7h0lFsaqQu1wAGXb3",["animation","node","diamondLabelTick","diamondNode","lvLabel","progressNode","keysNode","pickKeyNodes","cannonNode","remianServantLabel","remianServantIcon","bigDiamondLabel"],2,1,1,1,1,1,1,2,1,1,1,1],["cf976+XzfJAU4ajsnfWsp5o",["node","particlePrefabs"],3,1,3],["608d23jf09O/5b/8Q9DfFBD",["imageBg","imageHeight","node","__prefab","market","image","desLabel","closeNode"],1,1,4,1,1,1,1],["2d8ebp9/xRLu5DGrBhwU211",["node","__prefab","mats"],3,1,4,3],["1ab4fASbjNMCKBoEJxuIruS",["outActionName","node","__prefab","animation","versionLabel","progressTick"],2,1,4,1,1,1],["328e0Pom4pKn71gHc360hD0",["inActionName","outActionName","node","__prefab","animation","icon","light","toggle","atlas"],1,1,4,1,1,1,1,6],["814e1lx2r1IRapPQtugo5Bi",["labelOffsetY","node","__prefab","toggle","videoIconNode","labelNode"],2,1,4,1,1,1],["554b51zoFVA3KqKGrMb8+x9",["node","title"],3,1,1],["5ded5voDw9Lw6Cqxtlxg7CC",["node","imageBg","market","image","desLabel","closeNode"],3,1,1,1,1,1,1]],[[35,0,2],[17,0,2,3,2],[7,1,3,2,1],[7,1,2,1],[13,1],[1,0,1,6,5,7,3],[3,4,5,6,1],[38,0,1,2,3],[1,0,1,6,5,9,7,3],[3,4,6,1],[0,0,1,6,8,9,5,11,12,3],[3,1,0,4,5,6,3],[0,0,1,6,8,5,11,12,3],[55,0,2],[13,0,2],[1,0,1,6,8,5,7,3],[0,0,1,6,7,9,5,3],[1,0,1,6,8,5,9,7,3],[0,0,1,6,9,5,3],[16,0,1,2,3,7,4,5,6,3],[33,0,2],[1,0,1,6,5,9,3],[7,1,3,2,4,1],[3,0,4,5,6,2],[6,0,2,3,5,2],[34,0,2],[36,0,1,1],[0,0,1,6,7,5,3],[1,0,1,6,5,9,7,10,3],[1,0,1,6,5,7,10,3],[7,0,1,3,2,2],[48,0,1,2],[0,0,1,6,5,3],[16,0,1,2,3,4,5,6,3],[3,0,4,6,2],[2,0,1,3,4,2,11,13,6],[0,0,1,8,7,9,3],[0,0,1,6,9,5,11,12,3],[6,0,2,4,3,6,7,5,2],[1,0,1,6,8,5,9,3],[1,0,1,8,5,9,7,3],[3,1,0,4,5,3],[77,0,2],[1,0,1,6,5,3],[6,0,2,4,3,5,2],[6,2,4,3,5,1],[6,1,0,2,4,3,6,7,5,3],[2,0,1,3,4,2,11,12,13,6],[2,0,1,2,11,12,13,4],[46,1],[9,0,1,2,3,5,8,6],[0,0,1,8,9,5,11,12,3],[1,0,1,6,8,5,9,7,10,3],[3,1,4,5,6,2],[3,3,1,0,4,5,6,4],[3,1,0,4,6,3],[10,0,2,3,5,2],[25,0,1,2,2],[25,1],[0,0,1,6,8,7,5,3],[1,0,1,5,9,7,3],[1,0,2,1,6,8,5,7,4],[4,0,2,3,1,9,10,5],[3,0,2,4,5,6,3],[2,9,0,1,3,4,5,2,11,12,13,8],[10,1,2,4,3,2],[23,0,1,3,3],[95,0,1,2,2],[0,0,1,8,5,11,12,3],[1,0,2,1,6,8,5,9,7,4],[1,0,1,8,5,7,3],[7,1,2,4,1],[7,1,1],[3,0,2,4,5,3],[3,4,5,1],[6,0,2,4,3,6,7,5,8,9,10,2],[2,0,8,1,4,2,11,12,13,6],[2,0,1,3,4,2,11,12,6],[2,0,1,3,2,11,13,5],[10,2,4,3,1],[20,0,1,2,3,4,5,6,7,8,3],[21,0,1,2,3,4,2],[22,0,1,2,4,3,3],[9,0,6,4,1,2,3,8,7],[0,0,1,6,8,9,5,3],[0,0,1,6,7,9,5,10,3],[0,0,2,1,6,8,7,4],[0,0,1,6,7,5,10,3],[0,0,1,6,5,11,12,3],[1,0,2,1,6,5,9,7,4],[1,0,2,1,6,8,5,9,7,10,4],[1,0,1,8,5,9,3],[1,0,1,6,5,9,7,11,12,3],[8,0,1,4,9,3,10,5,6,8,7,3],[8,0,1,3,10,5,6,8,7,3],[8,0,1,4,3,5,3],[4,0,2,3,9,10,4],[4,0,4,1,9,10,4],[4,0,9,10,2],[6,0,2,4,3,2],[2,0,1,3,4,6,2,11,12,7],[2,0,1,3,2,11,12,5],[2,0,1,3,5,2,11,12,13,6],[2,0,1,6,5,2,11,6],[2,0,1,3,4,11,12,5],[10,0,2,4,3,5,2],[47,0,1,1],[49,0,1,2,3,4,5,1],[51,0,1,2,4],[56,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,5],[13,1,2,2],[57,0,1],[58,0,1],[59,0,1,2,3,4],[60,0,1,2,3,4,2],[61,0,1,2,3],[26,0,2],[26,1,0,3],[62,0,1,2,3,1],[63,0,1,2,1],[64,0,1,2,3,1],[65,0,1,2,1],[66,0,1,1],[67,0,1,2,3,4,1],[68,0,1],[70,0,1,2,4],[76,0,1,2,3,2],[9,0,4,1,2,3,8,6],[0,0,1,8,7,9,5,10,3],[0,0,2,1,6,8,7,9,5,4],[0,0,1,6,8,7,9,5,3],[0,0,2,1,6,7,9,5,4],[0,0,1,6,8,5,3],[0,0,2,1,6,7,5,4],[1,0,2,1,8,5,7,4],[1,0,1,3,6,5,4],[7,1,3,1],[4,0,2,3,9,4],[4,0,2,3,1,9,11,5],[4,0,5,9,3],[4,0,4,1,9,11,4],[4,0,6,1,9,4],[4,8,0,4,7,9,10,5],[3,1,0,2,4,5,6,4],[3,1,0,4,3],[3,1,0,4,5,7,6,3],[18,0,2,3,4,2],[6,2,4,3,6,7,5,1],[39,0,1,2,3,4,5,4],[19,0,1,3,2,4,7,8,6],[2,0,1,2,11,12,4],[2,0,1,3,4,5,2,11,12,13,7],[2,0,1,4,6,2,11,6],[2,0,1,3,4,5,2,11,7],[2,0,1,3,4,2,11,14,6],[2,0,7,1,3,4,6,5,11,12,14,8],[2,0,1,3,2,11,12,14,13,5],[41,0,1,1],[43,0,1,2,3,4],[45,0,1,2,3,4,5,6,1],[22,0,1,2,3,3],[12,1,3,2,1],[12,0,1,3,2,2],[11,0,4,5,2],[54,0,1,2,1],[86,0,1,2,1],[94,0,1,2,3],[15,0,1,2,3,5,1],[9,0,7,4,1,2,3,8,7],[9,0,1,2,3,8,5],[0,0,2,1,8,7,4],[0,0,4,1,3,8,7,5,5],[0,0,1,3,6,8,7,5,4],[0,0,2,1,8,7,5,10,4],[0,0,4,1,6,8,7,5,11,10,12,4],[0,0,2,1,6,8,7,5,4],[0,0,1,6,7,10,3],[0,6,9,1],[0,0,4,1,3,6,7,5,11,12,5],[0,0,1,7,5,3],[0,9,1],[0,0,1,3,6,4],[0,0,1,6,7,9,3],[0,0,1,6,8,7,9,3],[0,0,1,6,8,7,9,5,10,3],[0,0,2,1,6,8,7,9,5,10,4],[1,0,2,6,8,5,9,7,3],[1,0,2,1,6,5,9,7,10,4],[1,0,2,1,6,8,5,7,10,4],[1,0,2,1,3,6,8,5,7,5],[1,0,2,6,8,5,3],[1,0,4,2,1,8,5,7,11,10,12,5],[1,0,4,1,6,5,7,4],[1,0,2,1,6,5,7,4],[1,0,4,1,6,5,4],[1,0,6,5,7,2],[1,0,1,3,6,5,7,11,12,4],[1,0,1,5,9,10,3],[1,0,1,8,5,9,7,10,3],[8,0,1,4,9,3,6,8,7,3],[8,0,1,2,4,3,5,6,7,4],[8,0,1,2,4,3,4],[4,0,1,9,3],[4,0,2,3,1,9,5],[4,0,4,1,9,4],[4,0,4,5,9,10,4],[4,0,4,6,7,5,2,3,1,9,10,9],[3,4,5,7,6,1],[3,1,0,2,4,5,4],[3,0,2,4,6,3],[3,1,2,4,5,6,3],[3,1,0,2,4,6,4],[3,4,1],[3,0,4,5,2],[37,0,1,2,3,4,5,6,7,3],[17,0,1,2,3,3],[18,1,1],[6,2,4,3,11,5,1],[40,0,1,2,3,4,2],[19,5,0,1,2,6,7,6],[2,0,1,3,2,11,12,13,5],[2,0,1,6,5,2,11,12,6],[2,0,1,3,4,2,10,11,12,7],[2,0,1,3,6,5,11,12,14,6],[2,0,1,12,14,3],[2,0,1,3,4,6,5,11,12,7],[2,0,1,2,11,4],[2,0,7,1,3,6,5,11,12,7],[2,0,7,1,3,6,5,11,12,14,7],[2,0,1,2,11,12,14,13,4],[2,0,7,8,1,3,4,2,11,12,13,8],[2,0,7,1,3,4,2,11,12,13,7],[2,0,7,8,1,4,2,11,12,7],[10,2,3,5,1],[42,0,1,2,3,4,5,6,7,4],[44,0,1,2,3,4,5,3],[20,0,1,2,3,4,5,6,3],[21,0,1,2,3,5,2],[23,2,0,1,3,4],[50,0,1,2,4],[52,0,1,2,3,4,5,6,7,8,9,10,11,12,13,3],[24,0,2,1,1],[24,0,1,1],[53,0,1,2,3,4,5,6,7,8,9,10,11,3],[12,1,2,1],[11,4,6,5,1],[11,1,2,4,6,5,3],[11,3,0,4,6,5,3],[69,0,1,2,3,5],[71,0,2],[72,0,1,2,3,1],[73,0,1,2,3,4,5,1],[74,0,1,2,3,4,5,1],[75,0,1,2,3,2],[78,0,1,2,3,1],[79,1],[80,0,1,2,3,4,5,6,6],[81,1],[82,0,1],[27,0,1,2,3,1],[27,0,4,1,2,1],[83,0,1,2,3,2],[84,0,1,2,3,1],[85,0,1,2,3,4,5,6,1],[28,0,1],[28,0,1,1],[87,0,1,1],[88,0,1],[89,0,1,2,3,1],[90,0,1,2,1],[91,0,1],[92,0,1,2,3,4,5,6,3],[93,0,1],[29,0,1,2],[29,0,1,2,2],[96,0,1],[97,0,1,2,3,1],[98,0,1,1],[99,1],[100,0,1,1],[14,2,3,0,1,8,9,5],[14,4,6,7,0,5,1,8,7],[14,2,4,3,0,5,1,8,9,7],[101,0,1,2,3,4,5,6,7,1],[102,0,1,2,3,4,1],[30,0,1,2,3,3],[30,0,2,4,2],[103,0,1,1],[104,0,1],[105,0,1,2,1],[106,0,1,2,3,4,5,6,7,1],[107,0,1,2,3,4,1],[108,0,1,2,3,4,5,6,7,2],[109,0,1],[110,0,1,2,3,4,5,6,7,8,9,10,11,2],[31,0,1,2,3,4,5,3],[31,2,3,4,5,6,1],[111,0,1,1],[32,0,1,3,4,5,6,7,8,3],[32,0,1,2,3,4,5,6,7,8,4],[112,0,1,2,3,4,5,6,7,3],[113,0,1,2,1],[114,0,1,2,3,4,5,2],[115,0,1,2,3,4,5,6,7,8,3],[116,0,1,2,3,4,5,2],[15,0,1,2,3,4,1],[15,0,1,2,3,6,4,1],[117,0,1,1],[118,0,1,2,3,4,5,1]],[[[[50,"ResultPageOutAction",0.16666666666666666,3174019996,[[0,0.16666666666666666]],[{"frame":0.16666666666666666,"func":"","params":[]},{"frame":0.16666666666666666,"func":"onOutActionFinish","params":[]}],[[[{},"modifiers",12,[[[20,"cc.Sprite"],"color"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[4,4294967295],[4,16777215]],8,8]]]],11]]],0,0,[],[],[]],[[[25,"failedPage"],[36,"failedPage",33554432,[-12,-13,-14,-15,-16],[[[2,-2,[0,"4eg94UVoZCcYVHjR1DQ5JJ"],[5,640,1136]],[96,45,100,100,-3,[0,"cbY8VOqp5AJpmEw/p6vbGL"]],[26,-4,[0,"f27JB3l41CMK4TXaQ3NnIg"]],[11,1,0,-5,[0,"e6kQ0+a1ZET6Hhq+13kS+D"],12],-6,[214,"failedPageInAction","failedPageOutAction",-11,[0,"f7GxVOGMNEgqQqVXOn7CXS"],-10,-9,-8,-7]],4,4,4,4,1,4],[215,"e3m6v/7IxCZpmo+dvyj1mP",[],-1,0]],[17,"rebornButton",33554432,1,[-20,-21],[[2,-17,[0,"f7NISe7HdAD68SLfhnddy8"],[5,240,85]],[11,1,0,-18,[0,"e71ctEmpxFC4KlSYRZNz/a"],5],[44,3,-19,[0,"d52iE15QhPuY2h0MVqaXso"],[[7,"cfc21cbsfhHa7NTt68qCNzQ","onRebornButtonClick",1]],6]],[1,"d6S3HebY9GWqa+DVki+n2S",1,0],[1,0,-1061.023,0]],[17,"moreGameInnerNode",33554432,1,[-28],[[2,-22,[0,"71kmounFRG/K27WWBbH2RB"],[5,520,460]],[148,0.23,0.75,false,-24,[0,"a8UaPDxYhIX5MrqvKGMJdR"],-23],[218,0.86,-26,[0,"2bV52YGNtBkZKFvV0LNak7"],-25,1],[11,1,0,-27,[0,"7c0WbqIHhGP6LEntcHYJ4u"],2]],[1,"6bPaPwLd5OXII/qfjSLb9Y",1,0],[1,0,86,0]],[69,"strictButton",false,33554432,1,[-32],[[2,-29,[0,"15+L4GqB9A6qNk7XCI3OxZ"],[5,240,85]],[23,0,-30,[0,"a5UUW9BQRGErRRcCTrYZlC"],10],[44,3,-31,[0,"c8Xzc6LZRMkpr1MhFOVDuY"],[[7,"cfc21cbsfhHa7NTt68qCNzQ","onResetButtonClick",1]],11]],[1,"580X65TxhEw7ojenBEa/hO",1,0],[1,-135,-1062.122,0]],[60,"content",33554432,[[22,-33,[0,"99yn0cfL9MmZYfJbPmK9qL"],[5,488,422.8],[0,0.5,1]],[149,1,3,10,10,true,-34,[0,"c9jjSacsFNcqn3t2BoQKcA"]]],[1,"68ELV4UyBCXYeV+y2X4jSa",1,0],[1,0,224.836,0]],[89,"resetButton",false,33554432,1,[[2,-35,[0,"f6of09mqtBu6lmIn9cHqW8"],[5,113.17,35]],[47,"不了谢谢",28,28,35,false,-36,[0,"d8j2fNg4tC0bODMZJ/pNEB"],7],[44,3,-37,[0,"cfxY02M/dFQLiSfHAAIGjG"],[[7,"cfc21cbsfhHa7NTt68qCNzQ","onResetButtonClick",1]],8]],[1,"10nSvX52ZACqdyI2n53z8s",1,0],[1,0,-317.27,0]],[39,"view",33554432,3,[5],[[2,-38,[0,"adVJjE6iNG9YcIKwDKe/zq"],[5,488,422]],[157,-39,[0,"4eIg29oQZFVLk+NZnwDdlk"]]],[1,"b41FP7V/5Ct7nbNpUr7D0o",1,0]],[8,"title",33554432,1,[[2,-40,[0,"f7NISe7HdAD68SLfhnddy8"],[5,285,79]],[6,-41,[0,"e71ctEmpxFC4KlSYRZNz/a"],0]],[1,"25s1xNYG5A95pz2tKOckon",1,0],[1,0,967.835,0]],[8,"normal",33554432,2,[[2,-42,[0,"01L6XbcqNO+Jq1eBrH1CpE"],[5,97,70]],[47,"复活",48,48,70,false,-43,[0,"2fiKg/Q0ZDJKGh8zalUbMj"],3]],[1,"b2ok2itsBGHLVwBl3/CSYe",1,0],[1,35.237,0,0]],[8,"game_video",33554432,2,[[2,-44,[0,"f7NISe7HdAD68SLfhnddy8"],[5,70.975,51.185]],[23,0,-45,[0,"e71ctEmpxFC4KlSYRZNz/a"],4]],[1,"b55Pjf5n1FTLW9FpnOykBK",1,0],[1,-54.821,1.996,0]],[21,"normal",33554432,4,[[2,-46,[0,"46QZ5zqO5Nr5QqnQx712Qc"],[5,181.88,70]],[47,"不了谢谢",45,45,70,false,-47,[0,"18VmDbsAxOvaBDocyTixlj"],9]],[1,"40qWwKkPVLhLr9b876JFgc",1,0]],[79,1,[0,"9aAY5IhORGSJivMY1NbmoS"],[13,14]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-5,12,0,50,4,0,51,6,0,52,2,0,11,12,0,0,1,0,-1,8,0,-2,3,0,-3,2,0,-4,6,0,-5,4,0,0,2,0,0,2,0,0,2,0,-1,9,0,-2,10,0,0,3,0,53,5,0,0,3,0,30,5,0,0,3,0,0,3,0,-1,7,0,0,4,0,0,4,0,0,4,0,-1,11,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,9,1,5,3,7,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,31,1,2,1,1,4,2,4,2,1,4,1,-1,-2],[82,31,83,0,7,2,2,0,32,0,9,9,4,84,85]],[[{"name":"mainPage_bottom_shade","rect":{"x":0,"y":9,"width":160,"height":71},"offset":{"x":0,"y":-4.5},"originalSize":{"width":160,"height":80},"rotated":false,"capInsets":[12,55,9,8],"texture":"1a627748-8145-46fa-8e01-c6bb6146bf4c@6c48a","packable":true}],[5],0,[0],[10],[86]],[[[25,"moreGameLayerwx"],[36,"moreGameLayerwx",33554432,[-11],[[[2,-2,[0,"58TuvruylCbLtYwYQDMQSc"],[5,640,1136]],[62,45,100,100,0,-3,[0,"3fJt6eHDpKApErXsnFCWqS"]],[45,-5,[0,"97bBq8ioZBj7K1b6oqwm5Q"],[[7,"a5d56So7pJKDoA6xhVvXg/k","onCloseButtonClick",-4]],5],-6,[11,1,0,-7,[0,"0fvKzosC5LopqtmsX9Wukp"],8],[234,"commonInAction","commonOutAction",0.86,-10,[0,"65NAzeuAROnp7gFgyUnKJi"],-9,-8,9]],4,4,4,1,4,4],[1,"e45PbxIU5AcqN8xP4jrD2n",-1,0]],[39,"bg",33554432,1,[-15,-16,-17,-18],[[2,-12,[0,"71k2iiVRVB8LLSKB9JjL7l"],[5,502,775]],[11,1,0,-13,[0,"acMu0dV1JG67G6iuPgh4cx"],4],[26,-14,[0,"26HuqgAntKe7TDJ6pEgdDu"]]],[1,"85hHs/ArNM8oDrsC2RET1W",1,0]],[8,"closeButton",33554432,2,[[2,-19,[0,"21X+Ia9btLY6api8uiMnL2"],[5,52,53]],[6,-20,[0,"b9q4BonS1EnKD8d5+0PsVF"],1],[38,3,-22,[0,"913YzuCWBPKZavUAA1jKO0"],[[7,"41bdcExNUFI6I4EIldzHxH9","onCloseButtonClick",1]],[4,4292269782],-21,2]],[1,"d0LLoLziJC2avAsiDPPYQR",1,0],[1,206.899,349.591,0]],[60,"content",33554432,[[22,-23,[0,"99yn0cfL9MmZYfJbPmK9qL"],[5,488,680],[0,0.5,1]],[149,1,3,10,10,true,-24,[0,"c9jjSacsFNcqn3t2BoQKcA"]]],[1,"68ELV4UyBCXYeV+y2X4jSa",1,0],[1,0,336.285,0]],[17,"ScrollView",33554432,2,[-27],[[2,-25,[0,"71kmounFRG/K27WWBbH2RB"],[5,488,680]],[148,0.23,0.75,false,-26,[0,"a8UaPDxYhIX5MrqvKGMJdR"],4]],[1,"6bPaPwLd5OXII/qfjSLb9Y",1,0],[1,0,-36.14100000000002,0]],[39,"view",33554432,5,[4],[[2,-28,[0,"adVJjE6iNG9YcIKwDKe/zq"],[5,488,680]],[157,-29,[0,"4eIg29oQZFVLk+NZnwDdlk"]]],[1,"b41FP7V/5Ct7nbNpUr7D0o",1,0]],[8,"panel_bg1",33554432,2,[[2,-30,[0,"c2V1c6WzJIYodjkixND0Kk"],[5,490.16200000000003,689.9870000000001]],[11,1,0,-31,[0,"20FlM8yZpA146b188VlpZm"],0]],[1,"d1HkoggPBM+qMjPnPKXlpS",1,0],[1,0,-37.78749999999999,0]],[8,"title-002",33554432,2,[[2,-32,[0,"f4xGyIqyBOrbWwRc0+O6Fb"],[5,160.83,45]],[76,"更多游戏",0,40,45,false,-33,[0,"f5JVRup6BM4KEFT01TOFiv"],3]],[1,"96LdWm8ZpGALFClSrHcaKi",1,0],[1,-139.984,339.173,0]],[65,"alertLayer<Animation>",1,[0,"01v98gqllM4IhLYAysuxUy"],[6,7]]],0,[0,7,1,0,0,1,0,0,1,0,6,1,0,0,1,0,-4,9,0,0,1,0,30,4,0,11,9,0,0,1,0,-1,2,0,0,2,0,0,2,0,0,2,0,-1,7,0,-2,3,0,-3,8,0,-4,5,0,0,3,0,0,3,0,5,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,-1,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,9,1,4,3,6,33],[0,0,0,0,0,0,0,0,0,0],[1,1,4,2,1,4,-1,-2,1,31],[12,5,5,0,18,4,13,14,4,31]],[[{"name":"back_cloud1","rect":{"x":0,"y":4,"width":640,"height":196},"offset":{"x":0,"y":-2},"originalSize":{"width":640,"height":200},"rotated":false,"capInsets":[0,72,0,19],"texture":"24275754-e530-43f3-8dae-1728f6fe6910@6c48a","packable":true}],[5],0,[0],[10],[87]],[[[127,"resultPageShareRecord",2,1,819621362,[[0,0.5,1]],[[[{"modifiers":["scale"]},"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[1,1,1,1],[1,1.2,1.2,1.2],[1,1,1,1]],8,8,8]]]],11]]],0,0,[],[],[]],[[[158,".bin",12096,514729939,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-50,0,-49.999996185302734],"maxPosition",8,[1,50,0,50]]]],0,0,[],[],[]],[[[25,"freeForeverLayer"],[36,"freeForeverLayer",33554432,[-11],[[[2,-2,[0,"58TuvruylCbLtYwYQDMQSc"],[5,640,1136]],[62,45,100,100,0,-3,[0,"3fJt6eHDpKApErXsnFCWqS"]],-4,[45,-6,[0,"97bBq8ioZBj7K1b6oqwm5Q"],[[7,"4d952u2ZbxFAKUC+/1OiE6l","onCloseButtonClick",-5]],27],[11,1,0,-7,[0,"40ndZLqWhIv4zXz0yKbQAd"],28],[235,"commonInAction","commonOutAction",-10,[0,"5fcUbjVZJFo4LpxWEST0Pl"],-9,-8]],4,4,1,4,4,4],[1,"b0o9jzyy1Il6MWoJd37kIt",-1,0]],[40,"inner",33554432,[-15,-16,-17,-18,-19,-20,-21],[[2,-12,[0,"71k2iiVRVB8LLSKB9JjL7l"],[5,502,630]],[26,-13,[0,"26HuqgAntKe7TDJ6pEgdDu"]],[11,1,0,-14,[0,"0f3NviIvpBp5pvbNqUGUXt"],18]],[1,"cckxcY7TJG66zJvJT8PQU5",1,0],[1,0,63.694,0]],[93,"hero",33554432,2,[-24,-25,-26,-27],[-22,-23],[1,"bbvvhzSWdNAb/+NZ+LPG2k",1,0],[1,0,-100,0],[3,0,0.19651946169232679,0,0.9804999241081858],[1,400,400,400],[1,0,22.667,0]],[40,"button",33554432,[-32,-33,-34],[[2,-28,[0,"8aS0FNEsFCqZI2hwXVjdpX"],[5,140,140]],[23,0,-29,[0,"bekh/WsEBGwaR+uOUSH6Bf"],23],[45,-31,[0,"8bXOZQDzBOyL1VZHZZ+bh5"],[[7,"bf6e5PJzs1H/p9bKiZfHTQ/","onButtonClick",-30]],24]],[1,"a74LVStGVGeLb41mfKv8kB",1,0],[1,195.245,0,0]],[128,"ProgressBar",33554432,[-38,-39,-40],[[[2,-35,[0,"1crxfiBtlM6qhcCAn5doCx"],[5,320,56]],[53,1,-36,[0,"c3rKmuxzdNyJ0bgIHMbvRy"],20],-37],4,4,1],[1,"c6W2tMSNpKapy7O18elR6G",1,0],[1,-75.076,2.481,0],[1,1.2,1.2,1.2]],[39,"bg",33554432,1,[2,-44],[[2,-41,[0,"cdG06aDW9JbL3R7y6015HI"],[5,502,780]],[41,1,0,-42,[0,"26He61gbNKeI0fXE64WK90"]],[26,-43,[0,"17LyjjWiNNzrlN1yfLqAH+"]]],[1,"f5iDk/G8BD/LX+r3XLHVN3",1,0]],[52,"adButton",33554432,2,[-48,-49],[[2,-45,[0,"f7NISe7HdAD68SLfhnddy8"],[5,250,85]],[11,1,0,-46,[0,"e71ctEmpxFC4KlSYRZNz/a"],10],[44,3,-47,[0,"fa5+nv/wpAxJZwP8ZTKw8g"],[[7,"95bf3WUZWROZYJq7QqlWvUM","onGetButtonClick",1]],11]],[1,"60Uxl60GlDD6Cu+f9BxXA1",1,0],[1,0,-212,0],[1,0.8,0.8,0.8]],[69,"noThanks",false,33554432,2,[-54],[[2,-50,[0,"60O6sotMJLwZtFWop7RzIp"],[5,98.96,30]],[38,3,-52,[0,"882ETrWTxBqLTqPKCX/cPr"],[[7,"95bf3WUZWROZYJq7QqlWvUM","onCloseButtonClick",1]],[4,4292269782],-51,13],[47,"不了谢谢",25,25,30,false,-53,[0,"a3XhQ5WsNN4qFLLr4mHlvE"],14]],[1,"d6Ic1s+kJOnZ1aLuwpUvkx",1,0],[1,0,-283.044,0]],[17,"cumVideoNode",33554432,6,[5,4],[[2,-55,[0,"29NgZnh3JDdZsQ1RUBxJ4F"],[5,670.2760000000001,140]],[159,-60,[0,"4eaGbGGMFF85dwfhjUdvx5"],-59,-58,-57,4,-56]],[1,"7cJiAq0MpHBr3kApUujs85",1,0],[1,4.741,-332.681,0]],[8,"closeButton",33554432,2,[[2,-61,[0,"21X+Ia9btLY6api8uiMnL2"],[5,52,53]],[6,-62,[0,"b9q4BonS1EnKD8d5+0PsVF"],1],[38,3,-64,[0,"913YzuCWBPKZavUAA1jKO0"],[[7,"95bf3WUZWROZYJq7QqlWvUM","onCloseButtonClick",1]],[4,4292269782],-63,2]],[1,"f8NVDP8SZBDLTCtjymdy22",1,0],[1,206.899,279.615,0]],[90,"strictButton",false,33554432,2,[-68],[[2,-65,[0,"93wOR4I0NKira0PyUcGB0S"],[5,250,85]],[11,1,0,-66,[0,"91g8p/WGxKFYn2UleKfDj0"],16],[44,3,-67,[0,"81PmUCGqRBw5MjfviAaVlg"],[[7,"95bf3WUZWROZYJq7QqlWvUM","onCloseButtonClick",1]],17]],[1,"faS8CVWDFMsoXPQQXiWH8m",1,0],[1,-115,-212,0],[1,0.8,0.8,0.8]],[60,"SPHERE001_1_1",33554432,[[80,1,0,-69,[0,"4c9z3WwfFGBrobBXEybsM9"],[4],[49],3,5,6],[2,-70,[0,"57hfNYddNEKoCPWWGzIIRQ"],[5,0,0]],[106,-71,[0,"360Uw0ZhpOJISGdEAa73Dp"]]],[1,"f4uKfyG/1G9I2sYlWuNj16",1,0],[1,-0.001031705760397017,-0.056308,0.006184028461575508]],[51,"mixamorig_Hips",33554432,[-72,-73,-74],[1,"d6pRM7OTNK0L7USdSFGDDE",1,0],[1,0.002063411520794034,0.2593175768852234,-0.01236803736537695],[3,0.0023929856378427745,0.995876079101868,0.06685621326741793,0.06128095495313775],[1,-7.635983534023475,173.00707807406081,0.7425889600684812]],[51,"mixamorig_Spine2",33554432,[-75,-76,-77],[1,"b6u+KaOENCKaZoK2ug93pw",1,0],[1,-3.552713599391162e-17,0.05638634413480759,0],[3,0.029252197995834433,0.015935689430097974,-0.010050659206182446,0.9993944901610781],[1,3.370941359491348,1.8593476206728394,-1.0976731676017177]],[8,"red",33554432,4,[[2,-78,[0,"e8FZjDOshJ84GatRruD7uU"],[5,30,30]],[23,0,-79,[0,"54J4tY6X1M7pa79i/AQQHm"],22]],[1,"fbd9EdCbVLoan3fvksb2Wu",1,0],[1,51.971,54.394,0]],[8,"panel_bg1",33554432,2,[[2,-80,[0,"c2V1c6WzJIYodjkixND0Kk"],[5,490.16200000000003,547.238]],[11,1,0,-81,[0,"20FlM8yZpA146b188VlpZm"],0]],[1,"e8Np1sPuhAPKI1KkvOzOpB",1,0],[1,0,-35.21999999999999,0]],[8,"title-002",33554432,2,[[2,-82,[0,"f4xGyIqyBOrbWwRc0+O6Fb"],[5,161.67,45]],[76,"天降皮肤",0,40,45,false,-83,[0,"f5JVRup6BM4KEFT01TOFiv"],3]],[1,"10n5MgOWlCUoggqSXUiTXF",1,0],[1,-139.984,269.197,0]],[84,"001",33554432,3,[12,13],[1,"4a797/gFtK8K56RZ0WXSz0",1,0],[1,0.001031705760397017,0.2030099481344223,-0.0061840093694627285]],[37,"mixamorig_HeadTop_End Socket",33554432,3,[1,"16dOFvr0pD8psdTbocNDpp",1,0],[1,-0.0086944287223947,0.9948246522988149,0.04711596146966174],[3,-0.014872127011990031,0.9996891043065057,-0.005494157553204148,-0.019243928958930363],[1,0.662487780956531,-177.78461305385247,-1.6918205514204572]],[37,"mixamorig_LeftToe_End Socket",33554432,3,[1,"bfBSfZpfxDwq3vWiEDwfen",1,0],[1,0.07272711433904885,0.302079262126885,-0.07560324764239205],[3,0.07720382984028945,0.040350172342354974,0.9746904188846686,-0.20588836680192338],[1,-173.09449777264768,-169.5185000119221,-23.273736617959592]],[37,"mixamorig_RightToe_End Socket",33554432,3,[1,"e8jcrKez5Kvb6AauNn1+Cq",1,0],[1,-0.031762256631616345,0.20861501385951434,-0.06462891876727296],[3,-0.08950854851152235,0.7470231606465523,0.655784585502464,-0.062379440670442286],[1,-82.71231730809052,178.57998546787348,-12.447495520367493]],[8,"icon",33554432,7,[[2,-84,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[6,-85,[0,"e71ctEmpxFC4KlSYRZNz/a"],8]],[1,"9eRwz9RrVE1pnWaAkIoRpt",1,0],[1,-78.574,0,0]],[8,"label",33554432,7,[[2,-86,[0,"71eupCWVNLma/J9/qTqBX7"],[5,160,40]],[48,"永久获得",40,false,-87,[0,"c32/hAxnZHMoym1W7AQ+sf"],9]],[1,"57j09Ch5xLRaoCtupUlQS7",1,0],[1,35.056,0,0]],[28,"common_white",33554432,8,[[2,-88,[0,"f7NISe7HdAD68SLfhnddy8"],[5,5,5]],[6,-89,[0,"e71ctEmpxFC4KlSYRZNz/a"],12]],[1,"301+ghLdVDxKbTrxiobKvl",1,0],[1,0,-13.546,0],[1,19.672,1,1]],[21,"label",33554432,11,[[2,-90,[0,"beUDuojS1P/rUBvPjmBacm"],[5,161.67,40]],[48,"不了谢谢",40,false,-91,[0,"84S2CWjHVM/rOzPoeYnKh+"],15]],[1,"5eC/d/GyxJZqT+IgcsVZsw",1,0]],[21,"progress_bg_1",33554432,5,[[2,-92,[0,"f7NISe7HdAD68SLfhnddy8"],[5,295,31]],[6,-93,[0,"e71ctEmpxFC4KlSYRZNz/a"],19]],[1,"92CQPkY5JNXoUjTmzCouUV",1,0]],[16,"Bar",33554432,5,[[[22,-94,[0,"c9tRHGLSNACJ6zua6Vt8rS"],[5,290,26],[0,0,0.5]],-95],4,1],[1,"d6CNR9PepO+4N1ls4FSyTA",1,0],[1,-145.656,0,0]],[85,"desLabel",33554432,5,[[[2,-96,[0,"e5f6do58BALpCcvbSWqJZ4"],[5,340.1,30]],-97],4,1],[1,"82XdJrIvRKzqsn4m4eRy/X",1,0],[1,-0.3975000000000364,-41.63083333333333,0],[1,0.8333333333333334,0.8333333333333334,0.8333333333333334]],[28,"mainPage_diamond",33554432,4,[[2,-98,[0,"f7NISe7HdAD68SLfhnddy8"],[5,116,141]],[6,-99,[0,"e71ctEmpxFC4KlSYRZNz/a"],21]],[1,"c1rvltjRNCBb7Ge9QJZfoi",1,0],[1,0,14.758,0],[1,0.54,0.54,0.54]],[16,"rewardLabel",33554432,4,[[[2,-100,[0,"02lctUDxdKqpl6lCs7ejyv"],[5,60.94,30]],-101],4,1],[1,"9821Li3htA9L+K7MjPUQ1P",1,0],[1,0,-43.304,0]],[10,"mixamorig_Spine",33554432,13,[-102],[1,"381Az+f2hKB45xJtiS3r8I",1,0],[1,5.551115205843844e-18,0.042288169264793396,-0.00036916256067343056],[3,-0.12386011156302915,0.12867709811501943,0.008135558921744234,0.9838875392367373],[1,-14.232279178800969,14.78869934849394,-0.9091485287284771]],[10,"mixamorig_Spine1",33554432,31,[14],[1,"adGf4YiOhFoqufJVEmwZ1z",1,0],[1,8.881783998477905e-18,0.04933808371424675,-1.0658140798173486e-16],[3,0.0296225394133844,0.01594763596680611,-0.01114812196446284,0.9993717513730505],[1,3.4155328955629343,1.8649123676210873,-1.2226367491481058]],[10,"mixamorig_Neck",33554432,14,[-103],[1,"e5X8bPyaFCSK13op63dLou",1,0],[1,-8.881783998477905e-18,0.06343469023704529,6.025056009661967e-10],[3,-0.03445329913631456,-0.020743694300765433,0.027395924743925666,0.9988153646359297],[1,-3.887370065911886,-2.270251200776176,3.2192135415124343]],[19,"mixamorig_Head",33554432,33,[[18,"mixamorig_HeadTop_End",33554432,-104,[1,"66md0uB4lEUJASuhhgfmYX",1,0],[1,1.4876988900554012e-16,0.3001466393470764,0.0011448562145233154]]],[1,"08oiWvjgVLDpnu6XRMiny+",1,0],[1,-8.881783998477905e-18,0.03218189254403114,0.00012275218614377081],[3,0.17151315588373678,-0.057675924414770506,-0.007567358237691217,0.9834629938086156],[1,19.67492316491185,-6.3680724888391795,-1.9867736593111374]],[10,"mixamorig_LeftShoulder",33554432,14,[-105],[1,"eacc5xZltMupztmka0iXEp",1,0],[1,-0.025272076949477196,0.051629506051540375,0.0007563747931271791],[3,0.5603799825602487,-0.37139922417934584,0.6482940322743814,0.35742375290707623],[1,117.97876134844462,-96.69447123131813,2.704332927181809]],[10,"mixamorig_LeftArm",33554432,35,[-106],[1,"3eBff0R21KE7obrAs83WPu",1,0],[1,-3.552713599391162e-17,0.0559559240937233,0],[3,0.2752015336763306,0.3504462894354546,-0.3662782370159238,0.8168792855566995],[1,50.59908034177471,57.8769087941026,-23.92393628235333]],[19,"mixamorig_LeftForeArm",33554432,36,[[18,"mixamorig_LeftHand",33554432,-107,[1,"bbukdu/GJIgJhxOjEUxhRa",1,0],[1,1.0658140798173486e-16,0.09513875097036362,-8.88178432935015e-17]]],[1,"2fDqxASjVH5oVM7yP1JUgg",1,0],[1,0,0.11092560738325119,1.4210854397564648e-16],[3,0.006906326345678939,0.00015031936239299392,0.5905688959311781,0.8069576563978593],[1,2.0775917931296255,-1.4989801312786166,72.38855712268851]],[10,"mixamorig_RightShoulder",33554432,14,[-108],[1,"f3v8lx1YlCnqFq5KemczIl",1,0],[1,0.025272076949477196,0.0516478531062603,-0.0013453873107209802],[3,-0.5585776637453329,-0.38272849204908144,0.6494601450286634,-0.34599337415330583],[1,117.88682900569064,97.85067425987722,-1.2520490992248492]],[10,"mixamorig_RightArm",33554432,38,[-109],[1,"7e9BXxib5E2ZBfn1LGYDLF",1,0],[1,3.552713599391162e-17,0.05598469078540802,-7.105427198782324e-17],[3,0.2286539350301079,0.04263348457390663,-0.11980709300043944,0.965166319581821],[1,27.521012695569773,8.063289708731691,-12.226152546459959]],[19,"mixamorig_RightForeArm",33554432,39,[[18,"mixamorig_RightHand",33554432,-110,[1,"e7HqEv6btDzKo/piO8TOZT",1,0],[1,1.4210854397564648e-16,0.09513869136571884,-1.4210854397564648e-16]]],[1,"fb1dmXCMJEf7wssgrbhtmN",1,0],[1,-2.6645351995433716e-17,0.11096233874559402,-1.4210854397564648e-16],[3,-0.030528030960982087,0.0002398746702611978,-0.72136669574569,0.6918800994787557],[1,-135.47892208566378,-132.98453440973418,-86.57434082553048]],[10,"mixamorig_LeftUpLeg",33554432,13,[-111],[1,"4d4bp3+WpEb55ercdU1zJG",1,0],[1,-0.05006299912929535,-0.023445740342140198,0.0006907245260663331],[3,0.07774957824122004,-0.2561955985283482,0.9630979659781691,0.027588517660923306],[1,150.14432396547616,-170.56599062468476,0.7622105331571107]],[10,"mixamorig_LeftLeg",33554432,41,[-112],[1,"77kBHUQHVNeYQhoFPjgKVV",1,0],[1,3.552713599391162e-17,0.12528982758522034,-1.2434497928741312e-16],[3,0.9325883595946978,-0.04379414864434498,-0.07701544634933392,0.34989947858863807],[1,139.31514386463317,6.5490312658269705,-7.792110970249897]],[10,"mixamorig_LeftFoot",33554432,42,[-113],[1,"65/3YM0QxLD6xSa0adstgw",1,0],[1,0,0.09087410569190979,0],[3,0.06375178735245939,0.738645141051213,-0.6710665268635934,-0.0029633990677301316],[1,84.74126378419373,175.32063681521672,5.633062086888788]],[19,"mixamorig_LeftToeBase",33554432,43,[[18,"mixamorig_LeftToe_End",33554432,-114,[1,"6cz8jErRRDzJPajRLryYuG",1,0],[1,-7.105427198782324e-17,0.022281795740127563,-3.552713599391162e-17]]],[1,"06bwVvtJ9CPq6rb5cOdRVj",1,0],[1,0,0.05022500082850456,-3.552713599391162e-17],[3,0.2964968049691212,-0.17176897617582526,0.0543017045594477,0.9378893262792524],[1,35.08682276231146,-20.756746258358135,0.00000417985616086644]],[10,"mixamorig_RightUpLeg",33554432,13,[-115],[1,"32V32A2itKE6ni/wWlHTTV",1,0],[1,0.05006299912929535,-0.023445740342140198,0.0007796928402967751],[3,-0.03716114224003699,0.03913115028779787,0.9984831376790634,0.010919082156575818],[1,-175.47068110577064,175.69432436950765,1.082766883450719]],[10,"mixamorig_RightLeg",33554432,45,[-116],[1,"e02yY778pCE7g0zvsXkFJp",1,0],[1,2.6645351995433716e-17,0.1253097951412201,-1.776356799695581e-17],[3,0.24444734454023967,-0.08214293219978132,-0.010078629233006665,0.9661244514396843],[1,28.132779700201798,-8.862712034971757,-3.4187855845158954]],[10,"mixamorig_RightFoot",33554432,46,[-117],[1,"cfEXN8FUNL2qH/p8bMLEoc",1,0],[1,8.881783998477905e-18,0.09085717797279358,7.105427198782324e-17],[3,-0.09158261925069446,0.8051489644076772,-0.5736431516843141,0.11950440782713513],[1,70.17709598985363,174.77112577956743,-16.533808903107424]],[19,"mixamorig_RightToeBase",33554432,47,[[18,"mixamorig_RightToe_End",33554432,-118,[1,"25OqiWH85E+Z1epy+z7E5I",1,0],[1,3.108624482185328e-17,0.0225580632686615,-3.552713599391162e-17]]],[1,"0cUp83dM5EpK30qLLEiyMv",1,0],[1,-4.440891999238953e-18,0.049431171268224716,7.993606094938482e-17],[3,0.5450361893322382,0.17910028751691662,-0.0337834688919253,0.8183625825752169],[1,65.94589534253889,19.465755405853827,8.04425990705664]],[81,false,3,[0,"5cVXAgDBFNRIoEVPfpQhaK"],[7],[[31,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head/mixamorig_HeadTop_End",19],[31,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase/mixamorig_LeftToe_End",20],[31,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase/mixamorig_RightToe_End",21]]],[107,3,[0,"55tQB+XlhN3oSCntKg6uPq"],19,20,21,49],[41,2,0,27,[0,"ebjLpObdRIG5JpszsgZnZu"]],[77,"累计观看视频3次即可获得奖励",25,25,30,false,28,[0,"c3BPa5OeBG3JYHn4cC/DJs"]],[82,290,1,5,[0,"79nRfBiE9MB5Ker8iqnpy+"],51],[77,"+100",25,25,30,false,30,[0,"53x7ck5+FBrpV+HC4MELri"]],[65,"alertLayer<Animation>",1,[0,"01v98gqllM4IhLYAysuxUy"],[25,26]]],0,[0,7,1,0,0,1,0,0,1,0,-3,55,0,6,1,0,0,1,0,0,1,0,21,50,0,11,55,0,0,1,0,-1,6,0,0,2,0,0,2,0,0,2,0,-1,16,0,-2,10,0,-3,17,0,-4,3,0,-5,7,0,-6,8,0,-7,11,0,-1,49,0,-2,50,0,-1,18,0,-2,19,0,-3,20,0,-4,21,0,0,4,0,0,4,0,6,9,0,0,4,0,-1,29,0,-2,15,0,-3,30,0,0,5,0,0,5,0,-3,53,0,-1,26,0,-2,27,0,-3,28,0,0,6,0,0,6,0,0,6,0,-2,9,0,0,7,0,0,7,0,0,7,0,-1,22,0,-2,23,0,0,8,0,5,8,0,0,8,0,0,8,0,-1,24,0,0,9,0,32,15,0,33,54,0,22,53,0,16,52,0,0,9,0,0,10,0,0,10,0,5,10,0,0,10,0,0,11,0,0,11,0,0,11,0,-1,25,0,0,12,0,0,12,0,0,12,0,-1,31,0,-2,41,0,-3,45,0,-1,33,0,-2,35,0,-3,38,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,-2,51,0,0,28,0,-2,52,0,0,29,0,0,29,0,0,30,0,-2,54,0,-1,32,0,-1,34,0,3,34,0,-1,36,0,-1,37,0,3,37,0,-1,39,0,-1,40,0,3,40,0,-1,42,0,-1,43,0,-1,44,0,3,44,0,-1,46,0,-1,47,0,-1,48,0,3,48,0,9,1,2,3,6,4,3,9,5,3,9,12,3,18,13,3,18,14,3,32,118],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,51,52,54],[1,1,4,2,-1,12,15,-1,1,2,1,4,1,4,2,2,1,4,1,1,1,1,1,1,4,-1,-2,4,1,8,1,2,2],[12,5,5,0,33,21,22,10,7,0,2,2,34,5,0,0,9,9,18,46,35,3,8,23,23,13,14,4,4,10,24,0,0]],[[[66,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaLimit":0.6,"moveSpeed":0.15},"striscaleTexture",6,0]],11]]],0,0,[0,0],[23,13],[88,36]],[[[108,"../matAndEffect/striscia",[{"hash":2587258001,"name":"../matAndEffect/striscia|sprite-vs:vert|sprite-fs:frag","glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\nlayout(set = 1, binding = 1) uniform Constants {\n  float moveSpeed;\n  float alphaLimit;\n};\nlayout(set = 1, binding = 2) uniform sampler2D striscaleTexture;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    if(o.a > 0.0){\n      vec2 uv1 = vec2(uv0.x -  cc_time.x * moveSpeed, uv0.y);\n      uv1.x -= floor(uv1.x);\n      vec4 o1 = CCSampleWithAlphaSeparated(striscaleTexture,uv1);\n      if(o1.a > alphaLimit)\n        o = o1;\n    }\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\n#if SAMPLE_FROM_RT\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\nlayout(std140) uniform Constants {\n  float moveSpeed;\n  float alphaLimit;\n};\nuniform sampler2D striscaleTexture;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    if(o.a > 0.0){\n      vec2 uv1 = vec2(uv0.x -  cc_time.x * moveSpeed, uv0.y);\n      uv1.x -= floor(uv1.x);\n      vec4 o1 = CCSampleWithAlphaSeparated(striscaleTexture,uv1);\n      if(o1.a > alphaLimit)\n        o = o1;\n    }\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n   uniform float moveSpeed;\n   uniform float alphaLimit;\nuniform sampler2D striscaleTexture;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    if(o.a > 0.0){\n      vec2 uv1 = vec2(uv0.x -  cc_time.x * moveSpeed, uv0.y);\n      uv1.x -= floor(uv1.x);\n      vec4 o1 = CCSampleWithAlphaSeparated(striscaleTexture,uv1);\n      if(o1.a > alphaLimit)\n        o = o1;\n    }\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":46,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constants","stageFlags":16,"binding":1,"members":[{"name":"moveSpeed","type":13,"count":1},{"name":"alphaLimit","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"striscaleTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":1,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"passes":[{"program":"../matAndEffect/striscia|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"striscaleTexture":{"value":"grey","type":28},"alphaLimit":{"type":13,"value":[0]},"moveSpeed":{"type":13,"value":[0.1]}}}]}]]],0,0,[],[],[]],[[[66,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{}],[{},{},{}],[[{},[{},"mainColor",8,[4,4285193002]],{}],0,11,0]]],0,0,[0],[13],[89]],[[[25,"resultPage"],[36,"resultPage",33554432,[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[[[2,-2,[0,"4eg94UVoZCcYVHjR1DQ5JJ"],[5,640,1136]],[96,45,100,100,-3,[0,"cbY8VOqp5AJpmEw/p6vbGL"]],[26,-4,[0,"f27JB3l41CMK4TXaQ3NnIg"]],[11,1,0,-5,[0,"e6kQ0+a1ZET6Hhq+13kS+D"],43],-6,[240,"ResultPageInAction","ResultPageOutAction",-17,-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,47]],4,4,4,4,1,4],[1,"f11Qcsj6VFZa1YyKASn1Vm",-1,0]],[91,"bg",33554432,[-31,-32,-33,-34,-35,-36],[[2,-29,[0,"f7NISe7HdAD68SLfhnddy8"],[5,317,112]],[207,-30,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,33554431],23]],[1,"d35CzaBCZHKKefuFV6lV9Y",1,0]],[129,"pan",false,33554432,1,[-40,-41,-42,-43],[[[2,-37,[0,"f7NISe7HdAD68SLfhnddy8"],[5,453,284]],[6,-38,[0,"e71ctEmpxFC4KlSYRZNz/a"],18],-39],4,4,1],[1,"acUNmUHoZKKI3yYBYadBDA",1,0],[1,0,-306,0]],[17,"diamondNode",33554432,1,[-48,-49],[[2,-44,[0,"f7NISe7HdAD68SLfhnddy8"],[5,183,60]],[53,1,-45,[0,"e71ctEmpxFC4KlSYRZNz/a"],3],[241,-47,[0,"e1dGT8PWNMbKDqMdBt1oP6"],-46]],[1,"a8R/mDmI9CFaSzgO0H00bS",1,0],[1,451.445,400,0]],[91,"doubleButton",33554432,[-54,-55],[[30,"cancelButton<UITransform>",-50,[0,"e8lPo2fMRGXY252yhLM5V0"],[5,190,80]],[54,"cancelButton<Sprite>",1,0,-51,[0,"b6Vw5yxa1EtJDiXYbSoJXW"],34],[46,"cancelButton<Button>",3,-53,[0,"50DGzEVWJGHIZH3Gpj+TPO"],[[7,"9081fsbKhBCHo++BAo/6RzJ","onDoubleAdButtonClick",1]],[4,4292269782],-52,35]],[1,"30WicVLHtCj71CowqkdnX3",1,0]],[40,"shareRecordButton",33554432,[-60,-61],[[30,"cancelButton<UITransform>",-56,[0,"0cCMomh/VJTYk0hNumAVpb"],[5,190,80]],[54,"cancelButton<Sprite>",1,0,-57,[0,"33vthlUldGI4NmLaNLYTBF"],41],[46,"cancelButton<Button>",3,-59,[0,"afzQ4NhddO6Jag+q/a9N3Y"],[[7,"9081fsbKhBCHo++BAo/6RzJ","onShareRecordButtonClick",1]],[4,4292269782],-58,42]],[1,"2a1gxeZaNAs4O9M0i5U3zZ",1,0],[1,200,0,0]],[130,"ProgressBar",33554432,2,[-66],[[[2,-62,[0,"0a4TUb2bBHBa3wO6MCw2d2"],[5,199,38]],[143,1,2,false,-63,[0,"e3LBidlN9MdpNxB8lzYZv7"],20],-64,-65],4,4,1,1],[1,"4aCOEIQedOu6OmMFk74s51",1,0],[1,48.087,-21.6,0]],[40,"singleButton",33554432,[-71],[[30,"cancelButton<UITransform>",-67,[0,"3ebBZrVRBPcbOLDjkjBMNQ"],[5,190,80]],[54,"cancelButton<Sprite>",1,0,-68,[0,"0bg0dnpOlIrai4QS5aV6/T"],30],[46,"cancelButton<Button>",3,-70,[0,"ffOcbmka1LDLAESFayAGwT"],[[7,"9081fsbKhBCHo++BAo/6RzJ","onSingleButtonClick",1]],[4,4292269782],-69,31]],[1,"d8XtzkAYxJdaq7HHJ9Eo3W",1,0],[1,-200,0,0]],[17,"tool0",33554432,1,[-74,-75],[[2,-72,[0,"f7NISe7HdAD68SLfhnddy8"],[5,175,61]],[6,-73,[0,"e71ctEmpxFC4KlSYRZNz/a"],5]],[1,"a3+hQTFFtKK4vc+LqtQsDQ",1,0],[1,-189.985,155.003,0]],[17,"tool1",33554432,1,[-78,-79],[[2,-76,[0,"f7NISe7HdAD68SLfhnddy8"],[5,175,61]],[6,-77,[0,"e71ctEmpxFC4KlSYRZNz/a"],7]],[1,"0aZ2YYDgNGZ66aJQthltAj",1,0],[1,0,155.003,0]],[17,"tool2",33554432,1,[-82,-83],[[2,-80,[0,"f7NISe7HdAD68SLfhnddy8"],[5,175,61]],[6,-81,[0,"e71ctEmpxFC4KlSYRZNz/a"],9]],[1,"a9n7q0iEdOTZTWWddWNa+6",1,0],[1,190,155.003,0]],[36,"normal-001",33554432,[-87],[[[2,-84,[0,"94iXIX77JOGLwX9Yrs3TQe"],[5,61.67,40]],-85,-86],4,1,1],[1,"8a4PxK9UhMT7T772nW1JDI",1,0]],[130,"normal",33554432,3,[-91],[[[2,-88,[0,"5f1/vQRLpFE6MvafYXOA5u"],[5,43.33,40]],-89,-90],4,1,1],[1,"f6FEfjCTdP5rOXtGz8+HTx",1,0],[1,48.259,-66.001,0]],[129,"progressLottery",false,33554432,1,[2],[[[2,-92,[0,"f7HJ7izg5DP5u5qWvj0jqm"],[5,317,112]],-93,[243,"commonInAction","commonOutAction",-100,-99,-98,-97,-96,-95,-94,26,27,28]],4,1,4],[1,"95J1xqLQtDiLPgxCFtR1LR",1,0],[1,0,-49.763,0]],[186,"ttNode",false,1,[8,5,6],[[2,-101,[0,"493/fd7b1EG5bQc9ZL+WS/"],[5,0,0]]],[1,"8aAh7z2V5Ov6oMQv8Nadx0",1,0],[1,0,-266,0]],[17,"spriteFrame",33554432,6,[-105],[[22,-102,[0,"f7NISe7HdAD68SLfhnddy8"],[5,91.762,35.107],[0,0.0013731174124365086,0.014028541316546572]],[11,1,0,-103,[0,"e71ctEmpxFC4KlSYRZNz/a"],38],[105,true,-104,[0,"9cB3OZBu5NpKDoOi5E7RHF"],[39],40]],[1,"7bhSZLZ29O1KAbsAQjhODp",1,0],[1,12.566,25.024,0]],[16,"diamondLabel",33554432,4,[[[2,-106,[0,"f22ol948VCEL2gRwjQGyW5"],[5,103.33,40]],-107,-108],4,1,1],[1,"79BD62iTRBsYG83Pj25BmW",1,0],[1,16.729,0,0]],[28,"diamondIcon",33554432,4,[[2,-109,[0,"6bvzgayPRNqaN5/RDKglmh"],[5,116,141]],[6,-110,[0,"a05sx5RHJCW46gn8UROi5q"],2],[97,8,12.818999999999996,0,-111,[0,"ebtRb+tsJPU6+nhjvz+uUJ"]]],[1,"7ezVZJE5JFKqqrv29DAo8b",1,0],[1,-58.381000000000014,0,0],[1,0.35,0.35,0.35]],[16,"normal",33554432,9,[[[2,-112,[0,"e1eJxJ8CNHSrDRbo4ZHueR"],[5,82.5,48]],-113,-114],4,1,1],[1,"f15h8uBF5DUbHmgw7VSjEl",1,0],[1,24.202,0,0]],[16,"normal",33554432,10,[[[2,-115,[0,"3aIXK7+V1LEam9v9fGWM34"],[5,82.5,48]],-116,-117],4,1,1],[1,"b392ZbPCdOYYm6YyVGCgwA",1,0],[1,24.202,0,0]],[16,"normal",33554432,11,[[[2,-118,[0,"57ETExBsdH3ZlWo4eaFrjX"],[5,82.5,48]],-119,-120],4,1,1],[1,"19senwYodPQbqT0lYcnoDH",1,0],[1,24.202,0,0]],[17,"tool3",33554432,1,[12],[[2,-121,[0,"f5HkA25+BJOYiHFYfmxqDp"],[5,250,61]],[11,1,0,-122,[0,"deLsSC75FJ6biqtTBxZHx1"],11]],[1,"06mbWKyKpBaYs7IU3DYOUy",1,0],[1,0,59.693,0]],[8,"samll_diamond_icon2",33554432,12,[[2,-123,[0,"d1SJZLqahHW4Z119eqIW1o"],[5,36,47]],[6,-124,[0,"d5bkuD+zNKzroYpdEpXRq3"],10],[97,8,-5.080999999999989,1,-125,[0,"2ajX8ozitEzZwbMPP2Whi5"]]],[1,"2ezara+8xCL4dJdAn+K9Ig",1,0],[1,-17.91599999999999,-2.602,0]],[92,"arrow",33554432,3,[[22,-126,[0,"f7NISe7HdAD68SLfhnddy8"],[5,48,47],[0,0.5,-4.9089148936170215]],[6,-127,[0,"e71ctEmpxFC4KlSYRZNz/a"],12]],[1,"46KMAB8OtKsKEWfrOoBMim",1,0],[1,1.037999999999954,-223.853,0],[3,0,0,0.3665012267242973,0.9304175679820246],[1,0,0,43]],[8,"samll_diamond_icon2",33554432,13,[[2,-128,[0,"f7NISe7HdAD68SLfhnddy8"],[5,36,47]],[6,-129,[0,"e71ctEmpxFC4KlSYRZNz/a"],14],[97,8,-21.474999999999994,1,-130,[0,"2e9Z+5Z2hERrC4dEeETTXQ"]]],[1,"42WC8lfx1GAbNmJ4uM9Txx",1,0],[1,-25.139999999999993,0.001,0]],[187,"finger",false,33554432,3,[[2,-131,[0,"f7NISe7HdAD68SLfhnddy8"],[5,229,211]],[63,2,false,-132,[0,"e71ctEmpxFC4KlSYRZNz/a"],15],[105,true,-133,[0,"0fIvJMmaxJ0IBjtupV3rL1"],[16],17]],[1,"8bBWmrx15HIbGMIcWqVntr",1,0],[1,4.132,-121.502,0],[1,0.6,0.6,0.6]],[131,"singleButton",false,33554432,1,[[[2,-134,[0,"f6of09mqtBu6lmIn9cHqW8"],[5,140.73,40]],[220,"直接领取",35,35,false,-135,[0,"d8j2fNg4tC0bODMZJ/pNEB"],19],-136],4,4,1],[1,"4dIcgdeR9C/68a6pGqHVyR",1,0],[1,0,-433,0]],[89,"orange",false,33554432,2,[[2,-137,[0,"f7NISe7HdAD68SLfhnddy8"],[5,196,38]],[6,-138,[0,"e71ctEmpxFC4KlSYRZNz/a"],21]],[1,"ba/EvVkAxF76hBhFv3Iy6r",1,0],[1,53.303,-21.600000000000023,0]],[16,"progress_tick",33554432,2,[[[2,-139,[0,"45vQ+KCqpLzq1Y+mdU9PGI"],[5,77.29,40]],-140,-141],4,1,1],[1,"55HL7eOLVMqqjox/WpaqxP",1,0],[1,47.759,-22.2,0]],[92,"light",33554432,1,[[2,-142,[0,"f7NISe7HdAD68SLfhnddy8"],[5,480,479]],[23,0,-143,[0,"e71ctEmpxFC4KlSYRZNz/a"],0]],[1,"da+PTtHCJHV6hufY3ixjvA",1,0],[1,0,317.179,0],[3,0,0,0.33106616272943845,0.9436075433651455],[1,0,0,38.667]],[92,"title",33554432,1,[[2,-144,[0,"f7NISe7HdAD68SLfhnddy8"],[5,451,127]],[6,-145,[0,"e71ctEmpxFC4KlSYRZNz/a"],1]],[1,"e78M8QjlREsqWxsdj523Qx",1,0],[1,0,330,0],[3,0,0,0.09088460848778514,0.9958614300895592],[1,0,0,10.429]],[8,"common_human",33554432,9,[[2,-146,[0,"f7NISe7HdAD68SLfhnddy8"],[5,26,43]],[6,-147,[0,"e71ctEmpxFC4KlSYRZNz/a"],4]],[1,"e2NnPxlexELZO9kwqXY7vg",1,0],[1,-44.773,0,0]],[8,"common_human",33554432,10,[[2,-148,[0,"f7NISe7HdAD68SLfhnddy8"],[5,36,47]],[6,-149,[0,"e71ctEmpxFC4KlSYRZNz/a"],6]],[1,"81N6juby5HkrCQzENyxKme",1,0],[1,-44.773,0.244,0]],[8,"common_human",33554432,11,[[2,-150,[0,"f7NISe7HdAD68SLfhnddy8"],[5,36,47]],[6,-151,[0,"e71ctEmpxFC4KlSYRZNz/a"],8]],[1,"f9aa+J5CJFfaTe+0+3j9nU",1,0],[1,-44.773,-1,0]],[8,"video",33554432,3,[[2,-152,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[6,-153,[0,"e71ctEmpxFC4KlSYRZNz/a"],13]],[1,"e1G/H4k79JCbhTDLfOSZeC",1,0],[1,-93.535,-66.714,0]],[16,"Bar",33554432,7,[[[22,-154,[0,"80SdIywIVFupwJOwCni0ux"],[5,196,38],[0,0,0.5]],-155],4,1],[1,"85/kAVTVlFGIl7jSTm8x79",1,0],[1,-98.283,0,0]],[8,"progress_lottery_4",33554432,2,[[2,-156,[0,"f7NISe7HdAD68SLfhnddy8"],[5,96,96]],[6,-157,[0,"e71ctEmpxFC4KlSYRZNz/a"],22]],[1,"4czb7RUA5GxpuPiVqGXskN",1,0],[1,-87.502,0,0]],[16,"icon",33554432,2,[[[136,-158,[0,"f7NISe7HdAD68SLfhnddy8"]],-159],4,1],[1,"f86pJ+dRNJaofBjJ4X4JjN",1,0],[1,-87.502,0,0]],[16,"title",33554432,2,[[[2,-160,[0,"77oXWhraZIW4gK4g0aNWKr"],[5,150,40]],-161],4,1],[1,"2bb4ARt7NHnZmnsjrcAzGY",1,0],[1,46.909,21.961,0]],[21,"Label",33554432,8,[[30,"Label<UITransform>",-162,[0,"a40oN0GkRPWYlkjPVWpfn9"],[5,140.73,48]],[64,"Label<Label>","直接领取",35,35,48,false,false,-163,[0,"afx7ldGJRP8pVcFhB530qB"],29]],[1,"66AlgDyAdF9Z6GEOLs9qKM",1,0]],[8,"game_video",33554432,5,[[2,-164,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[6,-165,[0,"e71ctEmpxFC4KlSYRZNz/a"],32]],[1,"90j/Vz7ItDOpdN5YucMb+a",1,0],[1,-58.356,0,0]],[8,"Label",33554432,5,[[30,"Label<UITransform>",-166,[0,"a2px12nqpJk5LNyUNUG78c"],[5,120.63,35]],[64,"Label<Label>","双倍领取",30,30,35,false,false,-167,[0,"73tDBtLFBKJoWjkuNCmp9o"],33]],[1,"b4oF95G8JKG5FHFgWV6AzH",1,0],[1,31.773,0,0]],[21,"Label",33554432,6,[[30,"Label<UITransform>",-168,[0,"b6LyUHpk5GdJ49sgEsdgTb"],[5,140.73,48]],[64,"Label<Label>","双倍领取",35,35,48,false,false,-169,[0,"b6jMoieOBASL43DV3whbQ2"],36]],[1,"91qHn8V0tL/L2I20XVpZle",1,0]],[8,"Label-001",33554432,16,[[30,"Label<UITransform>",-170,[0,"8epJmwU0NMOJ6kPhn1mXQk"],[5,80.42,25]],[64,"Label<Label>","分享录屏",20,20,25,false,false,-171,[0,"5c+KylAaNPlK+lRJqRDrny"],37]],[1,"deQmOGAhtEg7TqmiXrjUnS",1,0],[1,45.755,18.226,0]],[221,"000K",40,2,false,false,17,[0,"31FmD3c0lJ2p4Rovo+l4S0"]],[161,17,[0,"f2WNQ2qtNN6JcN6VtyZZ+q"],45],[100,"0",45,45,48,2,false,19,[0,"7a18bmCLdN85hQBU+++quE"]],[245,19,[0,"b6vpY/HXlLxZzlifTYYVku"],47],[100,"0",45,45,48,2,false,20,[0,"c3cNoKOmJCq4CaqnzGxa0j"]],[161,20,[0,"7bUqwFSC5IqaWo5sfQ9RSD"],49],[100,"0",45,45,48,2,false,21,[0,"78lKesqZVEI7pcDV57OOPQ"]],[246,"x",1,21,[0,"c6ZFP/gGxE5aZkTifgzEjq"],51],[150,"    0",40,false,12,[0,"a8PGW9/AhOFbmCMQmugFJ6"]],[162,"    ",12,[0,"8fjgij6ztM5JU13t4y+dJH"],53],[150,"  0",40,false,13,[0,"55PJ3/i5VB7afYkwAp+dnG"]],[162,"  ",13,[0,"69/UNIYbxJJJX8VNGXG9qx"],55],[99,3,3,[0,"cfLli4uDpJnbIcukR5LTwL"],[[7,"9081fsbKhBCHo++BAo/6RzJ","onVideoButtonClick",1]]],[99,3,27,[0,"cfxY02M/dFQLiSfHAAIGjG"],[[7,"9081fsbKhBCHo++BAo/6RzJ","onSingleButtonClick",1]]],[208,2,0,false,36,[0,"e00niSjJdHzqQfr6Uq+1as"]],[82,196,1,7,[0,"3f/uAXDzRCkYMASuN3GC61"],59],[164,7,[0,"81BOdfchpDWYo5rzm84oG5"],60],[73,2,false,38,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[101,"25%",35,35,false,29,[0,"e6nSNtgK1C8LhXOuBwP7iy"]],[247,"%",true,29,[0,"6fDLbQF69JFqhRtRux671A"],63],[101,"累计解锁奖励",25,25,false,39,[0,"faJUrxL3tLGJaFqc9+sRI8"]],[79,14,[0,"23Tlurr+RLkI9QJ0fZmUkp"],[24,25]],[79,1,[0,"9aAY5IhORGSJivMY1NbmoS"],[44,45,46]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-5,67,0,54,58,0,55,57,0,56,24,0,57,4,0,58,56,0,59,54,0,60,52,0,61,50,0,62,48,0,11,67,0,0,1,0,-1,30,0,-2,31,0,-3,4,0,-4,9,0,-5,10,0,-6,11,0,-7,22,0,-8,3,0,-9,27,0,-10,14,0,-11,15,0,0,2,0,0,2,0,-1,7,0,-2,28,0,-3,37,0,-4,38,0,-5,29,0,-6,39,0,0,3,0,0,3,0,-3,57,0,-1,24,0,-2,35,0,-3,13,0,-4,26,0,0,4,0,0,4,0,34,46,0,0,4,0,-1,17,0,-2,18,0,0,5,0,0,5,0,5,5,0,0,5,0,-1,41,0,-2,42,0,0,6,0,0,6,0,5,6,0,0,6,0,-1,43,0,-2,16,0,0,7,0,0,7,0,-3,60,0,-4,61,0,-1,36,0,0,8,0,0,8,0,5,8,0,0,8,0,-1,40,0,0,9,0,0,9,0,-1,32,0,-2,19,0,0,10,0,0,10,0,-1,33,0,-2,20,0,0,11,0,0,11,0,-1,34,0,-2,21,0,0,12,0,-2,53,0,-3,54,0,-1,23,0,0,13,0,-2,55,0,-3,56,0,-1,25,0,0,14,0,-2,66,0,63,28,0,64,61,0,35,64,0,36,65,0,24,62,0,11,66,0,0,14,0,0,15,0,0,16,0,0,16,0,0,16,0,-1,44,0,0,17,0,-2,45,0,-3,46,0,0,18,0,0,18,0,0,18,0,0,19,0,-2,47,0,-3,48,0,0,20,0,-2,49,0,-3,50,0,0,21,0,-2,51,0,-3,52,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,-3,58,0,0,28,0,0,28,0,0,29,0,-2,63,0,-3,64,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,0,36,0,-2,59,0,0,37,0,0,37,0,0,38,0,-2,62,0,0,39,0,-2,65,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,9,1,2,3,14,5,3,15,6,3,15,8,3,15,12,3,22,171],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,47,49,51,53,55,57,58,59,59,62,63,65],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1,8,1,2,1,1,1,1,-1,-2,37,65,66,2,1,4,1,2,1,4,2,2,1,-1,8,1,4,1,-1,-2,-3,67,2,2,2,2,2,2,4,4,14,1,1,2,2],[47,90,3,19,91,37,92,37,93,37,48,94,95,7,48,11,49,49,50,0,96,97,98,99,13,14,51,100,101,0,9,9,7,0,2,2,0,0,52,53,53,2,2,102,103,104,105,106,0,0,0,0,0,0,50,32,107,108,54,0,0]],[[[127,"slidingFinger",2,2.0166666666666666,2443964229,[[0,1,2.0166666666666666],[0,1,2.0166666666666666]],[[[{},"modifiers",12,[[[13,"finger"],"position"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[1,-144,15.923,0],[1,144,15.923,0],[1,-144,15.923,0]],8,8,8]]],[{},"modifiers",12,[[[13,"Label"],[20,"cc.Label"],"color"],4,4,0],"data",11,[{"keys":1,"easingMethods":{}},"values",12,[[[4,4294967295],[4,1694498815],[4,4294967295]],8,8,8]]]],11,11]]],0,0,[],[],[]],[[[83,"loadingPageManRun",24,2,0.375,4150647167,[[0,0.08333333333333333,0.16666666666666666,0.25,0.3333333333333333]],[[[{},"modifiers",12,[[[20,"cc.Sprite"],"spriteFrame"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",3,[0,1,2,3,4]]]],11]]],0,0,[0,0,0,0,0],[-1,-2,-3,-4,-5],[38,109,110,111,38]],[[[25,"smokeBlue"],[94,"smokeBlue",2,[-2],[1,"48XzdOyFlJJLoZ0kGFUGXX",-1,0],[1,0,1.651,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,90,0,0]],[109,0.5,false,false,30,1,[0,"1fvP5/su5Pealsx7VIPmpW"],[0],[57,2,[4,4294945623],[4,4294934528]],[14,0.6],[4],[4],[14,1.8],[4],[4],[4],[4],[14,0.4],[4],[4],[4],[[111,[14,30]]],[112,[57,2,[4,4278190335],[4,4278190335]]],[113,true,3,0.5,[14,1]],[114,true,[110,1,[115,2,8,[[116,1],[117,1,0.01]]]],[4],[4],[4]],[118,[4],[4],[4],[14,1]],[119,[4],[4],[4]],[120,[4],[4],[4],[4]],[121,[4],[4],[4]],[122,[4],[4]],[123,[14,1],[4],[58],[58],-3],[124,1]]],0,[0,7,1,0,-1,2,0,25,2,0,9,1,3],[0,0],[-1,26],[39,25]],[[[248,0,0,0,0.1]],0,0,[],[],[]],[[[125,"bottomShader",48,{"commonHeight":51,"fontSize":48,"atlasName":"bottomShader.png","fontDefDictionary":{"32":{"xOffset":0,"yOffset":46,"xAdvance":11,"rect":{"x":234,"y":314,"width":0,"height":0}},"43":{"xOffset":2,"yOffset":13,"xAdvance":29,"rect":{"x":175,"y":314,"width":27,"height":31}},"48":{"xOffset":2,"yOffset":8,"xAdvance":29,"rect":{"x":183,"y":263,"width":27,"height":42}},"49":{"xOffset":4,"yOffset":9,"xAdvance":29,"rect":{"x":118,"y":314,"width":24,"height":40}},"50":{"xOffset":2,"yOffset":8,"xAdvance":29,"rect":{"x":2,"y":314,"width":27,"height":41}},"51":{"xOffset":1,"yOffset":8,"xAdvance":29,"rect":{"x":212,"y":263,"width":27,"height":42}},"52":{"xOffset":1,"yOffset":9,"xAdvance":29,"rect":{"x":60,"y":314,"width":28,"height":40}},"53":{"xOffset":1,"yOffset":9,"xAdvance":29,"rect":{"x":31,"y":314,"width":27,"height":41}},"54":{"xOffset":2,"yOffset":8,"xAdvance":29,"rect":{"x":241,"y":263,"width":27,"height":42}},"55":{"xOffset":2,"yOffset":9,"xAdvance":29,"rect":{"x":90,"y":314,"width":26,"height":40}},"56":{"xOffset":2,"yOffset":8,"xAdvance":29,"rect":{"x":299,"y":263,"width":26,"height":42}},"57":{"xOffset":2,"yOffset":8,"xAdvance":29,"rect":{"x":270,"y":263,"width":27,"height":42}},"95":{"xOffset":1,"yOffset":48,"xAdvance":27,"rect":{"x":204,"y":314,"width":28,"height":9}},"120":{"xOffset":1,"yOffset":17,"xAdvance":29,"rect":{"x":144,"y":314,"width":29,"height":32}},"20139":{"xOffset":2,"yOffset":4,"xAdvance":48,"rect":{"x":2,"y":211,"width":45,"height":50}},"20813":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":252,"y":2,"width":48,"height":50}},"20851":{"xOffset":6,"yOffset":4,"xAdvance":48,"rect":{"x":143,"y":211,"width":38,"height":50}},"20998":{"xOffset":0,"yOffset":4,"xAdvance":48,"rect":{"x":150,"y":2,"width":49,"height":50}},"21040":{"xOffset":1,"yOffset":5,"xAdvance":48,"rect":{"x":282,"y":211,"width":46,"height":49}},"21152":{"xOffset":1,"yOffset":5,"xAdvance":48,"rect":{"x":2,"y":263,"width":45,"height":49}},"21327":{"xOffset":2,"yOffset":4,"xAdvance":48,"rect":{"x":2,"y":55,"width":48,"height":50}},"21345":{"xOffset":2,"yOffset":4,"xAdvance":48,"rect":{"x":198,"y":159,"width":46,"height":50}},"22791":{"xOffset":0,"yOffset":4,"xAdvance":48,"rect":{"x":201,"y":2,"width":49,"height":50}},"22810":{"xOffset":2,"yOffset":4,"xAdvance":48,"rect":{"x":49,"y":211,"width":45,"height":50}},"24425":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":52,"y":55,"width":48,"height":50}},"25103":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":2,"y":159,"width":47,"height":50}},"25321":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":102,"y":55,"width":48,"height":50}},"25910":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":152,"y":55,"width":48,"height":50}},"25919":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":202,"y":55,"width":48,"height":50}},"26085":{"xOffset":7,"yOffset":6,"xAdvance":48,"rect":{"x":145,"y":263,"width":36,"height":47}},"26356":{"xOffset":2,"yOffset":6,"xAdvance":48,"rect":{"x":49,"y":263,"width":47,"height":48}},"26377":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":246,"y":159,"width":46,"height":50}},"26700":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":51,"y":159,"width":47,"height":50}},"27599":{"xOffset":1,"yOffset":3,"xAdvance":48,"rect":{"x":52,"y":2,"width":47,"height":51}},"28155":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":252,"y":55,"width":48,"height":50}},"28216":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":2,"y":107,"width":48,"height":50}},"29289":{"xOffset":0,"yOffset":4,"xAdvance":48,"rect":{"x":52,"y":107,"width":48,"height":50}},"31036":{"xOffset":0,"yOffset":4,"xAdvance":48,"rect":{"x":102,"y":107,"width":48,"height":50}},"31169":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":152,"y":107,"width":48,"height":50}},"31574":{"xOffset":1,"yOffset":3,"xAdvance":48,"rect":{"x":2,"y":2,"width":48,"height":51}},"31614":{"xOffset":1,"yOffset":3,"xAdvance":48,"rect":{"x":233,"y":211,"width":47,"height":49}},"32422":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":294,"y":159,"width":46,"height":50}},"34255":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":202,"y":107,"width":48,"height":50}},"35013":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":252,"y":107,"width":48,"height":50}},"35758":{"xOffset":2,"yOffset":4,"xAdvance":48,"rect":{"x":100,"y":159,"width":47,"height":50}},"36153":{"xOffset":1,"yOffset":4,"xAdvance":48,"rect":{"x":149,"y":159,"width":47,"height":50}},"36873":{"xOffset":1,"yOffset":3,"xAdvance":48,"rect":{"x":101,"y":2,"width":47,"height":51}},"38544":{"xOffset":3,"yOffset":4,"xAdvance":48,"rect":{"x":96,"y":211,"width":45,"height":50}},"38754":{"xOffset":2,"yOffset":6,"xAdvance":48,"rect":{"x":98,"y":263,"width":45,"height":48}},"39044":{"xOffset":1,"yOffset":5,"xAdvance":48,"rect":{"x":183,"y":211,"width":48,"height":49}}},"kerningDict":{}}]],0,0,[0],[27],[112]],[[[238,"4",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[38,13],[25,113]],[[[249,"GameScene"],[170,"mainPage",false,33554432,[-4,-5,-6,-7],[[[3,-1,[5,640,1136]],[137,45,100,100,-2],-3],4,4,1]],[171,"Canvas",512,33554432,"8aMBdExBVAyLz6N5mi2KQL",[-12,-13,-14,1,-15,-16,-17,-18],[[[2,-8,[0,"0dngp/9gNO34wUQjZfN/CX"],[5,640,1136]],-9,[98,45,-10,[0,"e8a+bU/8dPDbbJguUzLdoF"]],-11],4,1,4,1],[1,320,568,0]],[70,"progress",33554432,[-28,-29,-30,-31,-32,-33,-34,-35],[[3,-19,[5,348,77.884]],[209,0,false,-20,139],[250,-27,[-23,-24,-25,-26],-22,-21]],[1,0,298.058,0]],[15,"left",33554432,1,[-38,-39,-40,-41,-42,-43,-44,-45],[[71,-36,[5,100,1056],[0,0,0]],[219,false,1,2,25,0,-37]],[1,-320,-200,0]],[70,"shotLvNode",33554432,[-56,-57,-58,-59,-60,-61],[[3,-46,[5,169,213]],[9,-47,97],[24,3,-49,[[7,"e5038wqFtlGmqAg64qqMWyM","onSelfButtonClick",-48]],98],[251,-55,-54,-53,-52,-51,-50]],[1,-121.32600000000002,107,0]],[70,"diamondLvNode",33554432,[-72,-73,-74,-75,-76,-77],[[3,-62,[5,169,213]],[9,-63,106],[24,3,-65,[[7,"ba407U1NF5FQpmHLyOlzDoy","onSelfButtonClick",-64]],107],[252,-71,-70,-69,-68,-67,-66]],[1,-121.32600000000002,350.85875,0]],[253,"GameScene",[-84,-85,-86,-87,-88,-89,-90,-91,-92,2],[216,[[126,["meshRenderer"],-79,-78,[42,["85cFr5iwdRHIbrZJO2wdIv"]]],[126,["animation"],-81,-80,[42,["5bOpZ/jlhcwqR9vYPk0yj9"]]],[126,["itemCtrl"],-83,-82,[42,["c8dQQB16dP8qaZeB5kyZcr"]]]]],[254,[255],[256,1,true,false,20,1,[4,1644167168],[0,1024,1024]],[257],[258,[4,4278190335]]]],[172,"hero",2,"a5F3+Ih8hBOYJTgn5+aDYF",7,[-101,-102],[[-93,[259,-94,[1,0,0.65,0],[1,0.3,1,0.3],14],[261,0.15,-95,[1,0,0.15,0],15],-96,[262,-100,-99,-98,-97]],1,4,4,1,4],[1,0,1,0]],[173,"mutualPushItem",false,33554432,[-109,-110,-111,-112],[[[2,-103,[0,"10X0hzjd5EEYkyz3KQwGzK"],[5,180,240]],[11,1,0,-104,[0,"d5x7RZ6MRJ6aKlpbowDWRE"],109],-105,[38,3,-108,[0,"743pWKvjtGe6Hyh2eTyP6k"],[[7,"b482dH9f2NMMaZve+RJMsy6","onSelfClick",-107]],[4,4292269782],-106,110]],4,4,1,4],[1,-24.85,76.805,0],[1,0.6,0.6,0.6]],[86,"playPage",false,33554432,2,[-116,-117,3,-118,-119,-120],[[[3,-113,[5,640,1136]],[137,45,100,100,-114],-115],4,4,1]],[15,"recordNode",33554432,2,[-130,-131],[[3,-121,[5,90,90]],[34,0,-122,156],[202,9,0,-123],[24,3,-125,[[7,"0df84Vf/yxLfqhm46KHnl2N","onSelfButtonClick",-124]],157],[263,-128,-127,-126,158,159,160,161],[264,-129]],[1,-275,523,0]],[86,"touchForShotNode",false,33554432,2,[-135,-136,-137,-138],[[[3,-132,[5,640,1136]],[138,45,100,100,0,-133,2],-134],4,4,1]],[188,"clickButton",false,33554432,12,[-144,-145],[[2,-139,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,237,204]],[210,1,false,-140,[0,"77BcV1zfNHo4LI4KRqZupe"],31],[75,2,-142,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"a710bVyc0hA3Jjf44p56Sde","onClickButtonClick",12]],[4,4292269782],-141,32,33,34,35],[233,-143,[36],37]],[1,0,-478,0],[1,0.9,0.9,0.9]],[15,"key",33554432,1,[-147,-148,-149,-150,-151,-152],[[72,-146]],[1,0,400,0]],[61,"key",false,33554432,10,[-154,-155,-156,-157,-158,-159],[[72,-153]],[1,0,300,0]],[199,"body",2,8,[-161,-162,-163,-164],[-160],[3,0,1,0,6.123233995736766e-17],[1,2,2,2],[1,0,180,0]],[61,"tipNode",false,33554432,12,[-168,-169,-170],[[2,-165,[0,"c68UOAlNhN171Umca6yVvF"],[5,640,321.363]],[139,4,540.2624999999999,-166],[56,true,-167,[27],28]],[1,0,132.94399999999993,0]],[15,"right",33554432,1,[5,6,-172,-173,-174],[[71,-171,[5,0,0],[0,1,0]]],[1,320,-200,0]],[134,"more",false,33554432,[-179,-180,-181],[[3,-175,[5,342.164,121]],[55,1,0,-176,114],[24,3,-178,[[7,"5ec1eYnV3tHP5BsQgZwUMNo","onMoreButtonClick",-177]],115]],[1,90.1565,-84.395,0]],[134,"appBoxButton",false,33554432,[-186,-187,-188],[[3,-182,[5,342.164,121]],[55,1,0,-183,120],[24,3,-185,[[7,"b0831EECZ1GCa25FhoK6vWx","onAppBoxButtonClick",-184]],121]],[1,90.1565,-84.395,0]],[61,"grab",false,33554432,18,[-192,-193,-194,-195],[[2,-189,[0,"f7NISe7HdAD68SLfhnddy8"],[5,111,144]],[6,-190,[0,"e71ctEmpxFC4KlSYRZNz/a"],126],[24,3,-191,[[7,"5fd073HJd1IPKckadpjRp94","onGrabButtonClick",1]],127]],[1,-310.126,711.594,0]],[15,"diamond",33554432,10,[-198,-199,-200,-201],[[2,-196,[0,"f7NISe7HdAD68SLfhnddy8"],[5,183,60]],[53,1,-197,[0,"e71ctEmpxFC4KlSYRZNz/a"],131]],[1,-253,400,0]],[189,"Canvas_back",false,1,"30FtJtEWVMBbcRGoIl4WGH",7,[-206,-207,-208],[[2,-202,[0,"0dngp/9gNO34wUQjZfN/CX"],[5,640,1136]],[165,-204,[0,"3f2oTdCepERZdpmIfLsrhd"],-203],[98,45,-205,[0,"e8a+bU/8dPDbbJguUzLdoF"]]],[1,320,568,0]],[70,"tipNode",33554432,[-213],[[2,-209,[0,"c68UOAlNhN171Umca6yVvF"],[5,640,418.20000000000005]],[34,0,-210,21],[139,4,2.842170943040401e-14,-211],[56,true,-212,[22],23]],[1,0,-358.9,0]],[61,"progress",false,33554432,12,[-216,-217,-218],[[3,-214,[5,308.005,46.186]],[211,1,0,false,-215,40]],[1,0,399.62600000000003,0]],[15,"clothes",33554432,4,[-222,-223,-224],[[3,-219,[5,190,121]],[9,-220,48],[24,3,-221,[[7,"5fd073HJd1IPKckadpjRp94","onShopButtonClick",1]],49]],[1,47.65,60.5,0]],[15,"gift",33554432,4,[-228,-229,-230],[[3,-225,[5,190,100]],[55,1,0,-226,53],[24,3,-227,[[7,"5fd073HJd1IPKckadpjRp94","onFreeButtonClick",1]],54]],[1,27.094,196,0]],[15,"signin",33554432,4,[-234,-235,-236],[[3,-231,[5,190,110]],[55,1,0,-232,58],[24,3,-233,[[7,"5fd073HJd1IPKckadpjRp94","onSiginButtonClick",1]],59]],[1,27.094,326,0]],[15,"share",33554432,4,[-240,-241,-242],[[3,-237,[5,190,110]],[34,0,-238,63],[24,3,-239,[[7,"5fd073HJd1IPKckadpjRp94","onShareButtonClick",1]],64]],[1,27.094,461,0]],[15,"order",33554432,4,[-246,-247,-248],[[3,-243,[5,190,110]],[34,0,-244,76],[24,3,-245,[[7,"5fd073HJd1IPKckadpjRp94","onOrderButtonClick",1]],77]],[1,27.094,866,0]],[15,"diamondNode",33554432,1,[-253,-254],[[2,-249,[0,"f7NISe7HdAD68SLfhnddy8"],[5,183,60]],[53,1,-250,[0,"e71ctEmpxFC4KlSYRZNz/a"],83],[242,-252,-251]],[1,253,400,0]],[266,8,16],[174,"mankindCount",512,2,8,[-258,-259],[[[3,-255,[5,1,1]],[267,-256],-257],4,4,1],[1,-0.04,2.949,-0.147],[3,-0.11564667301260911,0.10216441302243134,0.011959081044208996,0.9879500291580919],[1,2.5,2.5,2.5],[1,-13.353,11.808,0]],[15,"tipNode",33554432,24,[-262,-263,-264],[[2,-260,[0,"c68UOAlNhN171Umca6yVvF"],[5,640,282.389]],[56,true,-261,[19],20]],[1,0,-3.26,0]],[15,"collect",33554432,4,[-268,-269],[[3,-265,[5,190,110]],[34,0,-266,67],[24,3,-267,[[7,"5fd073HJd1IPKckadpjRp94","onCollectButtonClick",1]],68]],[1,27.094,596,0]],[15,"colorSign",33554432,4,[-273,-274],[[3,-270,[5,190,110]],[34,0,-271,71],[24,3,-272,[[7,"5fd073HJd1IPKckadpjRp94","onColorSignButtonClick",1]],72]],[1,27.094,731,0]],[15,"privacy",33554432,4,[-278,-279],[[3,-275,[5,190,110]],[34,0,-276,80],[24,3,-277,[[7,"5fd073HJd1IPKckadpjRp94","onPrivacyButtonClick",1]],81]],[1,27.094,1001,0]],[15,"pushNode",33554432,18,[9,19],[[3,-280,[5,163.942,291.825]],[268,-282,-281,19,116]],[1,-124.88300000000004,634.13,0]],[61,"QQIconNode",false,33554432,18,[-286,20],[[3,-283,[5,163.942,291.825]],[269,-285,20,-284]],[1,-124.88300000000004,634.13,0]],[15,"cannon",33554432,10,[-289,-290],[[2,-287,[0,"f7NISe7HdAD68SLfhnddy8"],[5,183,60]],[53,1,-288,[0,"e71ctEmpxFC4KlSYRZNz/a"],141]],[1,-253,-300,0]],[190,"cheat",false,2,[-293,-294],[[72,-291],[270,-292]]],[15,"EditBox",33554432,41,[-300,-301],[[2,-295,[0,"1fhJOVuOVAGYSYZoiE25Uz"],[5,160,40]],[11,1,0,-296,[0,"43qH95z3VGeYelCElKd6FW"],149],[271,6,8,-299,[0,"1bCHrwPGZOPrbmPh93kwpe"],-298,-297,150]],[1,108.512,513.797,0]],[15,"Button",33554432,41,[-306],[[2,-302,[0,"98TYGMtwRBTYZZn4EZmhzJ"],[5,100,40]],[11,1,0,-303,[0,"77BcV1zfNHo4LI4KRqZupe"],151],[75,3,-305,[0,"2fOwBXUwBNvaJ4NyyrOq4C"],[[7,"3d2b7Ew4wNIDKmEqo2SRg1s","onResetButtonClick",41]],[4,4292269782],-304,152,153,154,155]],[1,267.7850000000001,517.069,0]],[15,"cloud",1,23,[-309,-310],[[3,-307,[5,640,103]],[56,true,-308,[3],4]],[1,0,55.679,0]],[86,"touchForMoveNode",false,33554432,2,[24],[[[3,-311,[5,640,1136]],[138,45,100,100,0,-312,2],-313],4,4,1]],[59,"bottomLabel",33554432,5,[-316],[[[3,-314,[5,83.75,30]],-315],4,1],[1,18,-71,0]],[29,"diamondIcon",33554432,46,[[2,-317,[0,"f7NISe7HdAD68SLfhnddy8"],[5,116,141]],[6,-318,[0,"e71ctEmpxFC4KlSYRZNz/a"],92],[140,8,-38.15399999999999,1,-319,46]],[1,-62.629,1.846,0],[1,0.3,0.3,0.3]],[29,"finger",33554432,5,[[2,-320,[0,"f7NISe7HdAD68SLfhnddy8"],[5,229,211]],[63,2,false,-321,[0,"e71ctEmpxFC4KlSYRZNz/a"],94],[56,true,-322,[95],96]],[1,-54,40,0],[1,-0.7,0.7,0.7]],[59,"bottomLabel",33554432,6,[-325],[[[3,-323,[5,83.75,30]],-324],4,1],[1,18,-71,0]],[29,"diamondIcon",33554432,49,[[2,-326,[0,"f7NISe7HdAD68SLfhnddy8"],[5,116,141]],[6,-327,[0,"e71ctEmpxFC4KlSYRZNz/a"],101],[140,8,-38.15399999999999,1,-328,49]],[1,-62.629,1.846,0],[1,0.3,0.3,0.3]],[29,"finger",33554432,6,[[2,-329,[0,"f7NISe7HdAD68SLfhnddy8"],[5,229,211]],[63,2,false,-330,[0,"e71ctEmpxFC4KlSYRZNz/a"],103],[56,true,-331,[104],105]],[1,-54,40,0],[1,-0.7,0.7,0.7]],[191,"boy001",512,false,2,[-333],[[237,false,-332,[0,"5bOpZ/jlhcwqR9vYPk0yj9"],[171,172,173,174,175],176]],[1,0,1,0],[3,0,1,0,6.123233995736766e-17],[1,1.5,1.5,1.5],[1,0,180,0]],[43,"back_bg",1,23,[[3,-334,[5,640,1136]],[34,0,-335,0],[203,45,320,568,0,-336]]],[87,"label",2,33,[[[2,-337,[0,"c68UOAlNhN171Umca6yVvF"],[5,23,35]],-338,-339],4,1,1],[1,0,0.057,0.01],[1,0.006,0.006,0.047]],[68,"mixamorig_Hips",2,[-340,-341,-342],[1,0.002063411520794034,0.2593175768852234,-0.01236803736537695],[3,0.0023929856378427745,0.995876079101868,0.06685621326741793,0.06128095495313775],[1,-7.635983534023475,173.00707807406081,0.7425889600684812]],[68,"mixamorig_Spine2",2,[-343,-344,-345],[1,-3.552713599391162e-17,0.05638634413480759,0],[3,0.029252197995834433,0.015935689430097974,-0.010050659206182446,0.9993944901610781],[1,3.370941359491348,1.8593476206728394,-1.0976731676017177]],[200,"gameCamera",2,"56dqBf6edPy4LR8LEniAIi",7,[-346,-347],[1,1.955,5.896,10.881],[3,-0.13538962595414242,0.0852982944466724,0.010020073704909621,0.9870630416905671],[1,-15.604,9.852,-0.19]],[27,"bar",33554432,25,[[[71,-348,[5,290,26],[0,0,0.5]],-349,-350],4,1,1],[1,-145.687,0,0]],[5,"red",33554432,26,[[2,-351,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-352,[0,"e71ctEmpxFC4KlSYRZNz/a"],47]],[1,85.947,50.488,0]],[5,"red",33554432,27,[[2,-353,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-354,[0,"e71ctEmpxFC4KlSYRZNz/a"],52]],[1,85.947,47.727,0]],[5,"red",33554432,28,[[2,-355,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-356,[0,"e71ctEmpxFC4KlSYRZNz/a"],57]],[1,85.947,47.727,0]],[5,"red",33554432,29,[[2,-357,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-358,[0,"e71ctEmpxFC4KlSYRZNz/a"],62]],[1,85.947,47.727,0]],[5,"red",33554432,30,[[2,-359,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-360,[0,"e71ctEmpxFC4KlSYRZNz/a"],75]],[1,85.947,47.727,0]],[27,"diamondLabel",33554432,31,[[[3,-361,[5,103.33,40]],-362,-363],4,1,1],[1,16.729,0,0]],[29,"diamondIcon",33554432,31,[[3,-364,[5,116,141]],[9,-365,82],[204,8,8.086999999999996,0,-366]],[1,-63.113000000000014,0,0],[1,0.35,0.35,0.35]],[5,"key0",33554432,14,[[3,-367,[5,36,48]],[9,-368,85]],[1,-55,0,0]],[43,"key1",33554432,14,[[3,-369,[5,36,48]],[9,-370,87]]],[5,"key2",33554432,14,[[3,-371,[5,36,48]],[9,-372,89]],[1,55,0,0]],[29,"videoIcon",33554432,5,[[2,-373,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[6,-374,[0,"e71ctEmpxFC4KlSYRZNz/a"],93]],[1,-50.835,-68.566,0],[1,0.8,0.8,0.8]],[29,"videoIcon-001",33554432,6,[[2,-375,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[6,-376,[0,"e71ctEmpxFC4KlSYRZNz/a"],102]],[1,-50.835,-68.566,0],[1,0.8,0.8,0.8]],[59,"mark",33554432,9,[-379],[[[2,-377,[0,"0f8+XVd8dKLYBlULLCB3Vb"],[5,97.271,45.71]],-378],4,1],[1,39.177,96.5005,0]],[27,"3DNumber",33554432,22,[[[3,-380,[5,99.17,40]],-381,-382],4,1,1],[1,36.194,0,0]],[59,"pushNode",33554432,22,[-385],[[[2,-383,[0,"10X0hzjd5EEYkyz3KQwGzK"],[5,0,0]],-384],4,1],[1,5.802,-120.559,0]],[42,["8ag4xYRQNDc6KWp96hWbh7"]],[27,"bar",33554432,3,[[[71,-386,[5,290,26],[0,0,0.5]],-387,-388],4,1,1],[1,-158.643,0,0]],[5,"diamond0",33554432,3,[[3,-389,[5,25,30]],[9,-390,134]],[1,-85.487,23.182,0]],[5,"diamond1",33554432,3,[[3,-391,[5,25,30]],[9,-392,135]],[1,-11.106,23.182,0]],[5,"diamond2",33554432,3,[[3,-393,[5,25,30]],[9,-394,136]],[1,61.584,23.464,0]],[5,"diamond3",33554432,3,[[3,-395,[5,83,73]],[9,-396,137]],[1,132.05,1.393,0]],[175,"pink",false,33554432,3,[-399],[[[3,-397,[5,147,64]],-398],4,1],[1,0,-74,0]],[29,"spriteFrame",33554432,80,[[3,-400,[5,116,141]],[9,-401,138],[141,32,-24.037000000000006,1,-402]],[1,75.033,0,0],[1,0.388,0.388,0.388]],[5,"spriteFrame",33554432,40,[[3,-403,[5,57,44]],[9,-404,140]],[1,-31.756,0.831,0]],[5,"key0",33554432,15,[[3,-405,[5,36,48]],[9,-406,143]],[1,-55,0,0]],[43,"key1",33554432,15,[[3,-407,[5,36,48]],[9,-408,145]]],[5,"key2",33554432,15,[[3,-409,[5,36,48]],[9,-410,147]],[1,55,0,0]],[59,"bigDiamondLabel",33554432,10,[-413],[[[3,-411,[5,267.19,110]],-412],4,1],[1,-30.315,164.447,0]],[29,"spriteFrame",33554432,86,[[3,-414,[5,116,141]],[9,-415,148],[141,32,-79.72300000000001,1,-416]],[1,175.38600000000002,0,0],[1,0.654,0.654,0.654]],[68,"mixamorig_Hips",2,[-417,-418,-419],[1,0.002063411520794034,0.2593175768852234,-0.01236803736537695],[3,0.002392992626298097,0.9958760805734121,0.06685619101446526,0.0612809550436888],[1,-7.635980934551485,173.00707810001273,0.7425896024686949]],[68,"mixamorig_Spine2",2,[-420,-421,-422],[1,8.881783998477905e-18,0.05638634413480759,-3.552713599391162e-17],[3,0.029252197995834433,0.015935689430097974,-0.010050659206182446,0.9993944901610781],[1,3.370941359491348,1.8593476206728394,-1.0976731676017177]],[43,"back_cloud0",1,44,[[3,-423,[5,800,103]],[34,0,-424,1]]],[5,"back_cloud1",1,44,[[3,-425,[5,800,327.01]],[55,1,0,-426,2]],[1,0,-170,0]],[176,"bg",2,33,[[[2,-427,[0,"f7NISe7HdAD68SLfhnddy8"],[5,190,152]],-428],4,1],[1,0.002,0.002,0.002]],[222,"1",32,32,35,false,2,54,[0,"2frm37uaJHQr0AEEaYyM82"]],[132,"001",2,16,[-429,55],[1,0.001031705760397017,0.2030099481344223,-0.0061840093694627285]],[88,"mixamorig_HeadTop_End Socket",2,16,[1,-0.0086944287223947,0.9948246522988149,0.04711596146966174],[3,-0.014872127011990031,0.9996891043065057,-0.005494157553204148,-0.019243928958930363],[1,0.662487780956531,-177.78461305385247,-1.6918205514204572]],[88,"mixamorig_LeftToe_End Socket",2,16,[1,0.07272711433904885,0.302079262126885,-0.07560324764239205],[3,0.07720382984028945,0.040350172342354974,0.9746904188846686,-0.20588836680192338],[1,-173.09449777264768,-169.5185000119221,-23.273736617959592]],[88,"mixamorig_RightToe_End Socket",2,16,[1,-0.031762256631616345,0.20861501385951434,-0.06462891876727296],[3,-0.08950854851152235,0.7470231606465523,0.655784585502464,-0.062379440670442286],[1,-82.71231730809052,178.57998546787348,-12.447495520367493]],[272,8],[5,"Label",33554432,34,[[2,-430,[0,"c68UOAlNhN171Umca6yVvF"],[5,289,55]],[151,"滑动开始游戏",48,48,55,false,false,-431,[0,"2frm37uaJHQr0AEEaYyM82"],16]],[1,0,115.447,0]],[5,"mainPage_line",33554432,34,[[3,-432,[5,306,10]],[9,-433,17]],[1,0,54.179,0]],[5,"finger",33554432,34,[[3,-434,[5,64,82]],[9,-435,18]],[1,-144.824,15.923,0]],[133,"collimator",false,33554432,12,[[[2,-436,[0,"c68UOAlNhN171Umca6yVvF"],[5,75,75]],-437],4,1],[1,0,102.791,0]],[5,"Label",33554432,17,[[2,-438,[0,"c68UOAlNhN171Umca6yVvF"],[5,289,55]],[151,"滑动开始射击",48,48,55,false,false,-439,[0,"2frm37uaJHQr0AEEaYyM82"],24]],[1,0,115.447,0]],[5,"mainPage_line",33554432,17,[[3,-440,[5,306,10]],[9,-441,25]],[1,0,54.179,0]],[5,"finger",33554432,17,[[3,-442,[5,64,82]],[9,-443,26]],[1,-144.824,15.923,0]],[192,"Label",512,33554432,13,[[2,-444,[0,"07QMd0h1dLcYd/vjigaip6"],[5,210,40]],[102,"狂点击碎钻石",35,35,false,false,-445,[0,"ee3IZdy2dLIaAWpjI7P0FL"],29]],[1,0,-73.545,0]],[5,"finger",33554432,13,[[2,-446,[0,"f7NISe7HdAD68SLfhnddy8"],[5,229,211]],[63,2,false,-447,[0,"e71ctEmpxFC4KlSYRZNz/a"],30]],[1,25.701,58.067,0]],[5,"normal",33554432,25,[[3,-448,[5,193.33,40]],[78,"钻石破碎程度",32,32,false,-449,38]],[1,-0.543,-46.372499999999995,0]],[43,"mainPage_shot_progress_bar2",33554432,25,[[3,-450,[5,290,26]],[9,-451,39]]],[42,["e51efc9fpAioEPIzQ1XON7"]],[5,"mainPage_clothes",33554432,26,[[3,-452,[5,82,73]],[9,-453,45]],[1,42.042,1.277,0]],[5,"bottomShader",33554432,26,[[3,-454,[5,35.73,80]],[78,"装\n备",35,35,false,-455,46]],[1,-23.899,4.92,0]],[5,"mainPage_icon_gift",33554432,27,[[3,-456,[5,65,77]],[9,-457,50]],[1,49.088,0,0]],[5,"bottomShader",33554432,27,[[3,-458,[5,30,64]],[35,"礼\n物",30,30,32,false,-459,51]],[1,-5.24,0,0]],[29,"mainPage_icon_gift",33554432,28,[[3,-460,[5,78,77]],[9,-461,55]],[1,50.762,0,0],[1,0.8,0.9,1]],[5,"bottomShader-001",33554432,28,[[3,-462,[5,30,64]],[35,"签\n到",30,30,32,false,-463,56]],[1,-5.24,0,0]],[5,"mainPage_icon_gift",33554432,29,[[3,-464,[5,68,67]],[9,-465,60]],[1,50.001,0,0]],[5,"bottomShader-001",33554432,29,[[3,-466,[5,30.63,64]],[35,"分\n享",30,30,32,false,-467,61]],[1,-5.24,0,0]],[5,"mainPage_icon_gift",33554432,35,[[3,-468,[5,50,79]],[9,-469,65]],[1,47.001,0,0]],[5,"collectLabel",33554432,35,[[3,-470,[5,30.63,64]],[35,"收\n藏",30,30,32,false,-471,66]],[1,-5.24,0,0]],[5,"mainPage_icon_gift",33554432,36,[[3,-472,[5,64,80]],[9,-473,69]],[1,47.001,0,0]],[5,"collectLabel",33554432,36,[[3,-474,[5,20.42,96]],[35,"添\n加\n彩\n签",20,20,24,false,-475,70]],[1,-5.24,0,0]],[5,"mainPage_icon_gift",33554432,30,[[3,-476,[5,73,69]],[9,-477,73]],[1,57.076,-2.986,0]],[5,"bottomShader-001",33554432,30,[[3,-478,[5,30.63,64]],[35,"预\n约",30,30,32,false,-479,74]],[1,-5.24,0,0]],[5,"mainPage_icon_gift",33554432,37,[[3,-480,[5,75,64]],[9,-481,78]],[1,49.411,-2.986,0]],[5,"bottomShader-001",33554432,37,[[3,-482,[5,22.92,100]],[35,"i隐\n私\n协\n议",22,22,25,false,-483,79]],[1,-5.24,0.995,0]],[5,"bg0",33554432,14,[[3,-484,[5,40,52]],[9,-485,84]],[1,-55,0,0]],[43,"bg1",33554432,14,[[3,-486,[5,40,52]],[9,-487,86]]],[5,"bg2",33554432,14,[[3,-488,[5,40,52]],[9,-489,88]],[1,55,0,0]],[27,"bufferLabel",33554432,5,[[[3,-490,[5,128.33,40]],-491],4,1],[1,0,-10.719,0]],[5,"normal",33554432,5,[[3,-492,[5,50.52,60]],[35,"射击\n威力",25,25,30,false,-493,90]],[1,30.099,59.669,0]],[5,"mainPage_cannon",33554432,5,[[2,-494,[0,"f7NISe7HdAD68SLfhnddy8"],[5,57,44]],[6,-495,[0,"e71ctEmpxFC4KlSYRZNz/a"],91]],[1,-39.797,55.674,0]],[27,"bufferLabel",33554432,6,[[[3,-496,[5,128.33,40]],-497],4,1],[1,0,-10.719,0]],[5,"normal",33554432,6,[[3,-498,[5,50.52,60]],[35,"钻石\n加成",25,25,30,false,-499,99]],[1,30.099,59.669,0]],[5,"mainPage_cannon",33554432,6,[[2,-500,[0,"f7NISe7HdAD68SLfhnddy8"],[5,55,57]],[6,-501,[0,"e71ctEmpxFC4KlSYRZNz/a"],100]],[1,-39.797,55.674,0]],[5,"panel",33554432,9,[[3,-502,[5,168.626,50]],[55,1,0,-503,108]],[1,-0.516,-90.401,0]],[27,"icon",33554432,9,[[[2,-504,[0,"4aMEgD1ghOgpUdLJRxQ17K"],[5,150,150]],-505],4,1],[1,-0.892,13.197,0]],[27,"name",33554432,9,[[[2,-506,[0,"c6o7FeJU5Bepa7CyWGgrfV"],[5,145,40]],-507],4,1],[1,-0.434,-88.471,0]],[27,"mark",33554432,71,[[[2,-508,[0,"a7cyZ27kNGIKKX1SyGeyCA"],[5,60,40.32]],-509],4,1],[1,1.149,1.149,0]],[5,"mainPage_clothes",33554432,19,[[3,-510,[5,90,65]],[9,-511,111]],[1,-108.42,1.277,0]],[5,"bottomShader",33554432,19,[[3,-512,[5,70,80]],[78,"更多\n游戏",35,35,false,-513,112]],[1,-24.899,4.92,0]],[5,"red",33554432,19,[[2,-514,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-515,[0,"e71ctEmpxFC4KlSYRZNz/a"],113]],[1,-167.406,50.488,0]],[29,"BlockAd",33554432,39,[[2,-516,[0,"10X0hzjd5EEYkyz3KQwGzK"],[5,180,180]]],[1,-24.85,107.43,0],[1,0.6,0.6,0.6]],[5,"mainPage_clothes",33554432,20,[[3,-517,[5,90,65]],[9,-518,117]],[1,-108.42,1.277,0]],[5,"bottomShader",33554432,20,[[3,-519,[5,70,80]],[78,"更多\n游戏",35,35,false,-520,118]],[1,-24.899,4.92,0]],[5,"red",33554432,20,[[2,-521,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-522,[0,"e71ctEmpxFC4KlSYRZNz/a"],119]],[1,-167.406,50.488,0]],[5,"clothes",33554432,21,[[2,-523,[0,"f7NISe7HdAD68SLfhnddy8"],[5,65,59]],[6,-524,[0,"e71ctEmpxFC4KlSYRZNz/a"],122]],[1,0,-7.412,0]],[5,"red",33554432,21,[[2,-525,[0,"f7NISe7HdAD68SLfhnddy8"],[5,38,38]],[6,-526,[0,"e71ctEmpxFC4KlSYRZNz/a"],123]],[1,-50.905,65.002,0]],[193,"video",false,33554432,21,[[2,-527,[0,"f7NISe7HdAD68SLfhnddy8"],[5,30.026,24.81]],[23,0,-528,[0,"e71ctEmpxFC4KlSYRZNz/a"],124]],[1,-31.224,-55.008,0]],[5,"label",33554432,21,[[3,-529,[5,88.92,25]],[35,"幸运皮肤",22,22,25,false,-530,125]],[1,0,-55,0]],[29,"spriteFrame",33554432,22,[[3,-531,[5,116,141]],[9,-532,128]],[1,-41.868,0,0],[1,0.388,0.388,0.388]],[5,"mainPage_plus",33554432,22,[[3,-533,[5,20,20]],[9,-534,129]],[1,-24.62,18.992,0]],[177,73,[146,"8ag4xYRQNDc6KWp96hWbh7",-535,[273,"9eFFfdc5tBSIIyygYsZxhP",[[166,"mutualPushItem",["_name"],74],[67,["_lpos"],74,[1,0,0,0]],[67,["_lrot"],74,[3,0,0,0,1]],[67,["_lscale"],74,[1,0.6,0.6,0.6]]]],130]],[27,"lvLabel",33554432,10,[[[3,-536,[5,137.5,40]],-537],4,1],[1,0,405.887,0]],[5,"mainPage_shot_progress_bar2",33554432,3,[[3,-538,[5,290,26]],[9,-539,132]],[1,-14.947,0,0]],[5,"bg",33554432,3,[[3,-540,[5,333,71.875]],[34,0,-541,133]],[1,6.646,1.162,0]],[27,"3DNumber",33554432,40,[[[3,-542,[5,86.175,40]],-543],4,1],[1,42.692,0,0]],[5,"bg0",33554432,15,[[3,-544,[5,40,52]],[9,-545,142]],[1,-55,0,0]],[43,"bg1",33554432,15,[[3,-546,[5,40,52]],[9,-547,144]]],[5,"bg2",33554432,15,[[3,-548,[5,40,52]],[9,-549,146]],[1,55,0,0]],[133,"TEXT_LABEL",false,33554432,42,[[[22,-550,[0,"779kAXGTtMZKXfYlOg0Tfd"],[5,158,40],[0,0,1]],-551],4,1],[1,-78,20,0]],[27,"PLACEHOLDER_LABEL",33554432,42,[[[22,-552,[0,"d07wQj4whCUqYGJH1lEpVp"],[5,158,40],[0,0,1]],-553],4,1],[1,-78,20,0]],[194,"button",512,33554432,43,[[2,-554,[0,"07QMd0h1dLcYd/vjigaip6"],[5,100,40]],[223,"转跳地图",20,20,1,false,-555,[0,"ee3IZdy2dLIaAWpjI7P0FL"],[4,4278190080]]]],[87,"icon",33554432,11,[[[2,-556,[0,"f7NISe7HdAD68SLfhnddy8"],[5,37,37]],-557],4,1],[1,-14.587,13.645,0],[1,1.2,1.2,1.2]],[87,"des",33554432,11,[[[2,-558,[0,"f7NISe7HdAD68SLfhnddy8"],[5,55,58]],-559],4,1],[1,4.869,-3.896,0],[1,1.2,1.2,1.2]],[195,"banner",2,[[72,-560],[275,-561]],[1,0,-512.623,0]],[178,"sea",512,2,"b4g2SViXxDJIK8Hx4NDFTq",7,[[-562,[276,-564,57,32,-563]],1,4],[1,0,0,-31.482],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[196,"Main Light",2,"b7RMsbTR9DnoUdRJzFWw96",7,[[277,-565,[278]],[279,-566,8]],[1,-3.976,6.658,-0.576],[3,-0.40220951282688006,-0.34915648602045,-0.1657122302160915,0.8299739229748272],[1,-51.571,-45.471,0.332]],[132,"001",2,52,[-567,88],[1,0.001,0.009,-0.006]],[95,"Camera",1,23,[-568],[1,0,0,1000]],[280,0,568,2000,1,170,[4,4278190080]],[135,"gameScene",2,"8cL89oJ25OYr+FAuzrljva",7,[[283,-572,32,-571,98,-570,-569,162,163]]],[41,1,0,92,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[163,true,54,93],[284,33,93,174,[5,6,7],173],[95,"SPHERE001_1_1",2,94,[-573],[1,-0.001031705760397017,-0.056308,0.006184028461575508]],[236,1,0,176,[0,"2eUxziUJNUf558Uxg+3ghf"],[8],[49],16],[12,"mixamorig_Spine",2,55,[-574],[1,5.551115205843844e-18,0.042288169264793396,-0.00036916256067343056],[3,-0.12386011156302915,0.12867709811501943,0.008135558921744234,0.9838875392367373],[1,-14.232279178800969,14.78869934849394,-0.9091485287284771]],[12,"mixamorig_Spine1",2,178,[56],[1,8.881783998477905e-18,0.04933808371424675,-1.0658140798173486e-16],[3,0.0296225394133844,0.01594763596680611,-0.01114812196446284,0.9993717513730505],[1,3.4155328955629343,1.8649123676210873,-1.2226367491481058]],[12,"mixamorig_Neck",2,56,[-575],[1,-8.881783998477905e-18,0.06343469023704529,6.025056009661967e-10],[3,-0.03445329913631456,-0.020743694300765433,0.027395924743925666,0.9988153646359297],[1,-3.887370065911886,-2.270251200776176,3.2192135415124343]],[33,"mixamorig_Head",2,180,[[32,"mixamorig_HeadTop_End",2,-576,[1,1.4876988900554012e-16,0.3001466393470764,0.0011448562145233154]]],[1,-8.881783998477905e-18,0.03218189254403114,0.00012275218614377081],[3,0.17151315588373678,-0.057675924414770506,-0.007567358237691217,0.9834629938086156],[1,19.67492316491185,-6.3680724888391795,-1.9867736593111374]],[12,"mixamorig_LeftShoulder",2,56,[-577],[1,-0.025272076949477196,0.051629506051540375,0.0007563747931271791],[3,0.5603799825602487,-0.37139922417934584,0.6482940322743814,0.35742375290707623],[1,117.97876134844462,-96.69447123131813,2.704332927181809]],[12,"mixamorig_LeftArm",2,182,[-578],[1,-3.552713599391162e-17,0.0559559240937233,0],[3,0.2752015336763306,0.3504462894354546,-0.3662782370159238,0.8168792855566995],[1,50.59908034177471,57.8769087941026,-23.92393628235333]],[33,"mixamorig_LeftForeArm",2,183,[[32,"mixamorig_LeftHand",2,-579,[1,1.0658140798173486e-16,0.09513875097036362,-8.88178432935015e-17]]],[1,0,0.11092560738325119,1.4210854397564648e-16],[3,0.006906326345678939,0.00015031936239299392,0.5905688959311781,0.8069576563978593],[1,2.0775917931296255,-1.4989801312786166,72.38855712268851]],[12,"mixamorig_RightShoulder",2,56,[-580],[1,0.025272076949477196,0.0516478531062603,-0.0013453873107209802],[3,-0.5585776637453329,-0.38272849204908144,0.6494601450286634,-0.34599337415330583],[1,117.88682900569064,97.85067425987722,-1.2520490992248492]],[12,"mixamorig_RightArm",2,185,[-581],[1,3.552713599391162e-17,0.05598469078540802,-7.105427198782324e-17],[3,0.2286539350301079,0.04263348457390663,-0.11980709300043944,0.965166319581821],[1,27.521012695569773,8.063289708731691,-12.226152546459959]],[33,"mixamorig_RightForeArm",2,186,[[32,"mixamorig_RightHand",2,-582,[1,1.4210854397564648e-16,0.09513869136571884,-1.4210854397564648e-16]]],[1,-2.6645351995433716e-17,0.11096233874559402,-1.4210854397564648e-16],[3,-0.030528030960982087,0.0002398746702611978,-0.72136669574569,0.6918800994787557],[1,-135.47892208566378,-132.98453440973418,-86.57434082553048]],[12,"mixamorig_LeftUpLeg",2,55,[-583],[1,-0.05006299912929535,-0.023445740342140198,0.0006907245260663331],[3,0.07774957824122004,-0.2561955985283482,0.9630979659781691,0.027588517660923306],[1,150.14432396547616,-170.56599062468476,0.7622105331571107]],[12,"mixamorig_LeftLeg",2,188,[-584],[1,3.552713599391162e-17,0.12528982758522034,-1.2434497928741312e-16],[3,0.9325883595946978,-0.04379414864434498,-0.07701544634933392,0.34989947858863807],[1,139.31514386463317,6.5490312658269705,-7.792110970249897]],[12,"mixamorig_LeftFoot",2,189,[-585],[1,0,0.09087410569190979,0],[3,0.06375178735245939,0.738645141051213,-0.6710665268635934,-0.0029633990677301316],[1,84.74126378419373,175.32063681521672,5.633062086888788]],[33,"mixamorig_LeftToeBase",2,190,[[32,"mixamorig_LeftToe_End",2,-586,[1,-7.105427198782324e-17,0.022281795740127563,-3.552713599391162e-17]]],[1,0,0.05022500082850456,-3.552713599391162e-17],[3,0.2964968049691212,-0.17176897617582526,0.0543017045594477,0.9378893262792524],[1,35.08682276231146,-20.756746258358135,0.00000417985616086644]],[12,"mixamorig_RightUpLeg",2,55,[-587],[1,0.05006299912929535,-0.023445740342140198,0.0007796928402967751],[3,-0.03716114224003699,0.03913115028779787,0.9984831376790634,0.010919082156575818],[1,-175.47068110577064,175.69432436950765,1.082766883450719]],[12,"mixamorig_RightLeg",2,192,[-588],[1,2.6645351995433716e-17,0.1253097951412201,-1.776356799695581e-17],[3,0.24444734454023967,-0.08214293219978132,-0.010078629233006665,0.9661244514396843],[1,28.132779700201798,-8.862712034971757,-3.4187855845158954]],[12,"mixamorig_RightFoot",2,193,[-589],[1,8.881783998477905e-18,0.09085717797279358,7.105427198782324e-17],[3,-0.09158261925069446,0.8051489644076772,-0.5736431516843141,0.11950440782713513],[1,70.17709598985363,174.77112577956743,-16.533808903107424]],[33,"mixamorig_RightToeBase",2,194,[[32,"mixamorig_RightToe_End",2,-590,[1,3.108624482185328e-17,0.0225580632686615,-3.552713599391162e-17]]],[1,-4.440891999238953e-18,0.049431171268224716,7.993606094938482e-17],[3,0.5450361893322382,0.17910028751691662,-0.0337834688919253,0.8183625825752169],[1,65.94589534253889,19.465755405853827,8.04425990705664]],[81,false,16,[0,"3aIf9J1WtQz6Pdcg2OWkJM"],[9,10,11,12,13],[[31,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head/mixamorig_HeadTop_End",95],[31,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase/mixamorig_LeftToe_End",96],[31,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase/mixamorig_RightToe_End",97]]],[285,32,false,8,[1,0,0,0]],[201,"servantContainer",2,"9e/WdHnNFJGIaAf3DBHsRs",7,[98]],[287,57,8],[281,1,42.427,1,100,0,2,57],[288,2],[95,"Camera",33554432,2,[-591],[1,0,0,1000]],[282,0,2,568,2000,6,33554432,202,[4,4278190080]],[289,45,32,24],[212,102],[144,2,0,58],[160,290,1,58,206],[290,12,205,17,[41,42,43],200,13,25,207],[224,"0",40,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4278190080]],[179,"Label",33554432,[[[2,-592,[0,"c68UOAlNhN171Umca6yVvF"],[5,22.25,50.4]],209],4,1],[1,89.089,392.548,0]],[180,[146,"e51efc9fpAioEPIzQ1XON7",-593,[274,"0bilxtOixFyK0vxJXANhLu",[[166,"test",["_name"],110],[67,["_lpos"],110,[1,0,1.078,0]],[67,["_lrot"],110,[3,0,0,0,1]]],[[42,["e8DOT5UJ1F/ZgplWYyCxRs"]],[42,["24ova/XVpAW5yoilbNMG28"]],[42,["7bfXE5AxlDbYJL+1Ch8+n8"]]]],44]],[165,2,[0,"3f2oTdCepERZdpmIfLsrhd"],203],[103,"000K",40,2,false,false,64],[244,64,213],[152,"x1.8倍",39,48,2,false,130],[153,"  0.9K",30,30,30,false,false,46],[152,"x1.8倍",39,48,2,false,133],[153,"  0.9K",30,30,30,false,false,49],[213,0,137,[0,"69c92BVnxMw4dhRmZcoNLV"]],[225,"这个杀手不太冷",20,30,32,2,false,138,[0,"95eqwqxzpBqL9z6CY21v1I"]],[104,"热门",30,30,32,139,[0,"55MVDMBBlOapyDvRORfAOB"]],[41,1,0,71,[0,"59wbsMTPZO34YYrDBPCOft"]],[291,9,219,220,222,221],[292,null,1,4,18,31,14,[66,67,68],[62,61,60,59,63]],[103,"0",40,2,false,false,72],[163,true,72,225],[293,73],[226,"关卡 99",40,false,154],[144,2,0,75],[160,290,1,75,229],[154,"+50   ",64,64,64,false,80,[4,4194303999]],[103,"999",40,2,false,false,157],[154,"+500  ",100,100,110,false,86,[4,4194303999]],[294,null,10,226,22,228,3,15,[83,84,85],40,232,82,233],[227,"",0,40,20,1,false,161,[0,"ddIY+NJvlDTIQAg7PLVrGo"]],[228,"Enter text here...",0,20,20,1,false,162,[0,"8fhi7qRLFJbK0abIJuXmCW"],[4,4290493371]],[74,164,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[74,165,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[181,"bulletContainer",2,"a1y6m+TbtAY746gGyG8c6y",7],[295,"Plane<ModelComponent>",0,167,[0,"e0uHCYkZ1D1I9glcT6oLf2"],[164],[49]],[135,"particleContainer",2,"94heWRCJJO87ds988gNyJ3",7,[[297,-594,[165,166,167]]]],[5,"SPHERE001_1_1",2,169,[[80,1,0,-595,[0,"85cFr5iwdRHIbrZJO2wdIv"],[168],[49],52,169,170]],[1,-0.001031705760397017,-0.05630764365196228,0.006184028461575508]],[12,"mixamorig_Spine",2,88,[-596],[1,6.661337998858429e-18,0.042288169264793396,-0.00036916256067343056],[3,-0.12386011180146171,0.12867708346156376,0.008135558006082743,0.9838875411307356],[1,-14.232279205833784,14.788697654811974,-0.9091484257207716]],[12,"mixamorig_Spine1",2,243,[89],[1,1.3322675997716858e-17,0.04933808371424675,-3.552713599391162e-17],[3,0.0296225394133844,0.01594763596680611,-0.01114812196446284,0.9993717513730505],[1,3.4155328955629343,1.8649123676210873,-1.2226367491481058]],[12,"mixamorig_Neck",2,89,[-597],[1,-8.881783998477905e-18,0.06343469023704529,6.025057119884991e-10],[3,-0.034453299134983344,-0.020743696162609095,0.027395924742867138,0.9988153645973373],[1,-3.887370059767993,-2.270251414311754,3.219213548628856]],[33,"mixamorig_Head",2,245,[[32,"mixamorig_HeadTop_End",2,-598,[1,5.995204571203862e-17,0.3001466393470764,0.0011448562145233154]]],[1,-2.2204459996194763e-18,0.03218189254403114,0.00012275218614377081],[3,0.17151315588373678,-0.057675924414770506,-0.007567358237691217,0.9834629938086156],[1,19.67492316491185,-6.3680724888391795,-1.9867736593111374]],[12,"mixamorig_LeftShoulder",2,89,[-599],[1,-0.025272076949477196,0.051629506051540375,0.0007563747931271791],[3,0.5603799825602487,-0.37139922417934584,0.6482940322743814,0.35742375290707623],[1,117.97876134844462,-96.69447123131813,2.704332927181809]],[12,"mixamorig_LeftArm",2,247,[-600],[1,0,0.0559559240937233,7.105427198782324e-17],[3,0.27520153067224645,0.35044628561000296,-0.36627826281997417,0.8168792766396922],[1,50.59908223027076,57.876910499771434,-23.92393877934412]],[33,"mixamorig_LeftForeArm",2,248,[[32,"mixamorig_LeftHand",2,-601,[1,1.0658140798173486e-16,0.09513875097036362,-3.552713599391162e-17]]],[1,0,0.11092560738325119,1.0658140798173486e-16],[3,0.0069063263456790435,0.00015031926052959033,0.5905688959311871,0.8069576563978715],[1,2.0775918158988333,-1.4989801624000019,72.38855712242754]],[12,"mixamorig_RightShoulder",2,89,[-602],[1,0.025272076949477196,0.0516478531062603,-0.0013453873107209802],[3,-0.5585776637453329,-0.38272849204908144,0.6494601450286634,-0.34599337415330583],[1,117.88682900569064,97.85067425987722,-1.2520490992248492]],[12,"mixamorig_RightArm",2,250,[-603],[1,3.552713599391162e-17,0.05598469078540802,1.4210854397564648e-16],[3,0.2286539349937926,0.04263348829242575,-0.11980709298141143,0.9651663194285313],[1,27.5210127333743,8.063290128754367,-12.226152442641782]],[33,"mixamorig_RightForeArm",2,251,[[32,"mixamorig_RightHand",2,-604,[1,7.105427198782324e-17,0.09513869136571884,-1.4210854397564648e-16]]],[1,-3.552713599391162e-17,0.11096233874559402,-2.1316281596346973e-16],[3,-0.03052803227359269,0.0002398743022252562,-0.7213666671575729,0.6918801292274531],[1,-135.47886387668092,-132.9844761262456,-86.57434402671844]],[12,"mixamorig_LeftUpLeg",2,88,[-605],[1,-0.05006299912929535,-0.023445740342140198,0.0006907245260663331],[3,0.07774957463334922,-0.25619564099293146,0.9630979539738602,0.02758855255207698],[1,150.14431859535748,-170.56598995438955,0.7622140737920868]],[12,"mixamorig_LeftLeg",2,253,[-606],[1,0,0.12528982758522034,-5.329070399086743e-17],[3,0.9325883595946978,-0.04379414864434498,-0.07701544634933392,0.34989947858863807],[1,139.31514386463317,6.5490312658269705,-7.792110970249897]],[12,"mixamorig_LeftFoot",2,254,[-607],[1,0,0.09087410569190979,0],[3,0.06375176509591604,0.7386451421542096,-0.6710665278656769,-0.0029633760219213837],[1,84.7412636448431,175.32063659668236,5.633058421547798]],[33,"mixamorig_LeftToeBase",2,255,[[32,"mixamorig_LeftToe_End",2,-608,[1,-3.552713599391162e-17,0.022281795740127563,-8.881783998477905e-18]]],[1,-1.776356799695581e-17,0.05022500082850456,-3.552713599391162e-17],[3,0.296496804909143,-0.1717689761410782,0.05430170827375329,0.9378893260895272],[1,35.08682283563739,-20.75674638492872,0.00000458022874868523]],[12,"mixamorig_RightUpLeg",2,88,[-609],[1,0.05006299912929535,-0.023445740342140198,0.0007796928402967751],[3,-0.0371611422556574,0.039131146578956,0.9984831380987684,0.01091905701545564],[1,-175.47068164132313,175.69432448772244,1.082764022598416]],[12,"mixamorig_RightLeg",2,257,[-610],[1,3.552713599391162e-17,0.1253097951412201,0],[3,0.24444734453794517,-0.08214293219901028,-0.010078630164234614,0.9661244514306158],[1,28.132779692965343,-8.862712009315457,-3.4187856877419076]],[12,"mixamorig_RightFoot",2,258,[-611],[1,2.4424906409404546e-17,0.09085717797279358,3.552713599391162e-17],[3,-0.09158260463760087,0.8051489669402262,-0.5736431534886751,0.11950439330186792],[1,70.17709616414342,174.77112622447413,-16.533806554206972]],[33,"mixamorig_RightToeBase",2,259,[[32,"mixamorig_RightToe_End",2,-612,[1,1.554312241092664e-17,0.0225580632686615,3.552713599391162e-17]]],[1,1.3322675997716858e-17,0.049431171268224716,4.440892164675075e-17],[3,0.5450361907182373,0.17910027307119847,-0.03378347270312519,0.8183625846562711],[1,65.9458956456053,19.46575419871928,8.04425865549636]]],0,[0,0,1,0,0,1,0,-3,224,0,-1,4,0,-2,31,0,-3,14,0,-4,18,0,0,2,0,-2,212,0,0,2,0,-4,201,0,-1,202,0,-2,45,0,-3,12,0,-5,10,0,-6,41,0,-7,11,0,-8,166,0,0,3,0,0,3,0,22,230,0,68,231,0,-1,76,0,-2,77,0,-3,78,0,-4,79,0,0,3,0,-1,155,0,-2,75,0,-3,156,0,-4,76,0,-5,77,0,-6,78,0,-7,79,0,-8,80,0,0,4,0,0,4,0,-1,26,0,-2,27,0,-3,28,0,-4,29,0,-5,35,0,-6,36,0,-7,30,0,-8,37,0,0,5,0,0,5,0,6,5,0,0,5,0,39,48,0,17,69,0,40,47,0,41,216,0,42,215,0,0,5,0,-1,130,0,-2,131,0,-3,132,0,-4,46,0,-5,69,0,-6,48,0,0,6,0,0,6,0,6,6,0,0,6,0,39,51,0,17,70,0,40,50,0,41,218,0,42,217,0,0,6,0,-1,133,0,-2,134,0,-3,135,0,-4,49,0,-5,70,0,-6,51,0,6,52,0,28,32,0,6,52,0,28,32,0,6,153,0,28,227,0,-1,23,0,-2,172,0,-3,57,0,-4,167,0,-5,168,0,-6,8,0,-7,198,0,-8,239,0,-9,241,0,-1,197,0,0,8,0,0,8,0,-4,32,0,69,97,0,70,96,0,71,95,0,0,8,0,-1,33,0,-2,16,0,0,9,0,0,9,0,-3,223,0,5,9,0,6,9,0,0,9,0,-1,136,0,-2,137,0,-3,138,0,-4,71,0,0,10,0,0,10,0,-3,234,0,-1,22,0,-2,154,0,-4,40,0,-5,15,0,-6,86,0,0,11,0,0,11,0,0,11,0,6,11,0,0,11,0,72,238,0,24,237,0,0,11,0,0,11,0,-1,164,0,-2,165,0,0,12,0,0,12,0,-3,208,0,-1,102,0,-2,17,0,-3,13,0,-4,25,0,0,13,0,0,13,0,5,13,0,0,13,0,0,13,0,-1,106,0,-2,107,0,0,14,0,-1,127,0,-2,66,0,-3,128,0,-4,67,0,-5,129,0,-6,68,0,0,15,0,-1,158,0,-2,83,0,-3,159,0,-4,84,0,-5,160,0,-6,85,0,-1,196,0,-1,94,0,-2,95,0,-3,96,0,-4,97,0,0,17,0,0,17,0,0,17,0,-1,103,0,-2,104,0,-3,105,0,0,18,0,-3,38,0,-4,39,0,-5,21,0,0,19,0,0,19,0,6,38,0,0,19,0,-1,140,0,-2,141,0,-3,142,0,0,20,0,0,20,0,6,39,0,0,20,0,-1,144,0,-2,145,0,-3,146,0,0,21,0,0,21,0,0,21,0,-1,147,0,-2,148,0,-3,149,0,-4,150,0,0,22,0,0,22,0,-1,151,0,-2,152,0,-3,72,0,-4,73,0,0,23,0,73,171,0,0,23,0,0,23,0,-1,170,0,-2,53,0,-3,44,0,0,24,0,0,24,0,0,24,0,0,24,0,-1,34,0,0,25,0,0,25,0,-1,108,0,-2,109,0,-3,58,0,0,26,0,0,26,0,0,26,0,-1,111,0,-2,112,0,-3,59,0,0,27,0,0,27,0,0,27,0,-1,113,0,-2,114,0,-3,60,0,0,28,0,0,28,0,0,28,0,-1,115,0,-2,116,0,-3,61,0,0,29,0,0,29,0,0,29,0,-1,117,0,-2,118,0,-3,62,0,0,30,0,0,30,0,0,30,0,-1,123,0,-2,124,0,-3,63,0,0,31,0,0,31,0,34,214,0,0,31,0,-1,64,0,-2,65,0,0,33,0,0,33,0,-3,175,0,-1,92,0,-2,54,0,0,34,0,0,34,0,-1,99,0,-2,100,0,-3,101,0,0,35,0,0,35,0,0,35,0,-1,119,0,-2,120,0,0,36,0,0,36,0,0,36,0,-1,121,0,-2,122,0,0,37,0,0,37,0,0,37,0,-1,125,0,-2,126,0,0,38,0,74,223,0,0,38,0,0,39,0,75,143,0,0,39,0,-1,143,0,0,40,0,0,40,0,-1,82,0,-2,157,0,0,41,0,0,41,0,-1,42,0,-2,43,0,0,42,0,0,42,0,76,236,0,77,235,0,0,42,0,-1,161,0,-2,162,0,0,43,0,0,43,0,5,43,0,0,43,0,-1,163,0,0,44,0,0,44,0,-1,90,0,-2,91,0,0,45,0,0,45,0,-3,204,0,0,46,0,-2,216,0,-1,47,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,-2,218,0,-1,50,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,-1,169,0,0,53,0,0,53,0,0,53,0,0,54,0,-2,93,0,-3,174,0,-1,178,0,-2,188,0,-3,192,0,-1,180,0,-2,182,0,-3,185,0,-1,200,0,-2,199,0,0,58,0,-2,206,0,-3,207,0,0,59,0,0,59,0,0,60,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,-2,213,0,-3,214,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,0,69,0,0,70,0,0,70,0,0,71,0,-2,222,0,-1,139,0,0,72,0,-2,225,0,-3,226,0,0,73,0,-2,227,0,-1,153,0,0,75,0,-2,229,0,-3,230,0,0,76,0,0,76,0,0,77,0,0,77,0,0,78,0,0,78,0,0,79,0,0,79,0,0,80,0,-2,231,0,-1,81,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,-2,233,0,-1,87,0,0,87,0,0,87,0,0,87,0,-1,243,0,-2,253,0,-3,257,0,-1,245,0,-2,247,0,-3,250,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,-2,173,0,-1,176,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,-2,205,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,0,128,0,0,128,0,0,129,0,0,129,0,0,130,0,-2,215,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,-2,217,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,-2,219,0,0,138,0,-2,220,0,0,139,0,-2,221,0,0,140,0,0,140,0,0,141,0,0,141,0,0,142,0,0,142,0,0,143,0,0,144,0,0,144,0,0,145,0,0,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,148,0,0,148,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,0,152,0,7,153,0,0,154,0,-2,228,0,0,155,0,0,155,0,0,156,0,0,156,0,0,157,0,-2,232,0,0,158,0,0,158,0,0,159,0,0,159,0,0,160,0,0,160,0,0,161,0,-2,235,0,0,162,0,-2,236,0,0,163,0,0,163,0,0,164,0,-2,237,0,0,165,0,-2,238,0,0,166,0,0,166,0,-1,240,0,43,240,0,0,167,0,0,168,0,0,168,0,-1,242,0,-1,171,0,78,239,0,79,201,0,80,199,0,0,172,0,-1,177,0,-1,179,0,-1,181,0,3,181,0,-1,183,0,-1,184,0,3,184,0,-1,186,0,-1,187,0,3,187,0,-1,189,0,-1,190,0,-1,191,0,3,191,0,-1,193,0,-1,194,0,-1,195,0,3,195,0,-1,203,0,0,210,0,7,211,0,0,241,0,0,242,0,-1,244,0,-1,246,0,3,246,0,-1,248,0,-1,249,0,3,249,0,-1,251,0,-1,252,0,3,252,0,-1,254,0,-1,255,0,-1,256,0,3,256,0,-1,258,0,-1,259,0,-1,260,0,3,260,0,81,7,1,3,2,2,3,7,3,3,10,5,3,18,6,3,18,9,3,38,19,3,38,20,3,39,24,3,45,32,82,175,32,83,98,32,84,197,32,11,196,32,43,177,55,3,94,56,3,179,88,3,169,89,3,244,98,0,198,201,85,234,201,86,224,201,87,208,201,88,204,208,89,212,208,90,211,208,91,209,209,0,210,612],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,173,173,93,93,177,177,98,205,206,206,213,215,216,217,218,222,223,223,225,228,229,229,231,232,233,237,238,201,201,201,201,201,201,240],[1,1,1,-1,8,-1,-2,-3,-1,-1,-2,-3,-4,-5,44,44,2,1,1,-1,8,1,-1,8,2,1,1,-1,8,2,1,1,4,18,19,20,-1,8,2,1,1,-1,-2,-3,45,1,2,1,1,4,1,2,1,1,4,1,2,1,1,4,1,2,1,1,4,1,2,1,4,1,2,1,4,1,2,1,1,4,1,2,1,4,1,1,1,1,1,1,1,1,2,1,1,1,1,-1,8,1,4,2,1,1,1,1,-1,8,1,4,1,1,4,1,2,1,1,4,92,1,2,1,1,4,1,1,1,2,1,4,1,1,45,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,93,1,4,18,19,20,1,4,94,95,96,97,98,99,-1,-1,-2,-3,-1,12,15,-1,-2,-3,-4,-5,8,14,1,14,2,12,15,100,1,14,1,2,2,2,2,2,1,101,102,2,2,14,1,2,2,2,1,1,103,104,105,106,107,108,12],[114,115,116,55,55,117,56,118,57,58,40,10,59,60,61,61,0,62,63,15,15,119,15,15,0,62,63,15,15,0,11,26,26,26,120,26,64,64,0,65,19,121,66,122,67,123,6,8,1,1,124,6,8,1,1,125,6,8,1,1,126,6,8,1,1,127,6,1,1,128,6,1,1,129,6,8,1,1,130,6,1,1,3,19,16,17,16,17,16,17,0,131,3,7,11,27,27,28,28,0,132,3,7,11,27,27,28,28,12,1,1,68,6,8,1,1,133,68,6,8,1,1,134,8,7,0,69,69,3,135,31,19,65,136,41,41,41,137,3,35,138,19,16,17,16,17,16,17,3,70,70,20,20,20,42,43,71,71,139,72,140,73,67,141,142,143,144,145,57,146,147,40,10,58,59,60,40,74,56,74,148,21,22,149,66,75,24,0,0,0,0,0,76,52,76,0,6,75,24,77,0,77,72,73,150,151,152,153,154,155,156]],[[[50,"failedPageInAction",0.9833333333333333,963632289,[[0,0.5]],[{"frame":0.9833333333333333,"func":"","params":[]},{"frame":0.9833333333333333,"func":"","params":[]},{"frame":0.9833333333333333,"func":"","params":[]},{"frame":0.9833333333333333,"func":"onInActionFinish","params":[]}],[[[{},"modifiers",12,[[[13,"title"],"position"],4,0],"data",11,[{"keys":0,"easingMethods":{"0":[0.06,0.12,0.52,1.3]}},"values",12,[[[1,0,1031.992,0],[1,0,393.269,0]],8,8]]]],11]]],0,0,[],[],[]],[[[50,"loadingPageOutAction",0.3333333333333333,3174019996,[[0,0.3333333333333333]],[{"frame":0.3333333333333333,"func":"","params":[]},{"frame":0.3333333333333333,"func":"onOutActionFinish","params":[]}],[[[{},"modifiers",12,[[[20,"cc.Sprite"],"color"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[4,4294967295],[4,16777215]],8,8]]]],11]]],0,0,[],[],[]],[[[168,"backCloud",0.2,2,5,3652754463,[[0,1.2166666666666666,2.7666666666666666,3.85,5],[0,1.2,2.7333333333333334,4.25,5]],[[[{},"modifiers",12,[[[13,"back_cloud1"],"position"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[1,0,-170,0],[1,49.18,-170,0],[1,-6.379,-170,0],[1,-38.695,-170,0],[1,0,-170,0]],8,8,8,8,8]]],[{},"modifiers",12,[[[13,"back_cloud0"],"position"],4,0],"data",11,[{"keys":1,"easingMethods":{}},"values",12,[[[1,0,0,0],[1,-22.019,0,0],[1,17.951,-10.362,0],[1,-27.736,-6.019,0],[1,0,0,0]],8,8,8,8,8]]]],11,11]]],0,0,[],[],[]],[[[83,"shotLvNodeFinger",15,2,0.4,3640207599,[[0,0.13333333333333333,0.3333333333333333]],[[[{},"modifiers",12,[[[20,"cc.Sprite"],"spriteFrame"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",3,[0,1,2]]]],11]]],0,0,[0,0,0],[-1,-2,-3],[11,78,11]],[[[25,"tryOutLayer"],[36,"tryOutLayer",33554432,[-13],[[[2,-2,[0,"58TuvruylCbLtYwYQDMQSc"],[5,640,1136]],[62,45,100,100,0,-3,[0,"3fJt6eHDpKApErXsnFCWqS"]],-4,[45,-6,[0,"97bBq8ioZBj7K1b6oqwm5Q"],[[7,"4d952u2ZbxFAKUC+/1OiE6l","onCloseButtonClick",-5]],26],[11,1,0,-7,[0,"40ndZLqWhIv4zXz0yKbQAd"],27],[298,"commonInAction","commonOutAction",-12,[0,"5fRDVhXMFO94Lub2+CwLlM"],-11,-10,-9,-8]],4,4,1,4,4,4],[1,"e0RtP+5QlJhLnG42ak/Ppu",-1,0]],[40,"inner",33554432,[-17,-18,-19,-20,-21,-22,-23],[[2,-14,[0,"71k2iiVRVB8LLSKB9JjL7l"],[5,502,630]],[26,-15,[0,"26HuqgAntKe7TDJ6pEgdDu"]],[11,1,0,-16,[0,"0f3NviIvpBp5pvbNqUGUXt"],17]],[1,"db2oPe4HxP4qy/NJKJQI3K",1,0],[1,0,63.694,0]],[93,"hero",33554432,2,[-26,-27,-28,-29],[-24,-25],[1,"efvlWeUGhD7pztddz3ltfo",1,0],[1,0,-100,0],[3,0,0.19651946169232679,0,0.9804999241081858],[1,400,400,400],[1,0,22.667,0]],[40,"button",33554432,[-34,-35,-36],[[2,-30,[0,"8aS0FNEsFCqZI2hwXVjdpX"],[5,140,140]],[23,0,-31,[0,"bekh/WsEBGwaR+uOUSH6Bf"],22],[45,-33,[0,"8bXOZQDzBOyL1VZHZZ+bh5"],[[7,"bf6e5PJzs1H/p9bKiZfHTQ/","onButtonClick",-32]],23]],[1,"57rWSf24xIzbWiqqhq8Etb",1,0],[1,195.245,0,0]],[128,"ProgressBar",33554432,[-40,-41,-42],[[[2,-37,[0,"1crxfiBtlM6qhcCAn5doCx"],[5,320,56]],[53,1,-38,[0,"c3rKmuxzdNyJ0bgIHMbvRy"],19],-39],4,4,1],[1,"e78x81aHZMlZn0uMDxZEdr",1,0],[1,-75.076,2.481,0],[1,1.2,1.2,1.2]],[39,"bg",33554432,1,[2,-46],[[2,-43,[0,"cdG06aDW9JbL3R7y6015HI"],[5,502,780]],[41,1,0,-44,[0,"26He61gbNKeI0fXE64WK90"]],[26,-45,[0,"17LyjjWiNNzrlN1yfLqAH+"]]],[1,"4cP6TNYpxFTpvvyOCmQOqB",1,0]],[52,"adButton",33554432,2,[-50,-51],[[2,-47,[0,"f7NISe7HdAD68SLfhnddy8"],[5,250,85]],[11,1,0,-48,[0,"e71ctEmpxFC4KlSYRZNz/a"],10],[44,3,-49,[0,"fa5+nv/wpAxJZwP8ZTKw8g"],[[7,"2b2296Um4ZH65mFE/cJnWQD","onTryOutButtonClick",1]],11]],[1,"a5hUbQfTlL145sDl4COBTi",1,0],[1,0,-212,0],[1,0.8,0.8,0.8]],[69,"noThanks",false,33554432,2,[-56],[[2,-52,[0,"60O6sotMJLwZtFWop7RzIp"],[5,98.96,30]],[38,3,-54,[0,"882ETrWTxBqLTqPKCX/cPr"],[[7,"2b2296Um4ZH65mFE/cJnWQD","onCloseButtonClick",1]],[4,4292269782],-53,13],[47,"暂不试用",25,25,30,false,-55,[0,"a3XhQ5WsNN4qFLLr4mHlvE"],14]],[1,"fe9yvaBrFMrLMXbePBA5EV",1,0],[1,0,-283.044,0]],[17,"cumVideoNode",33554432,6,[5,4],[[2,-57,[0,"29NgZnh3JDdZsQ1RUBxJ4F"],[5,670.2760000000001,140]],[159,-62,[0,"4eaGbGGMFF85dwfhjUdvx5"],-61,-60,-59,4,-58]],[1,"65egonMsJAKpernnz++1xQ",1,0],[1,4.741,-332.681,0]],[8,"closeButton",33554432,2,[[2,-63,[0,"21X+Ia9btLY6api8uiMnL2"],[5,52,53]],[6,-64,[0,"b9q4BonS1EnKD8d5+0PsVF"],1],[38,3,-66,[0,"913YzuCWBPKZavUAA1jKO0"],[[7,"2b2296Um4ZH65mFE/cJnWQD","onCloseButtonClick",1]],[4,4292269782],-65,2]],[1,"0cFQWunRJIRpIWnIu3Zve4",1,0],[1,206.899,279.615,0]],[90,"strictButton",false,33554432,2,[-70],[[2,-67,[0,"93wOR4I0NKira0PyUcGB0S"],[5,250,85]],[11,1,0,-68,[0,"91g8p/WGxKFYn2UleKfDj0"],16],[99,3,-69,[0,"81PmUCGqRBw5MjfviAaVlg"],[[7,"2b2296Um4ZH65mFE/cJnWQD","onCloseButtonClick",1]]]],[1,"3cnbzhhl9Hmr9rnWrKup/H",1,0],[1,-115,-212,0],[1,0.8,0.8,0.8]],[60,"SPHERE001_1_1",33554432,[[80,1,0,-71,[0,"4c9z3WwfFGBrobBXEybsM9"],[4],[49],3,5,6],[2,-72,[0,"57hfNYddNEKoCPWWGzIIRQ"],[5,0,0]],[106,-73,[0,"360Uw0ZhpOJISGdEAa73Dp"]]],[1,"bfmV5sVotKxJBLbHuYAcKd",1,0],[1,-0.001031705760397017,-0.056308,0.006184028461575508]],[51,"mixamorig_Hips",33554432,[-74,-75,-76],[1,"23fYXuPdBBgYgI6cXjuzSp",1,0],[1,0.002063411520794034,0.2593175768852234,-0.01236803736537695],[3,0.0023929856378427745,0.995876079101868,0.06685621326741793,0.06128095495313775],[1,-7.635983534023475,173.00707807406081,0.7425889600684812]],[51,"mixamorig_Spine2",33554432,[-77,-78,-79],[1,"e7402fOD5LgJZ6DK6VB+0a",1,0],[1,-3.552713599391162e-17,0.05638634413480759,0],[3,0.029252197995834433,0.015935689430097974,-0.010050659206182446,0.9993944901610781],[1,3.370941359491348,1.8593476206728394,-1.0976731676017177]],[8,"icon",33554432,7,[[2,-80,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[6,-81,[0,"e71ctEmpxFC4KlSYRZNz/a"],8]],[1,"52FGNpGHNBC41Jmx43zrNf",1,0],[1,-78.574,0,0]],[8,"label",33554432,7,[[2,-82,[0,"71eupCWVNLma/J9/qTqBX7"],[5,158.33,40]],[48,"立刻试用",40,false,-83,[0,"c32/hAxnZHMoym1W7AQ+sf"],9]],[1,"3aJJ52rcdGaqJGLfG75Qaq",1,0],[1,35.056,0,0]],[8,"red",33554432,4,[[2,-84,[0,"e8FZjDOshJ84GatRruD7uU"],[5,30,30]],[23,0,-85,[0,"54J4tY6X1M7pa79i/AQQHm"],21]],[1,"96boHao2lE7qL0SjND3Bo0",1,0],[1,51.971,54.394,0]],[8,"panel_bg1",33554432,2,[[2,-86,[0,"c2V1c6WzJIYodjkixND0Kk"],[5,490.16200000000003,547.238]],[11,1,0,-87,[0,"20FlM8yZpA146b188VlpZm"],0]],[1,"c3vM//BR1OvKAYwOcR9our",1,0],[1,0,-35.21999999999999,0]],[8,"title-002",33554432,2,[[2,-88,[0,"f4xGyIqyBOrbWwRc0+O6Fb"],[5,158.33,45]],[76,"皮肤试用",0,40,45,false,-89,[0,"f5JVRup6BM4KEFT01TOFiv"],3]],[1,"29HKKQC5pJF6hhwgkDbBp/",1,0],[1,-139.984,269.197,0]],[84,"001",33554432,3,[12,13],[1,"3aCc6+1wlInoZgztRvww5v",1,0],[1,0.001031705760397017,0.2030099481344223,-0.0061840093694627285]],[37,"mixamorig_HeadTop_End Socket",33554432,3,[1,"69zV2E1+tJaJu8oUQIBADH",1,0],[1,-0.0086944287223947,0.9948246522988149,0.04711596146966174],[3,-0.014872127011990031,0.9996891043065057,-0.005494157553204148,-0.019243928958930363],[1,0.662487780956531,-177.78461305385247,-1.6918205514204572]],[37,"mixamorig_LeftToe_End Socket",33554432,3,[1,"268zyN8VNPGbeGUessgXzs",1,0],[1,0.07272711433904885,0.302079262126885,-0.07560324764239205],[3,0.07720382984028945,0.040350172342354974,0.9746904188846686,-0.20588836680192338],[1,-173.09449777264768,-169.5185000119221,-23.273736617959592]],[37,"mixamorig_RightToe_End Socket",33554432,3,[1,"5cFH2FdxlFZ6yv42vO4kEu",1,0],[1,-0.031762256631616345,0.20861501385951434,-0.06462891876727296],[3,-0.08950854851152235,0.7470231606465523,0.655784585502464,-0.062379440670442286],[1,-82.71231730809052,178.57998546787348,-12.447495520367493]],[28,"common_white",33554432,8,[[2,-90,[0,"f7NISe7HdAD68SLfhnddy8"],[5,5,5]],[6,-91,[0,"e71ctEmpxFC4KlSYRZNz/a"],12]],[1,"e27eCaa0RJGpzpvpsBHFnV",1,0],[1,0,-13.546,0],[1,19.672,1,1]],[21,"label",33554432,11,[[2,-92,[0,"beUDuojS1P/rUBvPjmBacm"],[5,161.67,40]],[48,"不了谢谢",40,false,-93,[0,"84S2CWjHVM/rOzPoeYnKh+"],15]],[1,"6awcoELyJNwZrpDRARBJ8U",1,0]],[21,"progress_bg_1",33554432,5,[[2,-94,[0,"f7NISe7HdAD68SLfhnddy8"],[5,295,31]],[6,-95,[0,"e71ctEmpxFC4KlSYRZNz/a"],18]],[1,"521MZADRNL9YZzHJu6utqb",1,0]],[16,"Bar",33554432,5,[[[22,-96,[0,"c9tRHGLSNACJ6zua6Vt8rS"],[5,290,26],[0,0,0.5]],-97],4,1],[1,"d7ww8s4gpECIX6dSukgobm",1,0],[1,-145.656,0,0]],[85,"desLabel",33554432,5,[[[2,-98,[0,"e5f6do58BALpCcvbSWqJZ4"],[5,340.1,30]],-99],4,1],[1,"02gNxSP01HgarNE5Q2aWGd",1,0],[1,-0.3975000000000364,-41.63083333333333,0],[1,0.8333333333333334,0.8333333333333334,0.8333333333333334]],[28,"mainPage_diamond",33554432,4,[[2,-100,[0,"f7NISe7HdAD68SLfhnddy8"],[5,116,141]],[6,-101,[0,"e71ctEmpxFC4KlSYRZNz/a"],20]],[1,"36BR+BSuhHibt78TRjWoNW",1,0],[1,0,14.758,0],[1,0.54,0.54,0.54]],[16,"rewardLabel",33554432,4,[[[2,-102,[0,"02lctUDxdKqpl6lCs7ejyv"],[5,60.94,30]],-103],4,1],[1,"ee7N8TIMFER6zS93vxXyJF",1,0],[1,0,-43.304,0]],[10,"mixamorig_Spine",33554432,13,[-104],[1,"2cvcjccIhGnowzIkVzxpTn",1,0],[1,5.551115205843844e-18,0.042288169264793396,-0.00036916256067343056],[3,-0.12386011156302915,0.12867709811501943,0.008135558921744234,0.9838875392367373],[1,-14.232279178800969,14.78869934849394,-0.9091485287284771]],[10,"mixamorig_Spine1",33554432,31,[14],[1,"e6O/+v57NDD768a0MWsLsK",1,0],[1,8.881783998477905e-18,0.04933808371424675,-1.0658140798173486e-16],[3,0.0296225394133844,0.01594763596680611,-0.01114812196446284,0.9993717513730505],[1,3.4155328955629343,1.8649123676210873,-1.2226367491481058]],[10,"mixamorig_Neck",33554432,14,[-105],[1,"84BsdYYc1Kx41lteOzlQ2V",1,0],[1,-8.881783998477905e-18,0.06343469023704529,6.025056009661967e-10],[3,-0.03445329913631456,-0.020743694300765433,0.027395924743925666,0.9988153646359297],[1,-3.887370065911886,-2.270251200776176,3.2192135415124343]],[19,"mixamorig_Head",33554432,33,[[18,"mixamorig_HeadTop_End",33554432,-106,[1,"82jRkwnFpKnpEPLXX9+XLp",1,0],[1,1.4876988900554012e-16,0.3001466393470764,0.0011448562145233154]]],[1,"90vsWTZJhPMI0fGbljsTKu",1,0],[1,-8.881783998477905e-18,0.03218189254403114,0.00012275218614377081],[3,0.17151315588373678,-0.057675924414770506,-0.007567358237691217,0.9834629938086156],[1,19.67492316491185,-6.3680724888391795,-1.9867736593111374]],[10,"mixamorig_LeftShoulder",33554432,14,[-107],[1,"fdPQ1MjUxKaIFLSjQBSEwT",1,0],[1,-0.025272076949477196,0.051629506051540375,0.0007563747931271791],[3,0.5603799825602487,-0.37139922417934584,0.6482940322743814,0.35742375290707623],[1,117.97876134844462,-96.69447123131813,2.704332927181809]],[10,"mixamorig_LeftArm",33554432,35,[-108],[1,"8emtbkuYZAkpu6f1CyPD49",1,0],[1,-3.552713599391162e-17,0.0559559240937233,0],[3,0.2752015336763306,0.3504462894354546,-0.3662782370159238,0.8168792855566995],[1,50.59908034177471,57.8769087941026,-23.92393628235333]],[19,"mixamorig_LeftForeArm",33554432,36,[[18,"mixamorig_LeftHand",33554432,-109,[1,"60dGzQA6hOn6PsriHSdl+o",1,0],[1,1.0658140798173486e-16,0.09513875097036362,-8.88178432935015e-17]]],[1,"40xTQTSnZFdJUy7aJA4x+Y",1,0],[1,0,0.11092560738325119,1.4210854397564648e-16],[3,0.006906326345678939,0.00015031936239299392,0.5905688959311781,0.8069576563978593],[1,2.0775917931296255,-1.4989801312786166,72.38855712268851]],[10,"mixamorig_RightShoulder",33554432,14,[-110],[1,"74F+w+mnpGopPLxpb265A9",1,0],[1,0.025272076949477196,0.0516478531062603,-0.0013453873107209802],[3,-0.5585776637453329,-0.38272849204908144,0.6494601450286634,-0.34599337415330583],[1,117.88682900569064,97.85067425987722,-1.2520490992248492]],[10,"mixamorig_RightArm",33554432,38,[-111],[1,"e67JnkqK5DvY3vwZVJi6in",1,0],[1,3.552713599391162e-17,0.05598469078540802,-7.105427198782324e-17],[3,0.2286539350301079,0.04263348457390663,-0.11980709300043944,0.965166319581821],[1,27.521012695569773,8.063289708731691,-12.226152546459959]],[19,"mixamorig_RightForeArm",33554432,39,[[18,"mixamorig_RightHand",33554432,-112,[1,"62Ro5zjlJLlobfZGfom274",1,0],[1,1.4210854397564648e-16,0.09513869136571884,-1.4210854397564648e-16]]],[1,"58peg1w5ZL0J1407B6tCY6",1,0],[1,-2.6645351995433716e-17,0.11096233874559402,-1.4210854397564648e-16],[3,-0.030528030960982087,0.0002398746702611978,-0.72136669574569,0.6918800994787557],[1,-135.47892208566378,-132.98453440973418,-86.57434082553048]],[10,"mixamorig_LeftUpLeg",33554432,13,[-113],[1,"76fMDGg7ZNj6tRZjoBYpog",1,0],[1,-0.05006299912929535,-0.023445740342140198,0.0006907245260663331],[3,0.07774957824122004,-0.2561955985283482,0.9630979659781691,0.027588517660923306],[1,150.14432396547616,-170.56599062468476,0.7622105331571107]],[10,"mixamorig_LeftLeg",33554432,41,[-114],[1,"bewrlYrH1GUb6uBWFy4+fR",1,0],[1,3.552713599391162e-17,0.12528982758522034,-1.2434497928741312e-16],[3,0.9325883595946978,-0.04379414864434498,-0.07701544634933392,0.34989947858863807],[1,139.31514386463317,6.5490312658269705,-7.792110970249897]],[10,"mixamorig_LeftFoot",33554432,42,[-115],[1,"a9QWLjyaVErYxWpgIcjcY/",1,0],[1,0,0.09087410569190979,0],[3,0.06375178735245939,0.738645141051213,-0.6710665268635934,-0.0029633990677301316],[1,84.74126378419373,175.32063681521672,5.633062086888788]],[19,"mixamorig_LeftToeBase",33554432,43,[[18,"mixamorig_LeftToe_End",33554432,-116,[1,"5296MojnJCC7Wv4u9/O9NG",1,0],[1,-7.105427198782324e-17,0.022281795740127563,-3.552713599391162e-17]]],[1,"8aP8LS+6BCc5W4RHMPI2p+",1,0],[1,0,0.05022500082850456,-3.552713599391162e-17],[3,0.2964968049691212,-0.17176897617582526,0.0543017045594477,0.9378893262792524],[1,35.08682276231146,-20.756746258358135,0.00000417985616086644]],[10,"mixamorig_RightUpLeg",33554432,13,[-117],[1,"22YAXtYnJGC7iHolqQljuR",1,0],[1,0.05006299912929535,-0.023445740342140198,0.0007796928402967751],[3,-0.03716114224003699,0.03913115028779787,0.9984831376790634,0.010919082156575818],[1,-175.47068110577064,175.69432436950765,1.082766883450719]],[10,"mixamorig_RightLeg",33554432,45,[-118],[1,"f81XCeQKdGR5QICiBMLIFu",1,0],[1,2.6645351995433716e-17,0.1253097951412201,-1.776356799695581e-17],[3,0.24444734454023967,-0.08214293219978132,-0.010078629233006665,0.9661244514396843],[1,28.132779700201798,-8.862712034971757,-3.4187855845158954]],[10,"mixamorig_RightFoot",33554432,46,[-119],[1,"b3pkajKsNOgbxZGFn4ijWm",1,0],[1,8.881783998477905e-18,0.09085717797279358,7.105427198782324e-17],[3,-0.09158261925069446,0.8051489644076772,-0.5736431516843141,0.11950440782713513],[1,70.17709598985363,174.77112577956743,-16.533808903107424]],[19,"mixamorig_RightToeBase",33554432,47,[[18,"mixamorig_RightToe_End",33554432,-120,[1,"70ZwhTxjRGHqB40xwWT9i+",1,0],[1,3.108624482185328e-17,0.0225580632686615,-3.552713599391162e-17]]],[1,"e2f4I6BCRO76ZiRFOC3Xa3",1,0],[1,-4.440891999238953e-18,0.049431171268224716,7.993606094938482e-17],[3,0.5450361893322382,0.17910028751691662,-0.0337834688919253,0.8183625825752169],[1,65.94589534253889,19.465755405853827,8.04425990705664]],[81,false,3,[0,"5cVXAgDBFNRIoEVPfpQhaK"],[7],[[31,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head/mixamorig_HeadTop_End",21],[31,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase/mixamorig_LeftToe_End",22],[31,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase/mixamorig_RightToe_End",23]]],[107,3,[0,"55tQB+XlhN3oSCntKg6uPq"],21,22,23,49],[41,2,0,27,[0,"ebjLpObdRIG5JpszsgZnZu"]],[77,"累计观看视频3次即可获得奖励",25,25,30,false,28,[0,"c3BPa5OeBG3JYHn4cC/DJs"]],[82,290,1,5,[0,"79nRfBiE9MB5Ker8iqnpy+"],51],[77,"+100",25,25,30,false,30,[0,"53x7ck5+FBrpV+HC4MELri"]],[65,"alertLayer<Animation>",1,[0,"01v98gqllM4IhLYAysuxUy"],[24,25]]],0,[0,7,1,0,0,1,0,0,1,0,-3,55,0,6,1,0,0,1,0,0,1,0,29,16,0,17,15,0,21,50,0,11,55,0,0,1,0,-1,6,0,0,2,0,0,2,0,0,2,0,-1,18,0,-2,10,0,-3,19,0,-4,3,0,-5,7,0,-6,8,0,-7,11,0,-1,49,0,-2,50,0,-1,20,0,-2,21,0,-3,22,0,-4,23,0,0,4,0,0,4,0,6,9,0,0,4,0,-1,29,0,-2,17,0,-3,30,0,0,5,0,0,5,0,-3,53,0,-1,26,0,-2,27,0,-3,28,0,0,6,0,0,6,0,0,6,0,-2,9,0,0,7,0,0,7,0,0,7,0,-1,15,0,-2,16,0,0,8,0,5,8,0,0,8,0,0,8,0,-1,24,0,0,9,0,32,17,0,33,54,0,22,53,0,16,52,0,0,9,0,0,10,0,0,10,0,5,10,0,0,10,0,0,11,0,0,11,0,0,11,0,-1,25,0,0,12,0,0,12,0,0,12,0,-1,31,0,-2,41,0,-3,45,0,-1,33,0,-2,35,0,-3,38,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,-2,51,0,0,28,0,-2,52,0,0,29,0,0,29,0,0,30,0,-2,54,0,-1,32,0,-1,34,0,3,34,0,-1,36,0,-1,37,0,3,37,0,-1,39,0,-1,40,0,3,40,0,-1,42,0,-1,43,0,-1,44,0,3,44,0,-1,46,0,-1,47,0,-1,48,0,3,48,0,9,1,2,3,6,4,3,9,5,3,9,12,3,20,13,3,20,14,3,32,120],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,51,52,54],[1,1,4,2,-1,12,15,-1,1,2,1,4,1,4,2,2,1,1,1,1,1,1,1,4,-1,-2,4,1,8,1,2,2],[12,5,5,0,33,21,22,10,7,0,2,2,34,5,0,0,9,18,46,35,3,8,23,23,13,14,4,4,10,24,0,0]],[[[25,"tryOutLayerWithNativeNode"],[36,"tryOutLayerWithNativeNode",33554432,[-13],[[[2,-2,[0,"58TuvruylCbLtYwYQDMQSc"],[5,640,1136]],[62,45,100,100,0,-3,[0,"3fJt6eHDpKApErXsnFCWqS"]],-4,[45,-6,[0,"97bBq8ioZBj7K1b6oqwm5Q"],[[7,"4d952u2ZbxFAKUC+/1OiE6l","onCloseButtonClick",-5]],28],[11,1,0,-7,[0,"40ndZLqWhIv4zXz0yKbQAd"],29],[299,"commonInAction","commonOutAction",true,-12,[0,"38Pei40C5PGa9wrUuO/XYv"],-11,-10,-9,-8]],4,4,1,4,4,4],[1,"dc1/JbG2JLdYq+Z8vPezWQ",-1,0]],[40,"nativeNode",33554432,[-23,-24,-25,-26,-27],[[2,-14,[0,"09O8v2K31O44Irxlv1+aQ1"],[5,640,360]],[147,-17,[0,"dcVfAG2OVIXJmMPVLfeCC2"],[[7,"608d23jf09O/5b/8Q9DfFBD","onSelfButtonClick",-16]],[4,4292269782],-15,25],[300,null,320,-22,[0,"94xMqUlX5LB6u8RQC1mqgV"],-21,-20,-19,-18]],[1,"d3DZnCjydLgYf/1938odoE",1,0],[1,0,-385.749,0]],[40,"inner",33554432,[-31,-32,-33,-34,-35,-36],[[2,-28,[0,"71k2iiVRVB8LLSKB9JjL7l"],[5,502,630]],[26,-29,[0,"26HuqgAntKe7TDJ6pEgdDu"]],[11,1,0,-30,[0,"0f3NviIvpBp5pvbNqUGUXt"],15]],[1,"02TrAacAVAUYAxph/SRrXF",1,0],[1,0,156.884,0]],[93,"hero",33554432,3,[-39,-40,-41,-42],[-37,-38],[1,"0ewgqX4vBKP46PYDBZNVJj",1,0],[1,0,-100,0],[3,0,0.19651946169232679,0,0.9804999241081858],[1,400,400,400],[1,0,22.667,0]],[39,"bg",33554432,1,[3,2],[[2,-43,[0,"cdG06aDW9JbL3R7y6015HI"],[5,502,780]],[41,1,0,-44,[0,"26He61gbNKeI0fXE64WK90"]],[26,-45,[0,"17LyjjWiNNzrlN1yfLqAH+"]]],[1,"0fUu0jcjJH15bfGBYuodoK",1,0]],[17,"adButton",33554432,3,[-49,-50],[[2,-46,[0,"f7NISe7HdAD68SLfhnddy8"],[5,250,85]],[11,1,0,-47,[0,"e71ctEmpxFC4KlSYRZNz/a"],10],[44,3,-48,[0,"fa5+nv/wpAxJZwP8ZTKw8g"],[[7,"2b2296Um4ZH65mFE/cJnWQD","onTryOutButtonClick",1]],11]],[1,"794aM1wb1CuKum6z1iH8ws",1,0],[1,0,-212.542,0]],[69,"noThanks",false,33554432,3,[-55],[[2,-51,[0,"60O6sotMJLwZtFWop7RzIp"],[5,98.96,30]],[38,3,-53,[0,"882ETrWTxBqLTqPKCX/cPr"],[[7,"2b2296Um4ZH65mFE/cJnWQD","onCloseButtonClick",1]],[4,4292269782],-52,13],[47,"暂不试用",25,25,30,false,-54,[0,"a3XhQ5WsNN4qFLLr4mHlvE"],14]],[1,"944JSaeZNNDIX2XJKrtc+G",1,0],[1,0,-283.044,0]],[8,"close",33554432,2,[[2,-56,[0,"c16svHHWJCU7CKletJBcc+"],[5,34,34]],[23,0,-57,[0,"ff+WSeFPlFcrma54V5l8gc"],17],[75,3,-59,[0,"c2CGEKd/5FuK4x7tDEwdMx"],[[7,"608d23jf09O/5b/8Q9DfFBD","onCloseButtonClick",2]],[4,4292269782],-58,18,19,20,21]],[1,"b2AqVYlGdKo6+02pHZpeGk",1,0],[1,-294.62,135.253,0]],[8,"closeButton",33554432,3,[[2,-60,[0,"21X+Ia9btLY6api8uiMnL2"],[5,52,53]],[6,-61,[0,"b9q4BonS1EnKD8d5+0PsVF"],1],[38,3,-63,[0,"913YzuCWBPKZavUAA1jKO0"],[[7,"2b2296Um4ZH65mFE/cJnWQD","onCloseButtonClick",1]],[4,4292269782],-62,2]],[1,"02ow9vFK5PpKAZwaJ2rk9s",1,0],[1,206.899,279.615,0]],[52,"marker",33554432,2,[-66],[[2,-64,[0,"a3ISeYu89D57MJhQVjcvPj"],[5,50.774,25.159000000000002]],[145,1,0,-65,[0,"earvp4249DrYiADlHXYGRV"],[4,3372220415],16]],[1,"76xekFHFNOc6IX1f7mrm/D",1,0],[1,280.93,138.69,0],[1,1.2,1.2,1.2]],[17,"lookButton",33554432,2,[-70],[[2,-67,[0,"bclRMKHYxG2IXoGLj7stCP"],[5,250,85]],[11,1,0,-68,[0,"85M36nzhBGkpcX0uApTpvu"],23],[45,-69,[0,"cfLSVzXVtCsYaM3X6SZ0c2"],[[7,"608d23jf09O/5b/8Q9DfFBD","onSelfButtonClick",2]],24]],[1,"ba1n6uk0lLyIFbjTgC7GLX",1,0],[1,0,179.531,0]],[60,"SPHERE001_1_1",33554432,[[80,1,0,-71,[0,"4c9z3WwfFGBrobBXEybsM9"],[4],[49],4,5,6],[2,-72,[0,"57hfNYddNEKoCPWWGzIIRQ"],[5,0,0]],[106,-73,[0,"360Uw0ZhpOJISGdEAa73Dp"]]],[1,"7d25XplhpDNKYl8edm6eMY",1,0],[1,-0.001031705760397017,-0.056308,0.006184028461575508]],[51,"mixamorig_Hips",33554432,[-74,-75,-76],[1,"0a3sHMrWBKy5mh4E5tYvK5",1,0],[1,0.002063411520794034,0.2593175768852234,-0.01236803736537695],[3,0.0023929856378427745,0.995876079101868,0.06685621326741793,0.06128095495313775],[1,-7.635983534023475,173.00707807406081,0.7425889600684812]],[51,"mixamorig_Spine2",33554432,[-77,-78,-79],[1,"34aaahjdhJnJBdOMiw4BXA",1,0],[1,-3.552713599391162e-17,0.05638634413480759,0],[3,0.029252197995834433,0.015935689430097974,-0.010050659206182446,0.9993944901610781],[1,3.370941359491348,1.8593476206728394,-1.0976731676017177]],[8,"icon",33554432,6,[[2,-80,[0,"f7NISe7HdAD68SLfhnddy8"],[5,59,44]],[6,-81,[0,"e71ctEmpxFC4KlSYRZNz/a"],8]],[1,"ebLG4Y0IxDXrwDWtYyn5P9",1,0],[1,-78.574,0,0]],[8,"label",33554432,6,[[2,-82,[0,"71eupCWVNLma/J9/qTqBX7"],[5,158.33,40]],[48,"立刻试用",40,false,-83,[0,"c32/hAxnZHMoym1W7AQ+sf"],9]],[1,"6dU4VW2hJJQ40RXoYbzB4Z",1,0],[1,35.056,0,0]],[131,"Label",false,33554432,2,[[[22,-84,[0,"1aEon8ubJBO4eZ+ILR5nnK"],[5,473.99399999999997,51.686],[0,0,0.5]],-85,[142,false,9,7.0020000000000095,-40.76650000000001,-86,[0,"ddzEKJ/E1PiaFY5hsWgmaG"]]],4,1,4],[1,"c7c4eUx2hD1Jm2xBnGqXx1",1,0],[1,-302.745,65.334,0]],[8,"panel_bg1",33554432,3,[[2,-87,[0,"c2V1c6WzJIYodjkixND0Kk"],[5,490.16200000000003,547.238]],[11,1,0,-88,[0,"20FlM8yZpA146b188VlpZm"],0]],[1,"8bSVi0hB1GIKTmamBH9McX",1,0],[1,0,-35.21999999999999,0]],[8,"title-002",33554432,3,[[2,-89,[0,"f4xGyIqyBOrbWwRc0+O6Fb"],[5,158.33,45]],[76,"皮肤试用",0,40,45,false,-90,[0,"f5JVRup6BM4KEFT01TOFiv"],3]],[1,"3bkZjAzRpMUrYlIQceXoBo",1,0],[1,-139.984,269.197,0]],[84,"001",33554432,4,[12,13],[1,"7227BxXD9E3IjF98wHK8Rw",1,0],[1,0.001031705760397017,0.2030099481344223,-0.0061840093694627285]],[37,"mixamorig_HeadTop_End Socket",33554432,4,[1,"2aGHjPJhFIAraEgh9NX6xI",1,0],[1,-0.0086944287223947,0.9948246522988149,0.04711596146966174],[3,-0.014872127011990031,0.9996891043065057,-0.005494157553204148,-0.019243928958930363],[1,0.662487780956531,-177.78461305385247,-1.6918205514204572]],[37,"mixamorig_LeftToe_End Socket",33554432,4,[1,"76JI0SOlZA7LgI2bXVlkbE",1,0],[1,0.07272711433904885,0.302079262126885,-0.07560324764239205],[3,0.07720382984028945,0.040350172342354974,0.9746904188846686,-0.20588836680192338],[1,-173.09449777264768,-169.5185000119221,-23.273736617959592]],[37,"mixamorig_RightToe_End Socket",33554432,4,[1,"15GX9XZWBH0bLfwqPsc2vZ",1,0],[1,-0.031762256631616345,0.20861501385951434,-0.06462891876727296],[3,-0.08950854851152235,0.7470231606465523,0.655784585502464,-0.062379440670442286],[1,-82.71231730809052,178.57998546787348,-12.447495520367493]],[28,"common_white",33554432,7,[[2,-91,[0,"f7NISe7HdAD68SLfhnddy8"],[5,5,5]],[6,-92,[0,"e71ctEmpxFC4KlSYRZNz/a"],12]],[1,"8080v0mxhNoZwITa3Dnr5R",1,0],[1,0,-13.546,0],[1,19.672,1,1]],[182,"image",33554432,2,[[[2,-93,[0,"60lxlch8dEzJmGViFae94K"],[5,640,360]],-94],4,1],[1,"81J0iurl1Os75r2O8Fg8qm",1,0]],[21,"Label",33554432,10,[[2,-95,[0,"c6KVPJmDRLj5ah48zj1QFW"],[5,36,25.2]],[104,"广告",18,18,20,-96,[0,"2ar6FLmQVK0In90e8nZ0MA"]]],[1,"8dXh6hJrBEVa0KYqNtLDy1",1,0]],[21,"label",33554432,11,[[2,-97,[0,"d0DzzcDO9I76jIOvls9YZS"],[5,120,40]],[48,"去看看",40,false,-98,[0,"edgF8O71hG35i1p8M1gvQP"],22]],[1,"ba2lGze0VGb7Zztwy8x4nt",1,0]],[10,"mixamorig_Spine",33554432,13,[-99],[1,"65guCC0t9CiZHoEc4DlTr2",1,0],[1,5.551115205843844e-18,0.042288169264793396,-0.00036916256067343056],[3,-0.12386011156302915,0.12867709811501943,0.008135558921744234,0.9838875392367373],[1,-14.232279178800969,14.78869934849394,-0.9091485287284771]],[10,"mixamorig_Spine1",33554432,28,[14],[1,"f5BAM5akxOn5iEesWu+QI0",1,0],[1,8.881783998477905e-18,0.04933808371424675,-1.0658140798173486e-16],[3,0.0296225394133844,0.01594763596680611,-0.01114812196446284,0.9993717513730505],[1,3.4155328955629343,1.8649123676210873,-1.2226367491481058]],[10,"mixamorig_Neck",33554432,14,[-100],[1,"4d5Qv++0VBLorqSqNebDjR",1,0],[1,-8.881783998477905e-18,0.06343469023704529,6.025056009661967e-10],[3,-0.03445329913631456,-0.020743694300765433,0.027395924743925666,0.9988153646359297],[1,-3.887370065911886,-2.270251200776176,3.2192135415124343]],[19,"mixamorig_Head",33554432,30,[[18,"mixamorig_HeadTop_End",33554432,-101,[1,"43SZbzuClI97MJwS2iuQac",1,0],[1,1.4876988900554012e-16,0.3001466393470764,0.0011448562145233154]]],[1,"94ltvRTkNBSakv31OEygu/",1,0],[1,-8.881783998477905e-18,0.03218189254403114,0.00012275218614377081],[3,0.17151315588373678,-0.057675924414770506,-0.007567358237691217,0.9834629938086156],[1,19.67492316491185,-6.3680724888391795,-1.9867736593111374]],[10,"mixamorig_LeftShoulder",33554432,14,[-102],[1,"eeD4qYhN5GQpHpPSUwL35k",1,0],[1,-0.025272076949477196,0.051629506051540375,0.0007563747931271791],[3,0.5603799825602487,-0.37139922417934584,0.6482940322743814,0.35742375290707623],[1,117.97876134844462,-96.69447123131813,2.704332927181809]],[10,"mixamorig_LeftArm",33554432,32,[-103],[1,"06dJxiJjRCY6toIhkKwzMF",1,0],[1,-3.552713599391162e-17,0.0559559240937233,0],[3,0.2752015336763306,0.3504462894354546,-0.3662782370159238,0.8168792855566995],[1,50.59908034177471,57.8769087941026,-23.92393628235333]],[19,"mixamorig_LeftForeArm",33554432,33,[[18,"mixamorig_LeftHand",33554432,-104,[1,"b3R6adoUlCi7JUk6gROX+G",1,0],[1,1.0658140798173486e-16,0.09513875097036362,-8.88178432935015e-17]]],[1,"da6MKaM6JO/ruXPUilFIVG",1,0],[1,0,0.11092560738325119,1.4210854397564648e-16],[3,0.006906326345678939,0.00015031936239299392,0.5905688959311781,0.8069576563978593],[1,2.0775917931296255,-1.4989801312786166,72.38855712268851]],[10,"mixamorig_RightShoulder",33554432,14,[-105],[1,"0e44D8kt9BI7Y3sMA03hVf",1,0],[1,0.025272076949477196,0.0516478531062603,-0.0013453873107209802],[3,-0.5585776637453329,-0.38272849204908144,0.6494601450286634,-0.34599337415330583],[1,117.88682900569064,97.85067425987722,-1.2520490992248492]],[10,"mixamorig_RightArm",33554432,35,[-106],[1,"22YL6pZaFIDKZhqznXBSsA",1,0],[1,3.552713599391162e-17,0.05598469078540802,-7.105427198782324e-17],[3,0.2286539350301079,0.04263348457390663,-0.11980709300043944,0.965166319581821],[1,27.521012695569773,8.063289708731691,-12.226152546459959]],[19,"mixamorig_RightForeArm",33554432,36,[[18,"mixamorig_RightHand",33554432,-107,[1,"f48XysWB9IyJ3ioegEgRG/",1,0],[1,1.4210854397564648e-16,0.09513869136571884,-1.4210854397564648e-16]]],[1,"bdEUO+uqFG+45cR9E7VDgA",1,0],[1,-2.6645351995433716e-17,0.11096233874559402,-1.4210854397564648e-16],[3,-0.030528030960982087,0.0002398746702611978,-0.72136669574569,0.6918800994787557],[1,-135.47892208566378,-132.98453440973418,-86.57434082553048]],[10,"mixamorig_LeftUpLeg",33554432,13,[-108],[1,"cbKgOunvZPLbo/yrLlhckv",1,0],[1,-0.05006299912929535,-0.023445740342140198,0.0006907245260663331],[3,0.07774957824122004,-0.2561955985283482,0.9630979659781691,0.027588517660923306],[1,150.14432396547616,-170.56599062468476,0.7622105331571107]],[10,"mixamorig_LeftLeg",33554432,38,[-109],[1,"41WTz9i41OaLR/G32VJToM",1,0],[1,3.552713599391162e-17,0.12528982758522034,-1.2434497928741312e-16],[3,0.9325883595946978,-0.04379414864434498,-0.07701544634933392,0.34989947858863807],[1,139.31514386463317,6.5490312658269705,-7.792110970249897]],[10,"mixamorig_LeftFoot",33554432,39,[-110],[1,"38jcUB+t1KQ4W8eTKrPOk6",1,0],[1,0,0.09087410569190979,0],[3,0.06375178735245939,0.738645141051213,-0.6710665268635934,-0.0029633990677301316],[1,84.74126378419373,175.32063681521672,5.633062086888788]],[19,"mixamorig_LeftToeBase",33554432,40,[[18,"mixamorig_LeftToe_End",33554432,-111,[1,"cfT9N4galKEJ+lcvd9mNLl",1,0],[1,-7.105427198782324e-17,0.022281795740127563,-3.552713599391162e-17]]],[1,"036D3z8jFMSY8Jm07CQt1K",1,0],[1,0,0.05022500082850456,-3.552713599391162e-17],[3,0.2964968049691212,-0.17176897617582526,0.0543017045594477,0.9378893262792524],[1,35.08682276231146,-20.756746258358135,0.00000417985616086644]],[10,"mixamorig_RightUpLeg",33554432,13,[-112],[1,"3aHwywcsdN5I/9Z3KZHC2d",1,0],[1,0.05006299912929535,-0.023445740342140198,0.0007796928402967751],[3,-0.03716114224003699,0.03913115028779787,0.9984831376790634,0.010919082156575818],[1,-175.47068110577064,175.69432436950765,1.082766883450719]],[10,"mixamorig_RightLeg",33554432,42,[-113],[1,"a7/Q50aSBLiK8WjRK0x3VR",1,0],[1,2.6645351995433716e-17,0.1253097951412201,-1.776356799695581e-17],[3,0.24444734454023967,-0.08214293219978132,-0.010078629233006665,0.9661244514396843],[1,28.132779700201798,-8.862712034971757,-3.4187855845158954]],[10,"mixamorig_RightFoot",33554432,43,[-114],[1,"08L97PvwREQ5v8GyVywXlp",1,0],[1,8.881783998477905e-18,0.09085717797279358,7.105427198782324e-17],[3,-0.09158261925069446,0.8051489644076772,-0.5736431516843141,0.11950440782713513],[1,70.17709598985363,174.77112577956743,-16.533808903107424]],[19,"mixamorig_RightToeBase",33554432,44,[[18,"mixamorig_RightToe_End",33554432,-115,[1,"8e04y3V9tPybqWd3uUlBml",1,0],[1,3.108624482185328e-17,0.0225580632686615,-3.552713599391162e-17]]],[1,"feN1nNNUJPaLEJATqf4whp",1,0],[1,-4.440891999238953e-18,0.049431171268224716,7.993606094938482e-17],[3,0.5450361893322382,0.17910028751691662,-0.0337834688919253,0.8183625825752169],[1,65.94589534253889,19.465755405853827,8.04425990705664]],[81,false,4,[0,"5cVXAgDBFNRIoEVPfpQhaK"],[7],[[31,"001/mixamorig_Hips/mixamorig_Spine/mixamorig_Spine1/mixamorig_Spine2/mixamorig_Neck/mixamorig_Head/mixamorig_HeadTop_End",21],[31,"001/mixamorig_Hips/mixamorig_LeftUpLeg/mixamorig_LeftLeg/mixamorig_LeftFoot/mixamorig_LeftToeBase/mixamorig_LeftToe_End",22],[31,"001/mixamorig_Hips/mixamorig_RightUpLeg/mixamorig_RightLeg/mixamorig_RightFoot/mixamorig_RightToeBase/mixamorig_RightToe_End",23]]],[107,4,[0,"55tQB+XlhN3oSCntKg6uPq"],21,22,23,46],[155,"广告的描述",0,25,25,35,2,false,17,[0,"3dlKhQlEpPWauiPUoRWyhs"],[4,4278190080]],[73,0,false,25,[0,"f0jfM48UhHzKobMRFOmVB2"]],[65,"alertLayer<Animation>",1,[0,"01v98gqllM4IhLYAysuxUy"],[26,27]]],0,[0,7,1,0,0,1,0,0,1,0,-3,50,0,6,1,0,0,1,0,0,1,0,29,16,0,17,15,0,21,47,0,11,50,0,0,1,0,-1,5,0,0,2,0,5,2,0,6,2,0,0,2,0,46,8,0,16,48,0,47,49,0,48,10,0,0,2,0,-1,17,0,-2,25,0,-3,10,0,-4,8,0,-5,11,0,0,3,0,0,3,0,0,3,0,-1,18,0,-2,9,0,-3,19,0,-4,4,0,-5,6,0,-6,7,0,-1,46,0,-2,47,0,-1,20,0,-2,21,0,-3,22,0,-4,23,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,-1,15,0,-2,16,0,0,7,0,5,7,0,0,7,0,0,7,0,-1,24,0,0,8,0,0,8,0,5,8,0,0,8,0,0,9,0,0,9,0,5,9,0,0,9,0,0,10,0,0,10,0,-1,26,0,0,11,0,0,11,0,0,11,0,-1,27,0,0,12,0,0,12,0,0,12,0,-1,28,0,-2,38,0,-3,42,0,-1,30,0,-2,32,0,-3,35,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,-2,48,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,0,24,0,0,24,0,0,25,0,-2,49,0,0,26,0,0,26,0,0,27,0,0,27,0,-1,29,0,-1,31,0,3,31,0,-1,33,0,-1,34,0,3,34,0,-1,36,0,-1,37,0,3,37,0,-1,39,0,-1,40,0,-1,41,0,3,41,0,-1,43,0,-1,44,0,-1,45,0,3,45,0,9,1,2,3,5,3,3,5,12,3,20,13,3,20,14,3,29,115],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,49],[1,1,4,2,-1,12,15,-1,1,2,1,4,1,4,2,1,1,1,4,18,19,20,2,1,4,4,-1,-2,4,1,8,1],[12,5,5,0,33,21,22,10,7,0,2,2,34,5,0,18,4,29,29,20,42,43,0,2,2,44,13,14,4,4,10,157]],[[{"name":"pink","rect":{"x":2,"y":2,"width":161,"height":166},"offset":{"x":-0.5,"y":29.5},"originalSize":{"width":166,"height":229},"rotated":false,"capInsets":[0,0,0,0],"texture":"8c523081-22f7-4113-8c37-a4c7b44f010c@6c48a","packable":true}],[5],0,[0],[10],[158]],[[{"name":"orange","rect":{"x":3,"y":2,"width":264,"height":227},"offset":{"x":-2,"y":5.5},"originalSize":{"width":274,"height":242},"rotated":false,"capInsets":[0,0,0,0],"texture":"8ef176a1-82fa-40e9-835b-4dd9ff6a8d29@6c48a","packable":true}],[5],0,[0],[10],[159]],[[[50,"failedPageOutAction",0.5,3174019996,[[0,0.5]],[{"frame":0.5,"func":"","params":[]},{"frame":0.5,"func":"onOutActionFinish","params":[]}],[[[{},"modifiers",12,[[[20,"cc.Sprite"],"color"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[4,4294967295],[4,16777215]],8,8]]]],11]]],0,0,[],[],[]],[[[108,"../matAndEffect/Sea/sea",[{"hash":3840037822,"name":"../matAndEffect/Sea/sea|unlit-vs:vert|unlit-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) out float v_fog_factor;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 heroOffsetVec4;\n};\nlayout(location = 1) out vec4 v_position;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out vec2 v_uv;\nlayout(set = 1, binding = 1) uniform TexCoords {\n  vec4 tilingOffset;\n};\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  float angle = position.z /2.0 +  cc_time.x / 2.0;\n  position.y = (sin(angle) - 1.0) * 0.2 ;\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_position = position;\n  v_worldPos =  matWorld * position;\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(location = 0) in float v_fog_factor;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 heroOffsetVec4;\n};\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 3) uniform sampler2D secondTexture;\nlayout(location = 3) in vec2 v_uv;\nlayout(location = 1) in vec4 v_position;\nlayout(location = 2) in vec4 v_worldPos;\nvec4 frag () {\n  vec4 f0 = texture(mainTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  vec4 f1 = texture(secondTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  float dis = distance(cc_cameraPos.xyz, v_worldPos.xyz);\n  float threshold = 10.0;\n  float fe = (dis - threshold) / 50.0;\n  if(fe < 0.0){\n    fe = 0.0;\n  }\n  else if(fe > 1.0){\n    fe = 1.0;\n  }\n vec4 f = f0 * fe + f1 * (1.0 - fe);\n  float e = 0.0;\n  if(dis > 100.0){\n    e = 1.0;\n  }\n  else{\n    e = (dis * dis) / (100.0 * 100.0);\n  }\n  vec3 interval = vec3(1,1,1) - f.xyz;\n  f.xyz += (interval * e);\n  return f;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nout float v_fog_factor;\nlayout(std140) uniform Constants {\n  vec4 heroOffsetVec4;\n};\nout vec4 v_position;\nout vec4 v_worldPos;\nout vec2 v_uv;\nlayout(std140) uniform TexCoords {\n  vec4 tilingOffset;\n};\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  float angle = position.z /2.0 +  cc_time.x / 2.0;\n  position.y = (sin(angle) - 1.0) * 0.2 ;\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_position = position;\n  v_worldPos =  matWorld * position;\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nin float v_fog_factor;\nlayout(std140) uniform Constants {\n  vec4 heroOffsetVec4;\n};\nuniform sampler2D mainTexture;\nuniform sampler2D secondTexture;\nin vec2 v_uv;\nin vec4 v_position;\nin vec4 v_worldPos;\nvec4 frag () {\n  vec4 f0 = texture(mainTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  vec4 f1 = texture(secondTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  float dis = distance(cc_cameraPos.xyz, v_worldPos.xyz);\n  float threshold = 10.0;\n  float fe = (dis - threshold) / 50.0;\n  if(fe < 0.0){\n    fe = 0.0;\n  }\n  else if(fe > 1.0){\n    fe = 1.0;\n  }\n vec4 f = f0 * fe + f1 * (1.0 - fe);\n  float e = 0.0;\n  if(dis > 100.0){\n    e = 1.0;\n  }\n  else{\n    e = (dis * dis) / (100.0 * 100.0);\n  }\n  vec3 interval = vec3(1,1,1) - f.xyz;\n  f.xyz += (interval * e);\n  return f;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nvarying float v_fog_factor;\nvarying vec4 v_position;\nvarying vec4 v_worldPos;\nvarying vec2 v_uv;\n  uniform vec4 tilingOffset;\nvec4 vert () {\n  vec4 position;\n      position = vec4(a_position, 1.0);\n    #if CC_USE_MORPH\n      applyMorph(position);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(position);\n    #endif\n  float angle = position.z /2.0 +  cc_time.x / 2.0;\n  position.y = (sin(angle) - 1.0) * 0.2 ;\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_position = position;\n  v_worldPos =  matWorld * position;\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\nuniform highp vec4 cc_cameraPos;\nvarying float v_fog_factor;\n     uniform vec4 heroOffsetVec4;\nuniform sampler2D mainTexture;\nuniform sampler2D secondTexture;\nvarying vec2 v_uv;\nvarying vec4 v_position;\nvarying vec4 v_worldPos;\nvec4 frag () {\n  vec4 f0 = texture2D(mainTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  vec4 f1 = texture2D(secondTexture, v_uv + vec2(-heroOffsetVec4.x * 0.12,cc_time.x * -0.05));\n  float dis = distance(cc_cameraPos.xyz, v_worldPos.xyz);\n  float threshold = 10.0;\n  float fe = (dis - threshold) / 50.0;\n  if(fe < 0.0){\n    fe = 0.0;\n  }\n  else if(fe > 1.0){\n    fe = 1.0;\n  }\n vec4 f = f0 * fe + f1 * (1.0 - fe);\n  float e = 0.0;\n  if(dis > 100.0){\n    e = 1.0;\n  }\n  else{\n    e = (dis * dis) / (100.0 * 100.0);\n  }\n  vec3 interval = vec3(1,1,1) - f.xyz;\n  f.xyz += (interval * e);\n  return f;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":196,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"heroOffsetVec4","type":16,"count":1}],"defines":[]},{"name":"TexCoords","stageFlags":1,"binding":1,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]},{"name":"secondTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_position","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":3,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"../matAndEffect/Sea/sea|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"secondTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"offset":{"vaule":0,"type":13,"handleInfo":["heroOffsetVec4",0,13]},"heroOffsetVec4":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0,0,0,0]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[239,[{},{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{}]]],0,0,[0],[13],[160]],[[[158,".bin",4308,3997400782,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3600,"length":708,"count":177,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3600,"count":75,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.14374762773513794,-0.39822983741760254,-0.1386016458272934],"maxPosition",8,[1,0.14374762773513794,0.39822983741760254,0.1386016458272934]]]],0,0,[],[],[]],[[[66,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaLimit":0.6,"moveSpeed":0.3},"striscaleTexture",6,0]],11]]],0,0,[0,0],[23,13],[161,36]],[[[25,"smokeYellow"],[94,"smokeYellow",2,[-2],[1,"48XzdOyFlJJLoZ0kGFUGXX",-1,0],[1,0,1.651,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,90,0,0]],[109,0.5,false,false,30,1,[0,"1fvP5/su5Pealsx7VIPmpW"],[0],[57,2,[4,4281122047],[4,4278255615]],[14,0.6],[4],[4],[14,1.8],[4],[4],[4],[4],[14,0.4],[4],[4],[4],[[111,[14,30]]],[112,[57,2,[4,4278190335],[4,4278190335]]],[113,true,3,0.5,[14,1]],[114,true,[110,1,[115,2,8,[[116,1],[117,1,0.01]]]],[4],[4],[4]],[118,[4],[4],[4],[14,1]],[119,[4],[4],[4]],[120,[4],[4],[4],[4]],[121,[4],[4],[4]],[122,[4],[4]],[123,[14,1],[4],[58],[58],-3],[124,1]]],0,[0,7,1,0,-1,2,0,25,2,0,9,1,3],[0,0],[-1,26],[39,25]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"texture":"b730527c-3233-41c2-aaf7-7cdab58f9749@6c48a","packable":true}],[5],0,[0],[10],[162]],[[[25,"servantBullet"],[197,"servantBullet",2,[[296,-2,[0,"91ZVw0ih9WSYJRwwbZa00V"],[0],[49],1],[286,256,-3,[0,"e48Rw/fBNIvJeEo26RYUkg"]],[260,-4,[0,"e5bl0W/VtCOKWkvs7AcLVg"],[1,-0.010576613247394562,-0.0024641752243041992,-0.024241648614406586],[1,0.2998221069574356,0.8045259714126587,0.3079241067171097]],[301,-5,[0,"d0NbIKspZPzLWBldRZVMgT"],[2,3,4]]],[1,"27FfwhH51Fiqm3HycsuysS",-1,0],[1,3,3,3]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,9,1,5],[0,0,0,0,0],[-1,12,-1,-2,-3],[163,164,165,166,167]],[[[50,"ResultPageInAction",1.8166666666666667,1156613546,[[0,0.3333333333333333],[0,0.45],[0.5833333333333334,0.75],[0.8333333333333334,1],[1.0833333333333333,1.25],[1.25,1.4166666666666667,1.8166666666666667],[0,1.25],[1.25,1.4166666666666667],[0,1.0833333333333333,1.25],[1.0833333333333333,1.25],[0.8333333333333334,1],[0,0.8333333333333334],[0.5833333333333334,0.7666666666666667],[0,0.5833333333333334]],[{"frame":0.43333333333333335,"func":"","params":[]},{"frame":0.43333333333333335,"func":"onInActionFinishForOppo","params":[]},{"frame":0.5833333333333334,"func":"","params":[]},{"frame":0.5833333333333334,"func":"tickPeopleLabel","params":[]},{"frame":0.8333333333333334,"func":"","params":[]},{"frame":0.8333333333333334,"func":"tickBaseDiamond","params":[]},{"frame":1.0833333333333333,"func":"","params":[]},{"frame":1.0833333333333333,"func":"tickDiamondBuffer","params":[]},{"frame":1.25,"func":"","params":[]},{"frame":1.25,"func":"tickTotalDiamond","params":[]},{"frame":1.8166666666666667,"func":"","params":[]},{"frame":1.8166666666666667,"func":"onInActionFinish","params":[]}],[[[{},"modifiers",12,[[[13,"title"],"scale"],4,0],"data",11,[{"keys":0,"easingMethods":{"0":[0.25,0.46,0.46,1.2]}},"values",12,[[[1,0,0,0],[1,1,1,1]],8,8]]],[{},"modifiers",12,[[[13,"light"],[20,"cc.Sprite"],"color"],4,4,0],"data",11,[{"keys":1,"easingMethods":{}},"values",12,[[[4,16777215],[4,4294967295]],8,8]]],[{},"modifiers",12,[[[13,"tool0"],"position"],4,0],"data",11,[{"keys":2,"easingMethods":{"0":"quadOut"}},"values",12,[[[1,-189.985,180,0],[1,-189.985,155.003,0]],8,8]]],[{},"modifiers",12,[[[13,"tool1"],"position"],4,0],"data",11,[{"keys":3,"easingMethods":{"0":[0.25,0.46,0.45,1]}},"values",12,[[[1,0,180,0],[1,0,155.003,0]],8,8]]],[{},"modifiers",12,[[[13,"tool2"],"position"],4,0],"data",11,[{"keys":4,"easingMethods":{"0":[0.3,0.3,0.33,1.05]}},"values",12,[[[1,190,180,0],[1,190,155.003,0]],8,8]]],[{},"modifiers",12,[[[13,"tool3"],"position"],4,0],"data",11,[{"keys":5,"easingMethods":{"0":[0.25,0.46,0.43,1.28]}},"values",12,[[[1,0,118.773,0],[1,0,59.693,0],[1,0,59.693,0]],8,8,8]]],[{"data":{"keys":6,"values":[false,true],"easingMethods":{}}},"modifiers",12,[[[13,"tool3"],"active"],4,0]],[{},"modifiers",12,[[[13,"tool3"],[20,"cc.Sprite"],"color"],4,4,0],"data",11,[{"keys":7,"easingMethods":{}},"values",12,[[[4,16777215],[4,4294967295]],8,8]]],[{"data":{"keys":8,"values":[false,true,true],"easingMethods":{}}},"modifiers",12,[[[13,"tool2"],"active"],4,0]],[{},"modifiers",12,[[[13,"tool2"],[20,"cc.Sprite"],"color"],4,4,0],"data",11,[{"keys":9,"easingMethods":{}},"values",12,[[[4,16777215],[4,4294967295]],8,8]]],[{},"modifiers",12,[[[13,"tool1"],[20,"cc.Sprite"],"color"],4,4,0],"data",11,[{"keys":10,"easingMethods":{}},"values",12,[[[4,16777215],[4,4294967295]],8,8]]],[{"data":{"keys":11,"values":[false,true],"easingMethods":{}}},"modifiers",12,[[[13,"tool1"],"active"],4,0]],[{},"modifiers",12,[[[13,"tool0"],[20,"cc.Sprite"],"color"],4,4,0],"data",11,[{"keys":12,"easingMethods":{}},"values",12,[[[4,16777215],[4,4294967295]],8,8]]],[{"data":{"keys":13,"values":[false,true],"easingMethods":{}}},"modifiers",12,[[[13,"tool0"],"active"],4,0]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11]]],0,0,[],[],[]],[[[25,"loadingPage"],[36,"loadingPage",33554432,[-11,-12,-13,-14,-15,-16],[[[2,-2,[0,"f7NISe7HdAD68SLfhnddy8"],[5,640,1136]],[23,0,-3,[0,"e71ctEmpxFC4KlSYRZNz/a"],7],[96,45,160,284,-4,[0,"ceBKvnf3lDHrsoXzuBWzOy"]],[26,-5,[0,"b1ZzSc0LhKc6lMOS40ZM7M"]],-6,[302,"loadingPageOutAction",-10,[0,"b3U4dBpE9JZK3wv+LX0BZQ"],-9,-8,-7]],4,4,4,4,1,4],[1,"44QpnsZslBqZpKxn2EzDi2",-1,0]],[183,"ProgressBar",33554432,1,[-21],[[[2,-17,[0,"0a4TUb2bBHBa3wO6MCw2d2"],[5,441.943,46]],[11,1,0,-18,[0,"e3LBidlN9MdpNxB8lzYZv7"],2],-19,-20],4,4,1,1],[1,"e4uXVNuKFBlJEmB//qljKC",1,0]],[8,"cloud",33554432,1,[[2,-22,[0,"f7NISe7HdAD68SLfhnddy8"],[5,640,864]],[23,0,-23,[0,"e71ctEmpxFC4KlSYRZNz/a"],0],[98,4,-24,[0,"0b5GxLiYlGNpjeJgZkbaNP"]]],[1,"33Auj33lxMZLMVwQqeUb7E",1,0],[1,0,-136,0]],[8,"man",33554432,1,[[2,-25,[0,"f7NISe7HdAD68SLfhnddy8"],[5,143,146]],[63,2,false,-26,[0,"e71ctEmpxFC4KlSYRZNz/a"],3],[105,true,-27,[0,"68ot0dwkVDb7NWmt8D5jvR"],[4],5]],[1,"1b+7XWpHdJlYqJPtB/thpK",1,0],[1,0,125.639,0]],[16,"versionLabel",33554432,1,[[[22,-28,[0,"272rAgnoJBfpn3NsXY9AHs"],[5,234.06,40],[0,0,0.5]],-29,[205,12,10,10,-30,[0,"159Y4tgB1FG6uBZs9t6KDz"]]],4,1,4],[1,"c65QRV8LBFro+JUyrd6TdJ",1,0],[1,-310,-538,0]],[21,"loading_2",33554432,1,[[2,-31,[0,"f7NISe7HdAD68SLfhnddy8"],[5,490,94]],[6,-32,[0,"e71ctEmpxFC4KlSYRZNz/a"],1]],[1,"79QxOr2WpGEZFcIumDGcKN",1,0]],[16,"Bar",33554432,2,[[[22,-33,[0,"80SdIywIVFupwJOwCni0ux"],[5,435,40],[0,0,0.5]],-34],4,1],[1,"67FGvd5vZAQI6p4f+65oI6",1,0],[1,-217.487,0,0]],[8,"noline",33554432,1,[[2,-35,[0,"7dZ1VcKghCOLuzgCiIY8UR"],[5,157.5,40]],[229,"加载中...",40,false,-36,[0,"37d/qv3NJEpKeXN+O6/SnF"],[4,4292713556],6]],[1,"24VTp5D6ZJcJCk9iCSmyZL",1,0],[1,0,-68.948,0]],[41,2,0,7,[0,"e00niSjJdHzqQfr6Uq+1as"]],[82,435,1,2,[0,"3f/uAXDzRCkYMASuN3GC61"],9],[164,2,[0,"ffJnShxPlPtppdoR8LeprD"],10],[101,"version:1.1.0",35,35,false,5,[0,"c5MHaDWtFOu6IIoIdzefNk"]],[79,1,[0,"0dmsl6OFNE3ab0Vi161/JH"],[8,9]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-5,13,0,35,11,0,109,12,0,11,13,0,0,1,0,-1,3,0,-2,6,0,-3,2,0,-4,4,0,-5,8,0,-6,5,0,0,2,0,0,2,0,-3,10,0,-4,11,0,-1,7,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,5,0,-2,12,0,0,5,0,0,6,0,0,6,0,0,7,0,-2,9,0,0,8,0,0,8,0,9,1,36],[0,0,0,0,0,0,0,0,0,0,9,9,12],[1,1,1,1,-1,8,2,1,-1,-2,14,1,2],[168,169,170,38,79,79,45,171,172,173,174,175,0]],[[{"name":"back_cloud0","rect":{"x":0,"y":31,"width":640,"height":119},"offset":{"x":0,"y":-15.5},"originalSize":{"width":640,"height":150},"rotated":false,"capInsets":[0,57,0,0],"texture":"bc3bc730-09ed-4f16-bdef-70ee09bdb252@6c48a","packable":true}],[5],0,[0],[10],[176]],[[{"name":"default_editbox_bg","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"bd1bcaba-bd7d-4a71-b143-997c882383e4@6c48a","packable":true}],[5],0,[0],[10],[177]],[[[169,"ResultPageBottomAction",0.5,680525604,[[0,0.5],[0,0.5]],[[[{},"modifiers",12,[[[13,"pan"],"position"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[1,0,-306.35,0],[1,0,-266.19,0]],8,8]]],[{},"modifiers",12,[[[13,"pan"],[20,"cc.Sprite"],"color"],4,4,0],"data",11,[{"keys":1,"easingMethods":{}},"values",12,[[[4,16777215],[4,4294967295]],8,8]]]],11,11]]],0,0,[],[],[]],[[[108,"builtin-particle",[{"hash":1755172438,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":3314483928,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":38}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":3916783067,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":37}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]},{"hash":1118626722,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\n  float xOS = cos(angle) * corner.x - sin(angle) * corner.y;\n  float yOS = sin(angle) * corner.x + cos(angle) * corner.y;\n  corner.x = xOS;\n  corner.y = yOS;\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\n  rotateCorner(viewSpaceVert, q.z);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0\n      vec3 rotEuler = a_texCoord2;\n    #elif CC_RENDER_MODE == 1\n      vec3 rotEuler = vec3(0.);\n    #else\n      vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n    #endif\n    computeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      , cc_matViewInv\n    #endif\n    #if CC_RENDER_MODE == 1\n      , cc_cameraPos.xyz\n      , velocity\n      , frameTile_velLenScale.z\n      , frameTile_velLenScale.w\n      , a_texCoord.x\n    #endif\n    );\n    color = a_color;\n  #else\n    mat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\n    mat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":37}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]}],"blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_texCoord","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord1","type":15,"count":1,"stageFlags":1,"format":32,"location":2,"defines":[]},{"name":"a_texCoord2","type":15,"count":1,"stageFlags":1,"format":32,"location":3,"defines":[]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":4,"defines":[]},{"name":"a_color1","type":15,"count":1,"stageFlags":1,"format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","type":15,"count":1,"stageFlags":1,"format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[25,"progressLotteryPage"],[36,"progressLotteryPage",33554432,[-16],[[[2,-2,[0,"a1jE5BAX9A+LHvw0lM+wRP"],[5,640,1136]],[62,45,100,100,0,-3,[0,"35DI5ZhPJAsYM33BdmOFFe"]],[26,-4,[0,"ff+yh35TBKW638rAmYRWU/"]],[143,1,0,false,-5,[0,"d4dhgAP+VDe6oRT9+p1HDC"],18],-6,[303,"commonInAction","commonOutAction",-11,[0,"80XEDwgs1LVIB/8PyQ71AH"],-10,-9,-8,-7,21],[304,30.26,-15,[0,"6fj0Nzu/tCLKxPkEYX63/b"],-14,-13,-12]],4,4,4,4,1,4,4],[1,"fer45BTktJN6AkL3yC6ark",-1,0]],[39,"bg",33554432,1,[-19,-20,-21,-22,-23,-24,-25,-26],[[2,-17,[0,"fcVnvJUcNNhbC7XEb3JaGC"],[5,350,474.752]],[11,1,0,-18,[0,"b57PRRbRZEi50mlvrl4mzj"],17]],[1,"506U4l2eBByJQKTSJd5hND",1,0]],[184,"Toggle",33554432,2,[-29,-30,-31],[[[2,-27,[0,"a7yxb8GDhNnIT24rnD3lO4"],[5,222.16899999999998,39.228]],-28],4,1],[1,"47STGbQuNKlpRCdC5i1Adu",1,0],[1,0,-70.33699999999999,0],[1,0.6,0.6,0.6]],[185,"QQToggle",false,33554432,2,[-34,-35,-36],[[[2,-32,[0,"d4abj7dMFAJZtTyibxkjk8"],[5,222.16899999999998,39.228]],-33],4,1],[1,"48NeZVCilPs4gVSCmMGHHS",1,0],[1,0,-100.125,0],[1,0.6,0.6,0.6]],[52,"sureButton",33554432,2,[-41,-42],[[30,"sureButton<UITransform>",-37,[0,"f8HVek2lVN5qX4WudE3rbf"],[5,162.913,60.785]],[54,"sureButton<Sprite>",1,0,-38,[0,"25sosb4CxEyLghCFT6XLFn"],13],[46,"sureButton<Button>",3,-40,[0,"3bI6XEBiBE4pliQXYBL3I1"],[[7,"328e0Pom4pKn71gHc360hD0","onGetButtonClick",1]],[4,4292269782],-39,14]],[1,"02tSkm7ttKlqkABkSq6rGr",1,0],[1,0,-150,0],[1,0.9,0.9,0.9]],[90,"strictButton",false,33554432,2,[-47],[[30,"sureButton<UITransform>",-43,[0,"91Yh0UXmhIUK65z6d3Pew4"],[5,162.913,60.785]],[54,"sureButton<Sprite>",1,0,-44,[0,"92Hg8QVZRFkq591T28J5+1"],6],[46,"sureButton<Button>",3,-46,[0,"50rYZNHzxKOKAUWHinQ3+4"],[[7,"328e0Pom4pKn71gHc360hD0","onCancelButtonClick",1]],[4,4292269782],-45,7]],[1,"a23rGT1xNEO7/ucQRm4QNu",1,0],[1,-80,-150,0],[1,0.9,0.9,0.9]],[8,"back",33554432,3,[[2,-48,[0,"a7yxb8GDhNnIT24rnD3lO4"],[5,37,37]],[6,-49,[0,"3a4GKzsKZCNLuWHErVRJ1B"],2],[167,-51,[0,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],-50,3]],[1,"70sxQYGD5O75luFM7JI4Cd",1,0],[1,-88.88,0,0]],[8,"back",33554432,4,[[2,-52,[0,"3dGnYgshZNHq/L3JKG8dMm"],[5,37,37]],[6,-53,[0,"2fuIHxtKRLF5ysm+T060d1"],8],[167,-55,[0,"a63ayvMxNBF4+FlbLi+8bE"],[4,4292269782],-54,9]],[1,"18ZNg0swJMZ4MOQE6HTA9J",1,0],[1,-88.88,0,0]],[28,"cancelButton",33554432,2,[[30,"cancelButton<UITransform>",-56,[0,"06BEYLhJJIv6fhKARhLhYe"],[5,80,25]],[47,"忍痛放弃",20,20,25,false,-57,[0,"b5+xfrS+1D67elz7/OskoU"],15],[46,"cancelButton<Button>",3,-59,[0,"c66uxfWY9BqZHioeZNU4f/"],[[7,"328e0Pom4pKn71gHc360hD0","onCancelButtonClick",1]],[4,4292269782],-58,16]],[1,"66F5UOWqlOn6fam2dE+zR6",1,0],[1,0,-203.776,0],[1,0.9,0.9,0.9]],[28,"suess_light",33554432,2,[[2,-60,[0,"f7NISe7HdAD68SLfhnddy8"],[5,147,147]],[6,-61,[0,"e71ctEmpxFC4KlSYRZNz/a"],0]],[1,"c61A0v6WhOao0i6wdrgMdD",1,0],[1,0,38.854,0],[1,2,2,2]],[8,"game_video",33554432,5,[[2,-62,[0,"f7NISe7HdAD68SLfhnddy8"],[5,54.626,41.084]],[23,0,-63,[0,"e71ctEmpxFC4KlSYRZNz/a"],11]],[1,"8fvvRBEEBDq6RCGf3d0q/I",1,0],[1,-38.49,1.749,0]],[8,"Label",33554432,5,[[2,-64,[0,"28cV5Es1dG05VTT7Wi+3tN"],[5,70,40]],[102,"获得",35,35,false,false,-65,[0,"48bJRwaUhOS6OHg4sZwNqh"],12]],[1,"f4FuPmDl5P1ZjNLfNNbC/8",1,0],[1,30.26,0.34,0]],[8,"title",33554432,2,[[2,-66,[0,"903QQVVs1EnpIRknkejBDm"],[5,121.88,35]],[230,"物品解锁",0,0,30,30,35,false,-67,[0,"aa4IEgEHlH5Kh703wDR3Px"],1]],[1,"504W1tuT9NvbhI21xcgSVf",1,0],[1,0,161.936,0]],[85,"icon",33554432,2,[[[136,-68,[0,"f7NISe7HdAD68SLfhnddy8"]],-69],4,1],[1,"80qY/vJV9DCaaiG7DbdmTi",1,0],[1,0,55.552,0],[1,1.5,1.5,1.5]],[16,"Checkmark",33554432,3,[[[2,-70,[0,"e4k6OSwohL75lyfsntvPC5"],[5,50,41]],-71],4,1],[1,"4evBNhsyxGiZoKaENlejU4",1,0],[1,-88.88,0,0]],[8,"normal",33554432,3,[[2,-72,[0,"faYYfu2uVPFJy8l2oG1AQT"],[5,177.5,40]],[156,"自动装备道具",30,30,false,-73,[0,"58qx0tEcFHs563yNDpvVgz"],[4,4292179754],4]],[1,"bc6Sg4MOdMBoNOJfbPa+rh",1,0],[1,26.387,0,0]],[8,"Label",33554432,6,[[2,-74,[0,"c5jws+oBJPh4tpeoKUyD7R"],[5,140,40]],[102,"忍痛放弃",35,35,false,false,-75,[0,"fevq9bDa9MhLGDoLECqgUV"],5]],[1,"1dgDbY5hBG2anc5rFMo70k",1,0],[1,0,0.34,0]],[16,"Checkmark",33554432,4,[[[2,-76,[0,"d0zIv+pMZMV7I8Yob9/y54"],[5,50,41]],-77],4,1],[1,"12dEOCpgZLLIq1Pqu/UPTu",1,0],[1,-88.88,0,0]],[8,"normal",33554432,4,[[2,-78,[0,"5dadvhhHFOZo8+wnNrksiV"],[5,177.5,40]],[156,"观看广告领取",30,30,false,-79,[0,"97YKmCr9ZBN7HX8TKyNgSn"],[4,4292179754],10]],[1,"feWgFnFVxEsaK+8GIt1mX9",1,0],[1,26.387,0,0]],[73,2,false,14,[0,"e71ctEmpxFC4KlSYRZNz/a"]],[74,15,[0,"25nHiyhlVLhbUiFI4JJ9Sn"]],[305,3,[0,"58GFHdMmJFBa4quSrrbzsk"],[4,4292269782],3,21],[74,18,[0,"65IoLm1+hPNJtJd6FmiP3c"]],[306,4,[0,"cbBNrMSv5ImYe0+Pip7Z4w"],[4,4292269782],4,[[7,"814e1lx2r1IRapPQtugo5Bi","onToggleClick",1]],23],[65,"alertLayer<Animation>",1,[0,"feZPx5LJRII52Bac78blIa"],[19,20]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-5,25,0,49,22,0,110,10,0,24,20,0,11,25,0,0,1,0,29,12,0,111,11,0,49,24,0,0,1,0,-1,2,0,0,2,0,0,2,0,-1,10,0,-2,13,0,-3,14,0,-4,3,0,-5,6,0,-6,4,0,-7,5,0,-8,9,0,0,3,0,-2,22,0,-1,7,0,-2,15,0,-3,16,0,0,4,0,-2,24,0,-1,8,0,-2,18,0,-3,19,0,0,5,0,0,5,0,5,5,0,0,5,0,-1,11,0,-2,12,0,0,6,0,0,6,0,5,6,0,0,6,0,-1,17,0,0,7,0,0,7,0,5,7,0,0,7,0,0,8,0,0,8,0,5,8,0,0,8,0,0,9,0,0,9,0,5,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,-2,20,0,0,15,0,-2,21,0,0,16,0,0,16,0,0,17,0,0,17,0,0,18,0,-2,23,0,0,19,0,0,19,0,9,1,79],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,23,24],[1,2,1,4,2,2,1,4,1,4,2,1,2,1,4,2,4,1,1,-1,-2,37,1,1,4,1,4],[47,0,30,30,45,0,9,9,30,30,45,7,0,2,2,0,32,178,4,13,14,51,54,80,81,80,81]],[[[66,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaLimit":0.99,"moveSpeed":0.15},"striscaleTexture",6,0]],11]]],0,0,[0,0],[23,13],[179,36]],[[[25,"interstitialLayer"],[91,"interstitialLayer",33554432,[-9],[[2,-2,[0,"58TuvruylCbLtYwYQDMQSc"],[5,640,1136]],[206,45,-1.3322676295501878e-15,1.3322676295501878e-15,2.842170943040401e-14,-2.842170943040401e-14,100,100,0,-3,[0,"3fJt6eHDpKApErXsnFCWqS"]],[11,1,0,-4,[0,"0fvKzosC5LopqtmsX9Wukp"],25],[26,-5,[0,"aaOkvd9gJBBagWmnH5M7AK"]],[307,-7,-6],[265,-8,[0,"238bOC+flJJ4KzwevjmHcv"]]],[1,"f5/shk2/VK5Z3352GiNwHx",-1,0]],[198,"nativeNode",33554432,[-21,-22,-23,-24,-25],[[2,-10,[0,"09O8v2K31O44Irxlv1+aQ1"],[5,618.845,381.855052631579]],[11,1,0,-11,[0,"75ByotOkZOnYAPuT1dQhgT"],22],[308,-17,-16,-15,-14,-13,-12],[147,-20,[0,"dcVfAG2OVIXJmMPVLfeCC2"],[[7,"5ded5voDw9Lw6Cqxtlxg7CC","onSelfButtonClick",-19]],[4,4292269782],-18,23]],[1,"7c0LLA1LxL4IV0tHP1MlSm",1,0],[1,0,-289.593,0],[1,0.95,0.95,0.95]],[39,"bg",33554432,1,[-29,-30,-31,-32,-33,-34,2],[[2,-26,[0,"71k2iiVRVB8LLSKB9JjL7l"],[5,600,950]],[11,1,0,-27,[0,"acMu0dV1JG67G6iuPgh4cx"],24],[26,-28,[0,"26HuqgAntKe7TDJ6pEgdDu"]]],[1,"5fmQqnkOlKNJSuMDzogFOj",1,0]],[52,"Node",33554432,3,[-36,-37,-38,-39,-40],[[2,-35,[0,"cdexLujd9MnKsdM5WMySfs"],[5,0,0]]],[1,"b4sqRNbZtE9IJsO7xuAtCA",1,0],[1,0,194.013,0],[1,0.9,0.9,0.9]],[17,"wxButton",33554432,3,[-45],[[30,"cancelButton<UITransform>",-41,[0,"8aPBgU9FlAKJQOp1EsnZ5n"],[5,134.541,63.358000000000004]],[54,"cancelButton<Sprite>",1,0,-42,[0,"f6/VVT4t5Dq69fT18AqZEO"],4],[46,"cancelButton<Button>",3,-44,[0,"211oUB5LBA7J3jOMZf0yed"],[[7,"554b51zoFVA3KqKGrMb8+x9","onGetButtonClick",1]],[4,4292269782],-43,5]],[1,"18+hKJYKxOd4YnZLTT8btf",1,0],[1,0,4.478,0]],[89,"close",false,33554432,2,[[2,-46,[0,"c16svHHWJCU7CKletJBcc+"],[5,34,34]],[23,0,-47,[0,"ff+WSeFPlFcrma54V5l8gc"],14],[75,3,-49,[0,"c2CGEKd/5FuK4x7tDEwdMx"],[[7,"5ded5voDw9Lw6Cqxtlxg7CC","onCloseButtonClick",2]],[4,4292269782],-48,15,16,17,18]],[1,"17sOTS5gxObb7iUmWJPV8n",1,0],[1,282.124,161.742,0]],[8,"closeButton",33554432,3,[[2,-50,[0,"21X+Ia9btLY6api8uiMnL2"],[5,52,53]],[6,-51,[0,"b9q4BonS1EnKD8d5+0PsVF"],1],[38,3,-53,[0,"913YzuCWBPKZavUAA1jKO0"],[[7,"554b51zoFVA3KqKGrMb8+x9","onCloseButtonClick",1]],[4,4292269782],-52,2]],[1,"25G/7aasZHNL4GpA1+5zm+",1,0],[1,256.417,419.741,0]],[17,"bg",33554432,2,[-56],[[2,-54,[0,"d0vAlbDApE172oKkrUhPWX"],[5,605,315]],[23,0,-55,[0,"f6+s6CVVxKLZ/ji0ujU42a"],12]],[1,"bcsTq4GglIwK2DbDmSz+E+",1,0],[1,0,-16,0]],[52,"marker",33554432,2,[-59],[[2,-57,[0,"a3ISeYu89D57MJhQVjcvPj"],[5,50.774,25.159000000000002]],[145,1,0,-58,[0,"earvp4249DrYiADlHXYGRV"],[4,3372220415],13]],[1,"f0KYkLou9OnJ0UkvTBVHuP",1,0],[1,258.052,112.201,0],[1,1.2,1.2,1.2]],[17,"lookButton",33554432,2,[-63],[[2,-60,[0,"a2XWiooJxM05kQL2/jcj0L"],[5,250,75]],[11,1,0,-61,[0,"4fmhFmFQlJuIyGxAXopRrn"],20],[217,-62,[0,"583uhr0JNINo6/p8SkByhm"],[[7,"5ded5voDw9Lw6Cqxtlxg7CC","onSelfButtonClick",2]],[4,4293322470],21]],[1,"5exeDKVs5FeLBJJ2ySb1b5",1,0],[1,0,216.862,0]],[16,"Label",33554432,8,[[[22,-64,[0,"1aEon8ubJBO4eZ+ILR5nnK"],[5,473.99399999999997,51.686],[0,0,0.5]],-65,[142,false,9,7.0020000000000095,-40.76650000000001,-66,[0,"ddzEKJ/E1PiaFY5hsWgmaG"]]],4,1,4],[1,"84BGFT0t5FaIAwV4p7nMDz",1,0],[1,-302.745,178.737,0]],[8,"panel_bg1",33554432,3,[[2,-67,[0,"c2V1c6WzJIYodjkixND0Kk"],[5,592,752.8180000000002]],[11,1,0,-68,[0,"20FlM8yZpA146b188VlpZm"],0]],[1,"41iR6oIdVD5Lj4UIWbkKZG",1,0],[1,0,-6.371999999999985,0]],[16,"title",33554432,3,[[[22,-69,[0,"f4xGyIqyBOrbWwRc0+O6Fb"],[5,161.67,45],[0,0,0.5]],-70],4,1],[1,"9cphigP0tOkrStIwpRvAZV",1,0],[1,-280.062,412.446,0]],[21,"Label",33554432,5,[[30,"Label<UITransform>",-71,[0,"523h3PtKpNJ5/SlA8xdGOY"],[5,70.73,48]],[64,"Label<Label>","领取",35,35,48,false,false,-72,[0,"e0wx7cUH9NU62DoCcoRNo0"],3]],[1,"21RMCOcuJMkqqOkHErfnR8",1,0]],[28,"spriteFrame-004",33554432,4,[[2,-73,[0,"86Z6EUbb5AjrCke5PV8isf"],[5,116,141]],[6,-74,[0,"3bDwdqe7VL8IKOw6V7CTM1"],6]],[1,"61AM/WlOxJspaSIihFvF0W",1,0],[1,60.135,-46.917,0],[1,0.294,0.294,0.294]],[21,"spriteFrame",33554432,4,[[2,-75,[0,"f7NISe7HdAD68SLfhnddy8"],[5,116,141]],[6,-76,[0,"e71ctEmpxFC4KlSYRZNz/a"],7]],[1,"88ml3agadD0YDCsgSHJfmw",1,0]],[28,"spriteFrame-001",33554432,4,[[2,-77,[0,"84ERzH7gRK77nzbSgmtDjh"],[5,116,141]],[6,-78,[0,"b37HfBDUhKoKxqzumUxz9G"],8]],[1,"71OfDKu3hE8KpVlUn8UsXF",1,0],[1,-73.87,-56.411,0],[1,0.376,0.376,0.376]],[28,"spriteFrame-002",33554432,4,[[2,-79,[0,"3diBxphelFPIAE5He+SWh+"],[5,116,141]],[6,-80,[0,"87hB6oRg5GQrphN3983aco"],9]],[1,"b4gsWGiSBN3YDJblz+bvHs",1,0],[1,-59.595,61.769,0],[1,0.412,0.412,0.412]],[28,"spriteFrame-003",33554432,4,[[2,-81,[0,"0eaA5b/JxLKb04HE2BGEn0"],[5,116,141]],[6,-82,[0,"47iwL+XFpNgo0chEbKxnMF"],10]],[1,"0dH71ulrZK0aPmENeHJnsG",1,0],[1,49.116,73.662,0],[1,0.243,0.243,0.243]],[8,"des-002",33554432,3,[[2,-83,[0,"81grrs0fpK3KNcivsvj01j"],[5,140,48]],[231,"钻石 +100",0,30,30,48,false,-84,[0,"b65b6eHldEF4KRq1Ght1Uy"],11]],[1,"b42jAvf9NBQ7jiKWqoFAya",1,0],[1,0,83.279,0]],[16,"image",33554432,2,[[[2,-85,[0,"60lxlch8dEzJmGViFae94K"],[5,576,288]],-86],4,1],[1,"193Z9/3U1H2qjxOgCp+YQc",1,0],[1,0,-16,0]],[21,"Label",33554432,9,[[2,-87,[0,"c6KVPJmDRLj5ah48zj1QFW"],[5,36,25.2]],[104,"广告",18,18,20,-88,[0,"2ar6FLmQVK0In90e8nZ0MA"]]],[1,"36YmbYmAtC3qqPbipziivJ",1,0]],[21,"label",33554432,10,[[2,-89,[0,"7c2aOzaixIA73J0vnjbvla"],[5,120,40]],[48,"去看看",40,false,-90,[0,"54f8nrLhdHnofvyPSBIznl"],19]],[1,"fesnT4TlxFVJgxWNLBPGh2",1,0]],[232,"额外赠送",0,0,40,45,false,13,[0,"f5JVRup6BM4KEFT01TOFiv"]],[155,"广告的描述广告的描述广告的描述",0,23,23,35,2,false,11,[0,"3dlKhQlEpPWauiPUoRWyhs"],[4,4278190080]],[73,2,false,21,[0,"f0jfM48UhHzKobMRFOmVB2"]]],0,[0,7,1,0,0,1,0,0,1,0,0,1,0,0,1,0,36,24,0,0,1,0,0,1,0,-1,3,0,0,2,0,0,2,0,46,6,0,16,25,0,47,26,0,48,9,0,112,8,0,0,2,0,5,2,0,6,2,0,0,2,0,-1,8,0,-2,21,0,-3,9,0,-4,6,0,-5,10,0,0,3,0,0,3,0,0,3,0,-1,12,0,-2,7,0,-3,13,0,-4,5,0,-5,4,0,-6,20,0,0,4,0,-1,15,0,-2,16,0,-3,17,0,-4,18,0,-5,19,0,0,5,0,0,5,0,5,5,0,0,5,0,-1,14,0,0,6,0,0,6,0,5,6,0,0,6,0,0,7,0,0,7,0,5,7,0,0,7,0,0,8,0,0,8,0,-1,11,0,0,9,0,0,9,0,-1,22,0,0,10,0,0,10,0,0,10,0,-1,23,0,0,11,0,-2,25,0,0,11,0,0,12,0,0,12,0,0,13,0,-2,24,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,-2,26,0,0,22,0,0,22,0,0,23,0,0,23,0,9,1,2,3,3,90],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24],[1,1,4,2,1,4,1,1,1,1,1,2,1,1,1,4,18,19,20,2,1,4,1,4,1,1,2],[12,5,5,0,2,2,3,3,3,3,3,0,180,4,29,29,20,42,43,0,2,2,44,44,18,4,0]],[[{"name":"progress_lottery_6","rect":{"x":0,"y":0,"width":199,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":199,"height":38},"rotated":false,"capInsets":[0,0,0,0],"texture":"de31b43e-ea4e-42d1-93bd-44a91efdeff7@6c48a","packable":true}],[5],0,[0],[10],[181]],[[[125,"orange",48,{"commonHeight":70,"fontSize":48,"atlasName":"orange.png","fontDefDictionary":{"37":{"xOffset":-3,"yOffset":-6,"xAdvance":47,"rect":{"x":124,"y":64,"width":59,"height":52}},"48":{"xOffset":-2,"yOffset":-6,"xAdvance":29,"rect":{"x":185,"y":64,"width":40,"height":52}},"49":{"xOffset":0,"yOffset":-5,"xAdvance":29,"rect":{"x":43,"y":180,"width":37,"height":50}},"50":{"xOffset":-2,"yOffset":-6,"xAdvance":29,"rect":{"x":127,"y":126,"width":40,"height":51}},"51":{"xOffset":-3,"yOffset":-6,"xAdvance":29,"rect":{"x":227,"y":64,"width":40,"height":52}},"52":{"xOffset":-3,"yOffset":-5,"xAdvance":29,"rect":{"x":211,"y":126,"width":41,"height":50}},"53":{"xOffset":-3,"yOffset":-5,"xAdvance":29,"rect":{"x":169,"y":126,"width":40,"height":51}},"54":{"xOffset":-2,"yOffset":-6,"xAdvance":29,"rect":{"x":2,"y":126,"width":40,"height":52}},"55":{"xOffset":-2,"yOffset":-5,"xAdvance":29,"rect":{"x":2,"y":180,"width":39,"height":50}},"56":{"xOffset":-2,"yOffset":-6,"xAdvance":29,"rect":{"x":86,"y":126,"width":39,"height":52}},"57":{"xOffset":-2,"yOffset":-6,"xAdvance":29,"rect":{"x":44,"y":126,"width":40,"height":52}},"21169":{"xOffset":-3,"yOffset":-10,"xAdvance":48,"rect":{"x":2,"y":64,"width":59,"height":60}},"22870":{"xOffset":-3,"yOffset":-11,"xAdvance":48,"rect":{"x":129,"y":2,"width":60,"height":60}},"32047":{"xOffset":-3,"yOffset":-9,"xAdvance":48,"rect":{"x":63,"y":64,"width":59,"height":59}},"35299":{"xOffset":-3,"yOffset":-10,"xAdvance":48,"rect":{"x":66,"y":2,"width":61,"height":60}},"35745":{"xOffset":-2,"yOffset":-10,"xAdvance":48,"rect":{"x":191,"y":2,"width":60,"height":60}},"38145":{"xOffset":-3,"yOffset":-10,"xAdvance":48,"rect":{"x":2,"y":2,"width":62,"height":60}}},"kerningDict":{}}]],0,0,[0],[27],[182]],[[[125,"pink",64,{"commonHeight":64,"fontSize":64,"atlasName":"pink.png","fontDefDictionary":{"32":{"xOffset":0,"yOffset":60,"xAdvance":15,"rect":{"x":2,"y":171,"width":0,"height":0}},"43":{"xOffset":1,"yOffset":13,"xAdvance":39,"rect":{"x":123,"y":116,"width":40,"height":40}},"48":{"xOffset":2,"yOffset":6,"xAdvance":39,"rect":{"x":2,"y":2,"width":39,"height":55}},"49":{"xOffset":4,"yOffset":7,"xAdvance":39,"rect":{"x":85,"y":116,"width":36,"height":53}},"50":{"xOffset":1,"yOffset":6,"xAdvance":39,"rect":{"x":43,"y":59,"width":39,"height":54}},"51":{"xOffset":1,"yOffset":6,"xAdvance":39,"rect":{"x":43,"y":2,"width":39,"height":55}},"52":{"xOffset":0,"yOffset":7,"xAdvance":39,"rect":{"x":2,"y":116,"width":41,"height":53}},"53":{"xOffset":1,"yOffset":7,"xAdvance":39,"rect":{"x":84,"y":59,"width":39,"height":54}},"54":{"xOffset":2,"yOffset":6,"xAdvance":39,"rect":{"x":84,"y":2,"width":39,"height":55}},"55":{"xOffset":2,"yOffset":7,"xAdvance":39,"rect":{"x":45,"y":116,"width":38,"height":53}},"56":{"xOffset":2,"yOffset":6,"xAdvance":39,"rect":{"x":125,"y":2,"width":39,"height":55}},"57":{"xOffset":1,"yOffset":6,"xAdvance":39,"rect":{"x":2,"y":59,"width":39,"height":55}}},"kerningDict":{}}]],0,0,[0],[27],[183]],[[[66,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tilingOffset",8,[2,8,8,0,0],"mainTexture",6,0,"secondTexture",6,1]],11]]],0,0,[0,0,0],[38,113,13],[184,185,186]],[[[83,"resultPageFinger",15,2,0.4,3640207599,[[0,0.13333333333333333,0.3333333333333333]],[[[{},"modifiers",12,[[[20,"cc.Sprite"],"spriteFrame"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",3,[0,1,2]]]],11]]],0,0,[0,0,0],[-1,-2,-3],[11,78,11]],[[[50,"loadingPageInAction",0.3333333333333333,170253318,[[0,0.3333333333333333]],[{"frame":0.3333333333333333,"func":"","params":[]},{"frame":0.3333333333333333,"func":"onInActionFinish","params":[]}],[[[{},"modifiers",12,[[[20,"cc.Sprite"],"color"],4,0],"data",11,[{"keys":0,"easingMethods":{}},"values",12,[[[4,16777215],[4,4294967295]],8,8]]]],11]]],0,0,[],[],[]],[[{"name":"loading_4","rect":{"x":3,"y":0,"width":435,"height":40},"offset":{"x":-0.5,"y":0},"originalSize":{"width":442,"height":40},"rotated":false,"capInsets":[0,0,0,0],"texture":"ec45e776-2e4a-4774-bb7f-64522e7a18b9@6c48a","packable":true}],[5],0,[0],[10],[187]],[[[25,"smokeRed"],[94,"smokeRed",2,[-2],[1,"48XzdOyFlJJLoZ0kGFUGXX",-1,0],[1,0,1.651,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.5,1.5,1.5],[1,90,0,0]],[109,0.5,false,false,30,1,[0,"1fvP5/su5Pealsx7VIPmpW"],[0],[57,2,[4,4278190335],[4,4283645425]],[14,0.6],[4],[4],[14,1.8],[4],[4],[4],[4],[14,0.4],[4],[4],[4],[[111,[14,30]]],[112,[57,2,[4,4278190335],[4,4278190335]]],[113,true,3,0.5,[14,1]],[114,true,[110,1,[115,2,8,[[116,1],[117,1,0.01]]]],[4],[4],[4]],[118,[4],[4],[4],[14,1]],[119,[4],[4],[4]],[120,[4],[4],[4],[4]],[121,[4],[4],[4]],[122,[4],[4]],[123,[14,1],[4],[58],[58],-3],[124,1]]],0,[0,7,1,0,-1,2,0,25,2,0,9,1,3],[0,0],[-1,26],[39,25]],[[{"name":"bottomShader","rect":{"x":2,"y":2,"width":338,"height":352},"offset":{"x":-4,"y":2},"originalSize":{"width":350,"height":360},"rotated":false,"capInsets":[0,0,0,0],"texture":"fad5f260-57a3-4ef3-b6ac-a2ef3430aef3@6c48a","packable":true}],[5],0,[0],[10],[188]],[[{"name":"back_bg","rect":{"x":0,"y":0,"width":320,"height":568},"offset":{"x":0,"y":0},"originalSize":{"width":320,"height":568},"rotated":false,"capInsets":[0,0,0,0],"texture":"ff7c3729-75f5-453a-a424-778c48b542be@6c48a","packable":true}],[5],0,[0],[10],[189]]]]
